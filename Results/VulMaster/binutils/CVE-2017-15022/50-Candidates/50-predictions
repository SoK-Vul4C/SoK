<S2SV_ModStart> -> name = bfd_strdup ( <S2SV_ModStart> u. str )
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_name : var -> name =
<S2SV_ModStart> -> name = bfd_strdup ( <S2SV_ModStart> u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_name : if (! func -> name ) goto fail <S2SV_ModEnd> ; break ;
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : switch ( attr. form ) { case DW_AT_name : var -> name =
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. str ) ; break ; case DW_AT_name : var -> name =
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_name : if (! func -> name ) goto fail ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. str ) <S2SV_ModEnd> ; break ;
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. str ) ; break ; default : break ; } } if ( high_pc_relative ) high_pc += low_pc ; if ( func && high_pc_relative ) {
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. str ) ; break ; default : break ; } } if ( high_pc_relative ) high_pc += low_pc ; if ( func && high_pc_relative ) { if (
<S2SV_ModStart> -> name = bfd_strdup ( attr. u. str ) <S2SV_ModEnd> ; break ;
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. str ) ; break ; default : break ; } } if ( high_pc_relative ) high_pc += low_pc ; if ( func && high_pc_relative ) { if (! arange_add ( unit, & func -> arange, low_pc, high_pc ) ) goto fail ;
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : switch ( attr. form ) { case DW_FORM_addr : var -> file = concat_filename ( unit -> line_table, attr. u. str ) ; break ; default : break ; } break ; default : break ; } } if ( high_pc_relative ) high_pc += low_pc ; if ( func && high_pc_relative ) {
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : switch ( attr. form ) { case DW_FORM_addr : if ( * attr. u. val!= 0 ) goto fail ; break ; default : break ; } break ; default : break ; } } if ( high_pc_relative ) high_pc += low_pc ; if ( func && high_pc_relative ) {
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. str ) ; break ; default : goto fail <S2SV_ModEnd> ; } }
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : switch ( attr. form ) { case DW_FORM_addr : var -> file = concat_filename ( unit -> line_table, attr. u. str ) ; break ; default : goto fail ; } break ; default : break ; } } if ( high_pc_relative ) high_pc += low_pc ; if ( func && high_pc_relative ) {
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_name : if (! func -> name ) goto fail ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. str ) ; break ; default : break ; } } if ( high_pc_relative ) high_pc += low_pc ; if ( func && high_pc_relative ) {
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. str ) <S2SV_ModEnd> ; break ;
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : case DW_AT_decl_line : if ( * attr. u. val!= 0 ) goto fail ; break ; default : break ; } } if ( high_pc_relative ) high_pc += low_pc ; if ( func && high_pc_relative ) {
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : case DW_AT_decl_line : if ( * attr. u. val!= 0 ) goto fail ; break ; case DW_AT_name : var -> name =
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_name : if (! func -> name ) goto fail ; break ; case DW_AT_decl_file : if (! func -> file ) goto fail <S2SV_ModEnd> ; break ;
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. str ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val <S2SV_ModEnd> ; break ;
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : switch ( attr. form ) { case DW_AT_block : case DW_AT_block1 : case DW_AT_block2 : case DW_AT_block4 : break ; default : break ; } break ; default : break ; } } if ( high_pc_relative ) high_pc += low_pc ; if ( func && high_pc_relative ) {
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : switch ( attr. form ) { case DW_AT_name : if (! func -> name ) goto fail ; break ; default : break ; } break ; default : break ; } } if ( high_pc_relative ) high_pc += low_pc ; if ( func && high_pc_relative ) {
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. str ) ; break ; case DW_AT_range : if ( * attr. u. blk -> data == DW_OP_addr && * attr. u. val!= 0 ) goto fail <S2SV_ModEnd> ; break ;
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. str ) ; break ; case DW_AT_decl_file : break ; default : break ; } } if ( high_pc_relative ) high_pc += low_pc ; if ( func && high_pc_relative ) {
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : case DW_AT_decl_line : func -> line = attr. u. val ; break ; default : break ; } } if ( high_pc_relative ) high_pc += low_pc ; if ( func && high_pc_relative ) {
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; high_pc_relative = TRUE ; break ; case DW_AT_name : var -> name =
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : case DW_AT_decl_line : if ( * attr. u. val!= 0 ) goto fail ; break ; default : break ; } } if ( high_pc_relative ) high_pc += low_pc ; if ( func && high_pc_relative ) { if (
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : switch ( attr. form ) { case DW_FORM_addr : var -> file = concat_filename ( unit -> line_table, attr. u. str ) ; break ; default : break ; } break ; default : break ; } } if ( high_pc_relative ) high_pc += low_pc ; if ( func && high_pc_relative ) { if (
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. str ) ; break ; default : break ; } } if ( high_pc_relative ) high_pc += low_pc ; if ( func && high_pc!= 0 ) { if (
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; default : break ; } } if ( nesting_level == 1 ) { if (! arange_add ( unit, & func -> arange, low_pc, high_pc, attr. u. val ) ) goto fail ; <S2SV_ModEnd> break ; default
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; default : break ; } } if ( nesting_level == 1 ) { if (! arange_add ( unit, & func -> arange, low_pc, high_pc, attr. u. val ) ) goto fail ; } else { if (! arange_add ( unit, & func -> arange, low_pc, high_pc, attr. u. val ) ) goto fail <S2SV_ModEnd> ; } }
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. str ) ; break ; default : goto fail ; } } if ( high_pc_relative ) high_pc += low_pc ; if ( func && high_pc_relative ) {
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : case DW_AT_decl_line : func -> line = attr. u. val ; break ; default : break ; } } if ( high_pc_relative ) high_pc += low_pc ; if ( func && high_pc_relative ) { if (
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : switch ( attr. form ) { case DW_AT_block : case DW_AT_block1 : case DW_AT_block2 : case DW_AT_block4 : case DW_AT_exprloc : if ( * attr. u. str!= '\\0' ) goto fail ; } break ; default : break ; } } if ( high_pc_relative ) high_pc += low_pc ; if ( func && high_pc_relative ) {
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. str ) ; break ; case DW_AT_decl_file :
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; high_pc_relative = TRUE ; break ; case DW_AT_name : if (! func -> name ) goto fail <S2SV_ModEnd> ; break ;
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : switch ( attr. form ) { case DW_FORM_addr : if ( * attr. u. val!= 0 ) goto fail ; break ; default : break ; } break ; } } if ( high_pc_relative ) high_pc += low_pc ; if ( func && high_pc_relative ) {
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) <S2SV_ModEnd> ; break ;
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : switch ( attr. form ) { case DW_AT_block : case DW_AT_block1 : case DW_AT_block2 : case DW_AT_block4 : case DW_AT_exprloc : if ( * attr. u. blk -> data == DW_OP_addr ) { goto fail ; } break ; default : break ; } } break ; } fail : <S2SV_ModEnd> break ; }
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. str ) ; break ; default : break ; } } break ; fail : break ; } } if ( high_pc_relative ) high_pc += low_pc ; if ( func && high_pc_relative ) {
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : switch ( attr. form ) { case DW_FORM_addr : if ( * attr. u. str == DW_OP_addr ) goto fail ; break ; default : break ; } break ; default : break ; } } if ( high_pc_relative ) high_pc += low_pc ; if ( func && high_pc_relative ) {
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : if ( attr. u. val!= 0 ) goto fail ; break ; case DW_AT_name : var -> name =
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. str ) ; break ; default : break ; } } if ( nesting_level == 1 ) goto fail ; <S2SV_ModEnd> if ( high_pc_relative
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. str ) ; break ; default : break ; } } else { var -> name =
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : switch ( attr. form ) { case DW_AT_name : if (! func -> name ) goto fail ; break ; default : break ; } break ; case DW_AT_decl_line :
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : switch ( attr. form ) { case DW_AT_line : if ( * attr. u. val!= 0 ) goto fail ; break ; default : break ; } break ; default : break ; } } if ( high_pc_relative ) high_pc += low_pc ; if ( func && high_pc_relative ) {
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. str ) ; break ; default : break ; } } if ( high_pc_relative ) high_pc += low_pc ; if ( func && high_pc!= 0 ) { if (! arange_add ( unit, & func -> arange, low_pc, high_pc ) ) goto fail ;
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_low_pc : low_pc = attr. u. val ; break ; case DW_AT_decl_file : if ( attr. u. val!= 0 ) goto fail ; break ; default : break ; } } if ( high_pc_relative ) high_pc += low_pc ; if ( func && high_pc_relative ) {
<S2SV_ModStart> -> name = strdup ( attr. u. str ) ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. val ) ; break ; case DW_AT_decl_line : var -> line = attr. u. val ; break ; case DW_AT_name : if (! func -> name ) goto fail ; break ; case DW_AT_decl_file : var -> file = concat_filename ( unit -> line_table, attr. u. str ) ; break ; default : break ; } } if ( high_pc_relative ) high_pc += low_pc ; if ( func &&! func -> file ) goto fail ;
