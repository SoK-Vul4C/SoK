<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) { value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) ) ; } <S2SV_ModEnd> saved_sym = NULL
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) { error ( _ ( "Too many entries for %s\\n" ), name ) ; } <S2SV_ModStart> case 0x41 : if ( value > ( bfd_vma ) reloc -> r_addend ) { error ( _ ( "Too many entries for %s\\n" ), name ) ; } <S2SV_ModStart> case 0x43 : if ( value > ( bfd_vma ) reloc -> r_addend ) { error ( _ ( "Too many entries for %s\\n" ), name ) ; }
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) ) ; <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) ) value = ( bfd_vma ) reloc -> r_addend <S2SV_ModStart> case 0x43 : if ( <S2SV_ModStart>, 2 ) ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) )
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) ) ; <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) > value ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) )
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value ) ) ; <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) > ( bfd_vma ) value ) <S2SV_ModStart> case 0x43 : if ( <S2SV_ModStart>, 2 ) > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value )
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) ) ; <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) > ( bfd_vma ) value ) <S2SV_ModStart> case 0x43 : if ( <S2SV_ModStart>, 2 ) > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) )
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) ) ; <S2SV_ModStart>, value, ( bfd_vma )
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) ) ; <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) > value ) value = ( bfd_vma ) reloc -> r_addend <S2SV_ModStart> 2 ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) )
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) ) ; <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) )
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value ) ) ; <S2SV_ModStart>, value, ( bfd_vma )
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) { error ( _ ( "Too many entries for MSP430x reloc\\n" ) ) ; } <S2SV_ModStart> case 0x41 : if ( value > ( bfd_vma ) reloc -> r_addend ) { error ( _ ( "Too many entries for MSP430x reloc\\n" ) ) ; } <S2SV_ModStart> case 0x43 : if ( value > ( bfd_vma ) reloc -> r_addend ) { error ( _ ( "Too many entries for MSP430x reloc\\n" ) ) ; }
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) { error ( _ ( "Too many values for %s\\n" ), name ) ; } <S2SV_ModStart> case 0x41 : if ( value > ( bfd_vma ) reloc -> r_addend ) { error ( _ ( "Too many values for %s\\n" ), name ) ; } <S2SV_ModStart> case 0x43 : if ( value > ( bfd_vma ) reloc -> r_addend ) { error ( _ ( "Too many values for %s\\n" ), name ) ; }
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) { value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) ) ; } <S2SV_ModEnd> saved_sym = NULL <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) )
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) ) ; <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) > value ) value = ( bfd_vma ) reloc -> r_addend <S2SV_ModStart> case 0x43 : if ( <S2SV_ModStart>, 2 ) > value ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) )
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value ) ) ; <S2SV_ModStart> value, reloc_type!= <S2SV_ModEnd> 1? 4 <S2SV_ModStart> 4 : 2 ) ; byte_put ( start + reloc -> r_offset, value, reloc_type == 1? 2 : 3
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value ) ) ; <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) )
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if (! byte_get_at ( start + reloc -> r_offset, value ) ) abort ( ) ; <S2SV_ModStart> case 0x41 : if (! byte_get_at ( start + reloc -> r_offset, value ) ) abort ( ) ; <S2SV_ModStart> 2 ) ; if (! byte_get_at ( start + reloc -> r_offset, value ) ) abort ( ) ;
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value ) ) ; <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) > value ) value = ( bfd_vma ) reloc -> r_addend <S2SV_ModStart> 2 ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value ) )
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) ) ; <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) ) value = ( bfd_vma ) reloc -> r_addend <S2SV_ModStart> 2 ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) )
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) { value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) ) ; } <S2SV_ModEnd> saved_sym = NULL <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) ) { value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) ) ; } <S2SV_ModEnd> saved_sym = NULL
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) ) ; <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) > 0 ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) )
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) { value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) ) ; } byte_put ( start + reloc -> r_offset <S2SV_ModEnd>, value, <S2SV_ModStart> value, reloc_type <S2SV_ModEnd> ) ; saved_sym
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value ) ) ; <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value ) )
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) ) ; <S2SV_ModStart> value, reloc_type ) ; byte_put ( start + reloc -> r_offset, value, reloc_type
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) { value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) ) ; } <S2SV_ModEnd> saved_sym = NULL <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) > 2 ) { value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) ) ; } <S2SV_ModEnd> saved_sym = NULL
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value ) ) ; <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) ) value = ( bfd_vma ) reloc -> r_addend <S2SV_ModStart> case 0x43 : if ( <S2SV_ModStart>, 2 ) ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value ) )
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) ) ; <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) > value ) value = ( bfd_vma ) reloc -> r_addend <S2SV_ModStart> case 0x43 : if ( <S2SV_ModStart>, 2 ) > value ) value = ( bfd_vma ) reloc -> r_addend
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) ) ; <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) ) value = ( bfd_vma ) reloc -> r_addend <S2SV_ModStart> case 0x43 : if ( <S2SV_ModStart>, 2 ) ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value )
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) ) ; <S2SV_ModStart> value, reloc_type!= <S2SV_ModEnd> 1? 4 <S2SV_ModStart> 4 : 2 ) ; byte_put ( start + reloc -> r_offset, value, reloc_type == 1? 2 : 3
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) ) ; <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) > value ) ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) )
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value ) ) ; <S2SV_ModStart> value, reloc_type ) ; byte_put ( start + reloc -> r_offset, value, reloc_type
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value ) ) ; <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) ) value = ( bfd_vma ) reloc -> r_addend <S2SV_ModStart> 2 ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value ) )
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) ) ; <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) > value ) value = ( bfd_vma ) reloc -> r_addend <S2SV_ModStart> case 0x43 : if ( <S2SV_ModStart>, 2 ) > value )
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value ) ) ; <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) > value ) value = ( bfd_vma ) reloc -> r_addend <S2SV_ModStart> case 0x43 : if ( <S2SV_ModStart>, 2 ) > value ) value = ( bfd_vma ) reloc -> r_addend
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value ) ) ; <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) > 0 ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value ) )
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) { value = 0 ; goto handle_sym_diff ; } <S2SV_ModEnd> saved_sym = NULL <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) ) { value = 0 ; goto handle_sym_diff ; } <S2SV_ModEnd> value = reloc <S2SV_ModStart> case 0x43 : if ( <S2SV_ModStart>, 2 ) ) { value = 0 ; goto handle_sym_diff ; } <S2SV_ModEnd> saved_sym = NULL
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value ) ) ; <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) > value ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value ) )
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value ) ) ; <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) > value ) value = ( bfd_vma ) reloc -> r_addend <S2SV_ModStart> case 0x43 : if ( <S2SV_ModStart>, 2 ) > value ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value ) )
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if (! byte_put_at ( start + reloc -> r_offset, value ) ) abort ( ) ; <S2SV_ModStart> case 0x41 : if (! byte_put_at ( start + reloc -> r_offset, value ) ) abort ( ) ; <S2SV_ModStart> 2 ) ; if (! byte_put_at ( start + reloc -> r_offset, value ) ) abort ( ) ;
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) ) ; <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) > 4 ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) )
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) { value = 0 ; break ; } <S2SV_ModEnd> saved_sym = NULL <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) ) { value = 0 ; break ; } <S2SV_ModEnd> value = reloc <S2SV_ModStart> case 0x43 : if ( <S2SV_ModStart>, 2 ) ) { value = 0 ; break ; } <S2SV_ModEnd> saved_sym = NULL
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value ) ) ; <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) > 0 ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) )
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) { error ( _ ( "Too many values requested" ) ) ; } <S2SV_ModStart> case 0x41 : if ( value > ( bfd_vma ) reloc -> r_addend ) { error ( _ ( "Too many values requested" ) ) ; } <S2SV_ModStart> case 0x43 : if ( value > ( bfd_vma ) reloc -> r_addend ) { error ( _ ( "Too many values requested" ) ) ; }
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) { value = 0 ; goto handle_sym_diff ; } <S2SV_ModEnd> saved_sym = NULL <S2SV_ModStart> case 0x41 : if ( value > ( bfd_vma ) reloc -> r_addend ) { value = 0 ; goto handle_sym_diff ; } <S2SV_ModEnd> value = reloc <S2SV_ModStart> case 0x43 : if ( value > ( bfd_vma ) reloc -> r_addend ) { value = 0 ; goto handle_sym_diff ; }
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend + ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) ) ; <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) ) value = ( bfd_vma ) reloc -> r_addend <S2SV_ModStart> case 0x43 : if ( <S2SV_ModStart>, 2 ) ) value = ( bfd_vma ) reloc -> r_addend
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value ) ) ; <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) ) value = ( bfd_vma ) reloc -> r_addend <S2SV_ModStart> case 0x43 : if ( <S2SV_ModStart>, 2 ) ) value = ( bfd_vma ) reloc -> r_addend
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if (! byte_get_at ( start + reloc -> r_offset, value ) ) abort ( ) ; <S2SV_ModStart> case 0x41 : if (! byte_get_at ( start + reloc -> r_offset, value ) ) abort ( ) ; <S2SV_ModStart> case 0x43 : if (! byte_get_at ( start + reloc -> r_offset, value ) ) abort ( ) ;
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) ) ; <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) > value ) value = ( bfd_vma ) reloc -> r_addend <S2SV_ModStart> case 0x43 : if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) )
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) ) ; <S2SV_ModStart> case 0x41 : if ( <S2SV_ModStart>, 4 ) > 0 ) value = ( bfd_vma ) reloc -> r_addend <S2SV_ModStart> case 0x43 : if ( <S2SV_ModStart>, 2 ) > 0 ) value = ( bfd_vma ) reloc -> r_addend - ( symtab [ get_reloc_symindex ( reloc -> r_info ) ]. st_value - saved_sym -> st_value ) )
<S2SV_ModStart> Elf_Internal_Sym * symtab, bfd_vma value <S2SV_ModStart> NULL ) { <S2SV_ModEnd> value = reloc <S2SV_ModStart> st_value ) ; if ( value > ( bfd_vma ) reloc -> r_addend ) { value = 0 ; goto handle_sym_diff ; } <S2SV_ModEnd> saved_sym = NULL <S2SV_ModStart> case 0x41 : if ( value > ( bfd_vma ) reloc -> r_addend ) { value = 0 ; goto handle_sym_diff ; } <S2SV_ModStart> case 0x43 : if ( value > ( bfd_vma ) reloc -> r_addend ) { value = 0 ; goto handle_sym_diff ; }
