<S2SV_ModStart> ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; default : abort ( ) <S2SV_ModEnd> ; } }
<S2SV_ModStart> ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 :
<S2SV_ModStart> ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 :
<S2SV_ModStart> ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; default : error ( _ (
<S2SV_ModStart> ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; default : abort ( ) <S2SV_ModEnd> ; } }
<S2SV_ModStart> ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; default : error ( _ (
<S2SV_ModStart> ( _ ( "Invalid MIPSABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 :
<S2SV_ModStart> ( _ ( "Corrupt MIPSABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 :
<S2SV_ModStart> ( _ ( "Invalid MIPSABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; default : abort ( ) <S2SV_ModEnd> ; } }
<S2SV_ModStart> ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : if ( sizeof ( Elf32_External_ABIFlags_v0 )!= sect -> sh_size ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; res = FALSE ; break ; } break ; case DT_MIPS_ABIFLAGS_v1 : if ( sizeof ( Elf32_External_ABIFlags_v1 )!= sect -> sh_size ) ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; res = FALSE ; break ; } break ; case DT_MIPS_ABIFLAGS_v2 : if ( sizeof ( Elf32_External_ABIFlags_v2 )!= sect -> sh_size ) ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ) ; res = FALSE ; break ; } printf (
<S2SV_ModStart> ( _ ( "Corrupt MIPSABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; default : abort ( ) <S2SV_ModEnd> ; } }
<S2SV_ModStart> ( _ ( "Corrupt MIPSABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; default : error ( _ (
<S2SV_ModStart> ( _ ( "Invalid MIPSABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; default : error ( _ (
<S2SV_ModStart> ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; default : abort ( ) <S2SV_ModEnd> ; } }
<S2SV_ModStart> ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : break ; } if (
<S2SV_ModStart> ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 :
<S2SV_ModStart> ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; default : abort ( ) <S2SV_ModEnd> ; } }
<S2SV_ModStart> ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : break ; } if (
<S2SV_ModStart> ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : break ; } if (
<S2SV_ModStart> ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 :
<S2SV_ModStart> ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : break ; } if (
<S2SV_ModStart> ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 :
<S2SV_ModStart> ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 :
<S2SV_ModStart> ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : if ( sizeof ( Elf32_External_ABIFlags_v0 )!= sect -> sh_size ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; res = FALSE ; break ; } break ; case DT_MIPS_ABIFLAGS_v1 : if ( sizeof ( Elf32_External_ABIFlags_v1 )!= sect -> sh_size ) ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; res = FALSE ; break ; } break ; case DT_MIPS_ABIFLAGS_v2 : if ( sizeof ( Elf32_External_ABIFlags_v2 )!= sect -> sh_size ) ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ) ; res = FALSE ; break ; } break ; } if (
<S2SV_ModStart> ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : if ( sizeof ( Elf32_External_ABIFlags_v0 )!= sect -> sh_size ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; res = FALSE ; break ; } break ; case DT_MIPS_ABIFLAGS_v1 : if ( sizeof ( Elf32_External_ABIFlags_v1 )!= sect -> sh_size ) ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; res = FALSE ; break ; } break ; case DT_MIPS_ABIFLAGS_v2 : if ( sizeof ( Elf32_External_ABIFlags_v2 )!= sect -> sh_size ) ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ) ; res = FALSE ; break ; } <S2SV_ModEnd> break ; }
<S2SV_ModStart> ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : if ( sizeof ( Elf32_External_ABIFlags_v0 )!= sect -> sh_size ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; res = FALSE ; break ; } break ; case DT_MIPS_ABIFLAGS_v1 : if ( sizeof ( Elf32_External_ABIFlags_v1 )!= sect -> sh_size ) ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; res = FALSE ; break ; } break ; case DT_MIPS_ABIFLAGS_v2 : if ( sizeof ( Elf32_External_ABIFlags_v2 )!= sect -> sh_size ) ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ) ; res = FALSE ; break ; } break ; case DT_MIPS_ABIFLAGS_v3 : if (
<S2SV_ModStart> ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : if ( sizeof ( Elf32_External_ABIFlags_v0 )!= sect -> sh_size ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; res = FALSE ; break ; } break ; case DT_MIPS_ABIFLAGS_v1 : if ( sizeof ( Elf32_External_ABIFlags_v1 )!= sect -> sh_size ) ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; res = FALSE ; break ; } break ; case DT_MIPS_ABIFLAGS_v2 : if ( sizeof ( Elf32_External_ABIFlags_v2 )!= sect -> sh_size ) ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ) ; res = FALSE ; break ; } break ; default : error ( _ (
<S2SV_ModStart> ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; default : error ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ) ; res = FALSE <S2SV_ModEnd> ; } }
<S2SV_ModStart> ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_V0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_V1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_V2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_V3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_V4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; default : abort ( ) <S2SV_ModEnd> ; } }
<S2SV_ModStart> ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : if ( sizeof ( Elf32_External_ABIFlags_v0 )!= sect -> sh_size ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; res = FALSE ; break ; } break ; case DT_MIPS_ABIFLAGS_v1 : if ( sizeof ( Elf32_External_ABIFlags_v1 )!= sect -> sh_size ) ) { error ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; res = FALSE ; break ; } break ; case DT_MIPS_ABIFLAGS_v2 : if ( sizeof ( Elf32_External_ABIFlags_v2 )!= sect -> sh_size ) ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ) ; res = FALSE ; break ; } printf (
<S2SV_ModStart> ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : if ( sizeof ( Elf32_External_ABIFlags_v0 )!= sect -> sh_size ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; res = FALSE ; break ; } break ; case DT_MIPS_ABIFLAGS_v1 : if ( sizeof ( Elf32_External_ABIFlags_v1 )!= sect -> sh_size ) ) { error ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; res = FALSE ; break ; } break ; case DT_MIPS_ABIFLAGS_v2 : if ( sizeof ( Elf32_External_ABIFlags_v2 )!= sect -> sh_size ) ) { error ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ) ; res = FALSE ; break ; } <S2SV_ModEnd> break ; }
<S2SV_ModStart> ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : if ( sizeof ( Elf32_External_ABIFlags_v0 )!= sect -> sh_size ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; res = FALSE ; break ; } break ; case DT_MIPS_ABIFLAGS_v1 : if ( sizeof ( Elf32_External_ABIFlags_v1 )!= sect -> sh_size ) ) { error ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; res = FALSE ; break ; } break ; case DT_MIPS_ABIFLAGS_v2 : if ( sizeof ( Elf32_External_ABIFlags_v2 )!= sect -> sh_size ) ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ) ; res = FALSE ; break ; } <S2SV_ModEnd> break ; }
<S2SV_ModStart> ( _ ( "Invalid MIPSABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : break ; } if (
<S2SV_ModStart> ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : break ; default : error ( _ (
<S2SV_ModStart> ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : if ( sizeof ( Elf32_External_ABIFlags_v0 )!= sect -> sh_size ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; res = FALSE ; break ; } break ; case DT_MIPS_ABIFLAGS_v1 : if ( sizeof ( Elf32_External_ABIFlags_v1 )!= sect -> sh_size ) ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; res = FALSE ; break ; } break ; case DT_MIPS_ABIFLAGS_v2 : if ( sizeof ( Elf32_External_ABIFlags_v2 )!= sect -> sh_size ) ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ) ; res = FALSE ; break ; } <S2SV_ModEnd> if ( VALID_DYNAMIC_NAME
<S2SV_ModStart> ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : break ; default : error ( _ (
<S2SV_ModStart> ( _ ( "Invalid MIPSABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : break ; } if (
<S2SV_ModStart> ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : if ( sizeof ( Elf32_External_ABIFlags_v0 )!= sect -> sh_size ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; res = FALSE ; break ; } break ; case DT_MIPS_ABIFLAGS_v1 : if ( sizeof ( Elf32_External_ABIFlags_v1 )!= sect -> sh_size ) ) { error ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; res = FALSE ; break ; } break ; case DT_MIPS_ABIFLAGS_v2 : if ( sizeof ( Elf32_External_ABIFlags_v2 )!= sect -> sh_size ) ) { error ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ) ; res = FALSE ; break ; } <S2SV_ModEnd> if ( VALID_DYNAMIC_NAME
<S2SV_ModStart> ( _ ( "Corrupt MIPSABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : break ; } if (
<S2SV_ModStart> ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : if ( sizeof ( Elf32_External_ABIFlags_v0 )!= sect -> sh_size ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; res = FALSE ; break ; } break ; case DT_MIPS_ABIFLAGS_v1 : if ( sizeof ( Elf32_External_ABIFlags_v1 )!= sect -> sh_size ) ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; res = FALSE ; break ; } break ; case DT_MIPS_ABIFLAGS_v2 : if ( sizeof ( Elf32_External_ABIFlags_v2 )!= sect -> sh_size ) ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ) ; res = FALSE ; break ; } break ; case
<S2SV_ModStart> ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; default : abort ( ) <S2SV_ModEnd> ; } }
<S2SV_ModStart> ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : if ( sizeof ( Elf32_External_ABIFlags_v0 )!= sect -> sh_size ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; res = FALSE ; break ; } break ; case DT_MIPS_ABIFLAGS_v0 : if ( sizeof ( Elf32_External_ABIFlags_v0 )!= sect -> sh_size ) ) { error ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; res = FALSE ; break ; } break ; case DT_MIPS_ABIFLAGS_v0 : if ( sizeof ( Elf32_External_ABIFlags_v0 )!= sect -> sh_size ) ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ) ; res = FALSE ; break ; } break ; case
<S2SV_ModStart> ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; default : error ( _ (
<S2SV_ModStart> ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; default : abort ( ) <S2SV_ModEnd> ; } }
<S2SV_ModStart> ( _ ( "Corrupt MIPSABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : break ; } if (
<S2SV_ModStart> ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_V0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_V1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_V2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_V3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_V4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; default : error ( _ (
<S2SV_ModStart> ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_V0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_V1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_V2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_V3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_V4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; default : abort ( ) <S2SV_ModEnd> ; } }
<S2SV_ModStart> ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : break ; } if (
<S2SV_ModStart> ( _ ( "Invalid MIPSABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v1 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v2 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v4 : abiflags_in. version = BYTE_GET ( abiflags_ext -> version ) ; break ; case DT_MIPS_ABIFLAGS_v3 :
<S2SV_ModStart> ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; break ; case DT_MIPS_ABIFLAGS_v0 : if ( sizeof ( Elf32_External_ABIFlags_v0 )!= sect -> sh_size ) { error ( _ ( "Corrupt MIPS ABI Flags section.\\n" ) ) ; res = FALSE ; break ; } break ; case DT_MIPS_ABIFLAGS_v1 : if ( sizeof ( Elf32_External_ABIFlags_v1 )!= sect -> sh_size ) ) { error ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ; res = FALSE ; break ; } break ; case DT_MIPS_ABIFLAGS_v2 : if ( sizeof ( Elf32_External_ABIFlags_v2 )!= sect -> sh_size ) ) { error ( _ ( "Invalid MIPS ABI Flags section.\\n" ) ) ) ; res = FALSE ; break ; } printf (
