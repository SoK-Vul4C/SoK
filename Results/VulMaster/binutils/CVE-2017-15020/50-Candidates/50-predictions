<S2SV_ModStart> if ( xptr >= <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> -> stmt_list_offset ; while ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aUnit -> line_count = ( tblend - xptr ) / 10 ; amt = sizeof ( struct linenumber ) * aUnit -> line_count ) ; }
<S2SV_ModStart> if ( xptr > <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> ++ ) { if ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aUnit -> line_count = ( tblend - xptr ) / 10 ; }
<S2SV_ModStart> if ( xptr > <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> ++ ) { if ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aUnit -> line_count = ( tblend - xptr ) / 10 ; amt = sizeof ( struct linenumber ) * aUnit -> line_count ) ;
<S2SV_ModStart> if ( xptr >= <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> -> stmt_list_offset ; while ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aUnit -> line_count = ( tblend - xptr ) / 10 ; }
<S2SV_ModStart> if ( xptr > <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> ++ ) { if ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aUnit -> line_count = ( tblend - xptr ) / 10 ; amt = sizeof ( struct linenumber ) * aUnit -> line_count ) ; }
<S2SV_ModStart> if ( xptr >= <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> -> stmt_list_offset ; while ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aunit -> line_count = ( tblend - xptr ) / 10 ; amt = sizeof ( struct linenumber ) * aUnit -> line_count ) ; }
<S2SV_ModStart> if ( xptr > <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> ++ ) { if ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aunit -> line_count = ( tblend - xptr ) / 10 ; }
<S2SV_ModStart> if ( xptr > <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> ++ ) { if ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aunit -> line_count = ( tblend - xptr ) / 10 ; amt = sizeof ( struct linenumber ) * aUnit -> line_count ) ;
<S2SV_ModStart> if ( xptr > <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> ++ ) { if ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aunit -> line_count = ( tblend - xptr ) / 10 ; amt = sizeof ( struct linenumber ) * aUnit -> line_count ) ; }
<S2SV_ModStart> if ( xptr >= <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> ++ ) { if ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aUnit -> line_count = ( tblend - xptr ) / 10 ; amt = sizeof ( struct linenumber ) * aUnit -> line_count ) ;
<S2SV_ModStart> if ( xptr >= <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> ++ ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ;
<S2SV_ModStart> if ( xptr >= <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> ++ ) { if ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aUnit -> line_count = ( tblend - xptr ) / 10 ; amt = sizeof ( struct linenumber ) * aUnit -> line_count ) ; }
<S2SV_ModStart> if ( xptr >= <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> ++ ) { if ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aUnit -> line_count = ( tblend - xptr ) / 10 ; }
<S2SV_ModStart> if ( xptr >= <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> -> stmt_list_offset ; while ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aUnit -> line_count = ( tblend - xptr ) / 10 ; amt = sizeof ( struct linenumber ) * aUnit -> line_count ) ;
<S2SV_ModStart> if ( xptr > <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> ++ ) { if ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aUnit -> line_count = ( tblend - xptr ) / 10 ;
<S2SV_ModStart> if ( xptr >= <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> -> stmt_list_offset ; while ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aunit -> line_count = ( tblend - xptr ) / 10 ; }
<S2SV_ModStart> if ( xptr > <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> -> stmt_list_offset ; while ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aUnit -> line_count = ( tblend - xptr ) / 10 ; amt = sizeof ( struct linenumber ) * aUnit -> line_count ) ; }
<S2SV_ModStart> if ( xptr > <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> ++ ) { if ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ;
<S2SV_ModStart> if ( xptr >= <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> -> stmt_list_offset ; while ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; }
<S2SV_ModStart> if ( xptr >= <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> ++ ) { if ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aunit -> line_count = ( tblend - xptr ) / 10 ; amt = sizeof ( struct linenumber ) * aUnit -> line_count ) ; }
<S2SV_ModStart> if ( xptr > <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> ++ ) { if ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aUnit -> line_count = ( tblend - xptr ) / 10 ; aUnit -> addr = base + bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; }
<S2SV_ModStart> if ( xptr >= <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> ++ ) { if ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aunit -> line_count = ( tblend - xptr ) / 10 ; }
<S2SV_ModStart> if ( xptr >= <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> ++ ) { if ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aunit -> line_count = ( tblend - xptr ) / 10 ; amt = sizeof ( struct linenumber ) * aUnit -> line_count ) ;
<S2SV_ModStart> if ( xptr > <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> ++ ) { if ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aunit -> line_count = ( tblend - xptr ) / 10 ;
<S2SV_ModStart> if ( xptr >= <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> ++ ) { unsigned long eachLine ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 2 ;
<S2SV_ModStart> if ( xptr >= <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> -> stmt_list_offset ; while ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; amt = sizeof ( struct linenumber ) * aUnit -> line_count ) ; aUnit -> line_count = ( tblend - xptr ) / 10 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; }
<S2SV_ModStart> if ( xptr > <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> -> stmt_list_offset ; while ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aUnit -> line_count = ( tblend - xptr ) / 10 ; }
<S2SV_ModStart> if ( xptr >= <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> ++ ) { if ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aUnit -> line_count = ( tblend - xptr ) / 10 ;
<S2SV_ModStart> if ( xptr >= <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> -> stmt_list_offset ; while ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aunit -> line_count = ( tblend - xptr ) / 10 ; amt = sizeof ( struct linenumber ) * aUnit -> line_count ) ;
<S2SV_ModStart> if ( xptr > <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> -> stmt_list_offset ; while ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aunit -> line_count = ( tblend - xptr ) / 10 ; amt = sizeof ( struct linenumber ) * aUnit -> line_count ) ; }
<S2SV_ModStart> if ( xptr >= <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> -> stmt_list_offset ; while ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aUnit -> line_count = ( tblend - xptr ) / 10 ; amt = sizeof ( struct linenumber ) * aUnit -> line_count ) ; }
<S2SV_ModStart> if ( xptr >= <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> ++ ) { if ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aUnit -> line_count = ( tblend - xptr ) / 10 ; aUnit -> addr = base + bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; }
<S2SV_ModStart> if ( xptr >= <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> -> stmt_list_offset ; while ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ;
<S2SV_ModStart> if ( xptr >= <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> ++ ) { if ( xptr >= stash -> line_section_end ) return FALSE ;
<S2SV_ModStart> if ( xptr > <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> ++ ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ;
<S2SV_ModStart> if ( xptr >= <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> ++ ) { if ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ;
<S2SV_ModStart> < stash -> line_section_start <S2SV_ModEnd> ) { unsigned <S2SV_ModStart> ++ ) { if ( xptr >= stash -> line_section_end - aUnit -> stmt_list_offset ) return FALSE ;
<S2SV_ModStart> if ( xptr >= <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> ++ ) { if ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aunit -> line_count = ( tblend - xptr ) / 10 ;
<S2SV_ModStart> if ( xptr >= <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> -> stmt_list_offset ; while ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aUnit -> line_count = ( tblend - xptr ) / 10 ; amt = sizeof ( struct linenumber ) * aUnit -> line_count ) ; }
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> stash -> line_section_end ) && ( xptr >= stash -> line_section_start && xptr < stash -> line_section_end - aUnit -> stmt_list_offset ) ) <S2SV_ModStart> ++ ) { if ( ( xptr >= stash -> line_section_start && xptr < stash -> line_section_end - aUnit -> stmt_list_offset ) && ( xptr < stash -> line_section_end - aUnit -> stmt_list_offset ) )
<S2SV_ModStart> if ( xptr > <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> ++ ) { if ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 2 ;
<S2SV_ModStart> if ( xptr > <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> ++ ) { if ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aunit -> line_count = ( tblend - xptr ) / 10 ; aUnit -> addr = base + bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; }
<S2SV_ModStart> if ( xptr >= <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> ++ ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 2 ;
<S2SV_ModStart> if ( xptr > <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> -> stmt_list_offset ; while ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aUnit -> line_count = ( tblend - xptr ) / 10 ; amt = sizeof ( struct linenumber ) * aUnit -> line_count ) ;
<S2SV_ModStart> if ( xptr >= <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> -> stmt_list_offset ; while ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aUnit -> line_count = ( tblend - xptr ) / 10 ; amt = sizeof ( struct linenumber ) * aUnit -> line_count ) ; aUnit -> addr = base + bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; }
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> stash -> line_section_end ) && ( xptr >= stash -> line_section_start && xptr < stash -> line_section_end - aUnit -> stmt_list_offset ) ) <S2SV_ModStart> ++ ) { if ( ( xptr >= stash -> line_section_start && xptr < stash -> line_section_end - aUnit -> stmt_list_offset ) && ( xptr >= stash -> line_section_start && xptr < stash -> line_section_end - aUnit -> stmt_list_offset ) )
<S2SV_ModStart> if ( xptr > <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> -> stmt_list_offset ; while ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; }
<S2SV_ModStart> if ( xptr > <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> ++ ) { if ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aUnit -> line_count = ( tblend - xptr ) / 10 ; amt = sizeof ( struct linenumber ) * aUnit -> line_count ) ;
<S2SV_ModStart> if ( xptr >= <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> -> stmt_list_offset ; while ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; amt = sizeof ( struct linenumber ) * aUnit -> line_count ) ; aUnit -> line_count = ( tblend - xptr ) / 10 ; }
<S2SV_ModStart> if ( xptr > <S2SV_ModEnd> stash -> line_section_end <S2SV_ModStart> -> stmt_list_offset ; while ( xptr < stash -> line_section_end ) { unsigned long eachLine ; bfd_byte * tblend ; unsigned long base ; bfd_size_type amt ; tblend = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; base = bfd_get_32 ( stash -> abfd, ( bfd_byte * ) xptr ) ; xptr += 4 ; aunit -> line_count = ( tblend - xptr ) / 10 ; }
