<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numhtiles = %d; numvtiles = %d;\\n", dec -> numhtiles, dec -> vtiles ) ) ; <S2SV_ModStart> -> numtiles = JAS_ADD_TOO_BIG ( dec -> numhtiles, tile -> xstart, tile -> ystart ) ; dec -> yend = JAS_ADD_TOO_BIG ( dec -> numvtiles, tile -> ystart ) ; dec -> tilewidth = JAS_ADD_TOO_BIG ( dec -> numhtiles, tile -> ystart ) ; dec -> tileheight = JAS_ADD_TOO_BIG ( dec -> numvtiles, tile -> yend ) <S2SV_ModEnd> ; if (
<S2SV_ModStart> * cmpt ; jas_alloc2 ( dec -> numhtiles, sizeof ( jpc_dec_tile_t ) ) ) { return - 1 ; } jas_alloc2 ( dec -> numvtiles, sizeof ( jpc_dec_tile_t ) ) ) { return - 1 ; } <S2SV_ModStart> -> numtiles ; jas_alloc2 ( dec -> tilewidth, sizeof ( jpc_dec_tile_t ) ) ) { return - 1 ; } jas_alloc2 ( dec -> tileheight, sizeof ( jpc_dec_tile_t ) ) ) { return - 1 ; }
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "dec %p; numhtiles = %d; numvtiles = %d;\\n", dec, <S2SV_ModEnd> siz -> xoff <S2SV_ModStart> siz -> xoff, <S2SV_ModEnd> siz -> yoff <S2SV_ModStart> siz -> yoff ) ) <S2SV_ModStart> 1 ; } JAS_DBGLOG ( 10, ( "dec %p; numhtiles = %d; numvtiles = %d;\\n", dec, dec -> numhtiles, dec -> yend ) ) ;
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "dec %p; numhtiles = %d; numvtiles = %d;\\n", dec, <S2SV_ModEnd> siz -> xoff <S2SV_ModStart> siz -> xoff, <S2SV_ModEnd> siz -> yoff <S2SV_ModStart> siz -> yoff ) ) <S2SV_ModStart> 1 ; } JAS_DBGLOG ( 10, ( "dec %p; numhtiles = %d; numvtiles = %d;\\n", dec, dec -> numhtiles, dec -> vtiles ) ) ;
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numhtiles = %d; numvtiles = %d;\\n", dec -> numhtiles, dec -> vtiles ) ) ; <S2SV_ModStart> -> numtiles = JAS_ADD_TOO_BIG ( dec -> numhtiles, tile -> xstart, tile -> ystart ) ; dec -> yend = JAS_ADD_TOO_BIG ( dec -> numvtiles, tile -> ystart ) ; dec -> tilewidth = JAS_ADD_TOO_BIG ( dec -> numhtiles, tile -> xend ) ; dec -> tileheight = JAS_ADD_TOO_BIG ( dec -> numvtiles, tile -> yend ) <S2SV_ModEnd> ; if (
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numhtiles = %d; numvtiles = %d; tilewidth = %d; tileheight = %d;\\n", dec -> numhtiles, dec -> ystart, dec -> yend, dec -> tilewidth, dec -> yheight ) ) ; <S2SV_ModStart> -> numtiles = JAS_ADD_TOO_BIG ( dec -> numhtiles, dec -> ystart ) ; dec -> yend = JAS_ADD_TOO_BIG ( dec -> numvtiles, dec -> yend ) <S2SV_ModEnd> ; if (
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numtiles = %d; numhtiles = %d; numvtiles = %d;\\n", dec -> numcomps, siz -> hstep, siz -> vstep ) ) ; <S2SV_ModStart> -> numtiles = JAS_MIN ( dec -> numhtiles, siz -> hstep ) ; dec -> ystart = JAS_MIN ( dec -> yend, siz -> vstep ) <S2SV_ModEnd> ; if (
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numhtiles = %d; numvtiles = %d;\\n", dec -> numhtiles, dec -> yend ) ) ; <S2SV_ModStart> -> numtiles = JAS_ADD_TOO_BIG ( dec -> numhtiles, <S2SV_ModEnd> siz -> xoff <S2SV_ModStart> siz -> xoff ) ; dec -> ystart = JAS_ADD_TOO_BIG ( dec -> numyoff, <S2SV_ModEnd> siz -> yoff <S2SV_ModStart> siz -> yoff )
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numhtiles = %d; numvtiles = %d;\\n", dec -> numhtiles, dec -> vtiles ) ) ; <S2SV_ModStart> dec -> numvtiles <S2SV_ModEnd> ; if (
<S2SV_ModStart> * cmpt ; jas_alloc2 ( dec -> numhtiles, sizeof ( jpc_dec_tile_t ) ) ) { return - 1 ; } jas_alloc2 ( dec -> numvtiles, sizeof ( jpc_dec_tile_t ) ) ) { return - 1 ; } <S2SV_ModStart> -> numtiles ; jas_alloc2 ( dec -> tilewidth, sizeof ( jpc_dec_tile_t ) ) ) { return - 1 ; }
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numhtiles = %d; numvtiles = %d; tilexoff = %d; tileyoff = %d;\\n", dec -> numhtiles, tile -> ystart, tile -> yend, tile -> tilewidth, tile -> tileheight ) ) ; <S2SV_ModStart> -> numtiles = JAS_MIN ( dec -> numhtiles, tile -> ystart ) ; dec -> yend = JAS_MAX ( dec -> numvtiles, tile -> yend ) <S2SV_ModEnd> ; JAS_DBGLOG (
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "dec %p ; numhtiles = %d; numvtiles = %d;\\n", dec, <S2SV_ModEnd> siz -> xoff <S2SV_ModStart> siz -> xoff, <S2SV_ModEnd> siz -> yoff <S2SV_ModStart> siz -> yoff ) ) <S2SV_ModEnd> ; if (
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numhtiles = %d; numvtiles = %d; tilexoff = %d; tileyoff = %d;\\n", dec -> numhtiles, tile -> ystart, tile -> yend, tile -> tilewidth, tile -> tileheight ) ) ; <S2SV_ModStart> -> numtiles = JAS_ADD_TOO_BIG ( dec -> numhtiles, tile -> ystart ) ; dec -> yend = JAS_ADD_TOO_BIG ( dec -> numvtiles, tile -> yend ) <S2SV_ModEnd> ; if (
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numhtiles = %d; numvtiles = %d;\\n", dec -> numhtiles, dec -> yend ) ) ; <S2SV_ModStart> -> numtiles = JAS_ADD_TOO_BIG ( dec -> numhtiles, <S2SV_ModEnd> siz -> xoff <S2SV_ModStart> siz -> xoff ) ; dec -> yend = JAS_ADD_TOO_BIG ( dec -> numvtiles, <S2SV_ModEnd> siz -> yoff <S2SV_ModStart> siz -> yoff )
<S2SV_ModStart> * cmpt ; jas_alloc2 ( dec -> numhtiles, sizeof ( jpc_dec_tile_t ) ) ) { return - 1 ; } jas_alloc2 ( dec -> numvtiles, sizeof ( jpc_dec_tile_t ) ) ) { return - 1 ; } <S2SV_ModStart> -> numtiles = JAS_MIN ( dec -> numhtiles, <S2SV_ModStart> dec -> numvtiles )
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numhtiles = %d; numvtiles = %d;\\n", dec -> numhtiles, dec -> vtiles ) ) ; <S2SV_ModStart> -> numtiles = JAS_ADD_TOO_BIG ( dec -> numhtiles, tile -> xstart, tile -> ystart ) ; dec -> yend = JAS_ADD_TOO_BIG ( dec -> numvtiles, tile -> ystart ) ; dec -> tilewidth = JAS_ADD_TOO_BIG ( dec -> numhtiles, tile -> xstart ) ; dec -> tileheight = JAS_ADD_TOO_BIG ( dec -> numvtiles, tile -> yend ) <S2SV_ModEnd> ; if (
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numtiles = %d; numhtiles = %d; numvtiles = %d; tilexoff = %d; tileyoff = %d;\\n", dec -> numcomps, siz -> xoff, siz -> yoff, siz -> width, siz -> yoff ) ) ; <S2SV_ModStart> dec -> numvtiles <S2SV_ModEnd> ) { htileno
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numhtiles = %d; numvtiles = %d;\\n", dec -> numhtiles, dec -> vtiles ) ) ; <S2SV_ModStart> dec -> numvtiles <S2SV_ModEnd> ) { htileno
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numtiles = %d; numhtiles = %d; numvtiles = %d; tilexoff = %d; tileyoff = %d;\\n", dec -> numcomps, siz -> xoff, siz -> yoff, siz -> width, siz -> yoff, siz -> height ) ) ; <S2SV_ModStart> -> numtiles = JAS_MIN ( dec -> numhtiles, siz -> width ) ; dec -> yend = JAS_MAX ( dec -> numvtiles, siz -> height ) <S2SV_ModEnd> ; if (
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numhtiles = %d; numvtiles = %d;\\n", dec -> numhtiles, dec -> yend ) ) ; <S2SV_ModStart> dec -> numvtiles <S2SV_ModEnd> ; if (
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numhtiles = %d; numvtiles = %d;\\n", dec -> numhtiles, dec -> vtiles ) ) ; <S2SV_ModStart> -> numtiles = JAS_MIN ( dec -> numhtiles, siz -> width ) ; dec -> ystart = JAS_MIN ( dec -> yend, siz -> height ) <S2SV_ModEnd> ; JAS_DBGLOG (
<S2SV_ModStart> * cmpt ; jas_alloc2 ( dec -> numhtiles, sizeof ( jpc_dec_tile_t ) ) ) { return - 1 ; } JAS_DBGLOG ( 10, ( "numtiles = %d; numhtiles = %d; numvtiles = %d;\\n", dec -> numhtiles, dec -> yend ) ) ; <S2SV_ModStart> -> numtiles = JAS_ADD_TO_ARRAY ( dec -> numhtiles, dec -> ystart ), JAS_ADD_TO_ARRAY ( dec -> numvtiles, dec -> yend ) ) <S2SV_ModEnd> ; if (
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numtiles = %d; numhtiles = %d; numvtiles = %d; tilexoff = %d; tileyoff = %d;\\n", dec -> numcomps, siz -> xoff, siz -> yoff, siz -> width, siz -> yoff, siz -> height ) ) ; <S2SV_ModStart> -> numtiles = JAS_MIN ( dec -> numhtiles, siz -> width ) ; dec -> yend = JAS_MAX ( dec -> yend, siz -> height ) <S2SV_ModEnd> ; if (
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numhtiles = %d; numvtiles = %d;\\n", dec -> numhtiles, dec -> vtiles ) ) ; <S2SV_ModStart> -> numtiles = JAS_ADD_TOO_BIG ( dec -> numhtiles, tile -> xstart, tile -> ystart ) ; dec -> yend = JAS_ADD_TOO_BIG ( dec -> numvtiles, tile -> ystart ) ; dec -> tilewidth = JAS_ADD_TOO_BIG ( dec -> numhtiles, tile -> yend ) ; dec -> tileheight = JAS_ADD_TOO_BIG ( dec -> numvtiles, tile -> yend ) <S2SV_ModEnd> ; if (
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numhtiles = %d; numvtiles = %d; tilexoff = %d; tileyoff = %d;\\n", dec -> numhtiles, tile -> ystart, tile -> yend, tile -> tilewidth, tile -> tileheight ) ) ; <S2SV_ModStart> -> numtiles = JAS_MIN ( dec -> numhtiles, tile -> xend ) ; dec -> yend = JAS_MAX ( dec -> numvtiles, tile -> yend ) <S2SV_ModEnd> ; JAS_DBGLOG (
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numhtiles = %d; numvtiles = %d; tilexoff = %d; tileyoff = %d;\\n", dec -> numhtiles, tile -> ystart, tile -> yend, tile -> tilewidth, tile -> tileheight ) ) ; <S2SV_ModStart> -> numtiles = JAS_ADD_TOO_BIG ( dec -> numhtiles, tile -> ystart ) ; dec -> yend = JAS_ADD_TOO_BIG ( dec -> numvtiles, tile -> yend ) <S2SV_ModEnd> ; JAS_DBGLOG (
<S2SV_ModStart> * cmpt ; jas_alloc2 ( dec -> numhtiles, sizeof ( jpc_dec_tile_t ) ) ) { return - 1 ; } JAS_DBGLOG ( 10, ( "numtiles = %d; numhtiles = %d; numvtiles = %d;\\n", dec -> numhtiles, dec -> yend ) ) ; <S2SV_ModStart> -> numtiles = JAS_ADD_TO_INT ( dec -> numhtiles, dec -> ystart ) ; dec -> yend = JAS_ADD_TO_INT ( dec -> numvtiles, dec -> yend ) <S2SV_ModEnd> ; if (
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numhtiles = %d; numvtiles = %d;\\n", dec -> numhtiles, dec -> yend ) ) ; <S2SV_ModStart> -> numtiles = JAS_ADD_TOO_BIG ( dec -> numhtiles, <S2SV_ModEnd> dec -> numvtiles <S2SV_ModStart> dec -> numvtiles )
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numhtiles = %d; numvtiles = %d;\\n", dec -> numhtiles, dec -> yend ) ) ; <S2SV_ModStart> -> numtiles = JAS_ADD_TOO_BIG ( dec -> numhtiles, <S2SV_ModEnd> siz -> xoff <S2SV_ModStart> siz -> xoff ) ; dec -> ystart = JAS_ADD_TOO_BIG ( dec -> yend, <S2SV_ModEnd> siz -> yoff <S2SV_ModStart> siz -> yoff )
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numhtiles = %d; numvtiles = %d; tilewidth = %d; tileheight = %d;\\n", dec -> numhtiles, dec -> ystart, dec -> yend, dec -> tilewidth, dec -> yheight ) ) ; <S2SV_ModStart> -> numtiles = JAS_ADD_TOO_BIG ( dec -> numhtiles, dec -> ystart ) ; dec -> yend = JAS_ADD_TOO_BIG ( dec -> numvtiles, dec -> yend ) <S2SV_ModEnd> ; JAS_DBGLOG (
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numhtiles = %d; numvtiles = %d; tilexoff = %d; tileyoff = %d;\\n", dec -> numhtiles, tile -> ystart, tile -> yend, tile -> tilewidth, tile -> tileheight ) ) ; <S2SV_ModStart> -> numtiles = JAS_ADD_TOO_BIG ( dec -> numhtiles, tile -> xend ) ; dec -> yend = JAS_ADD_TOO_BIG ( dec -> numvtiles, tile -> yend ) <S2SV_ModEnd> ; if (
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numhtiles = %d; numvtiles = %d;\\n", dec -> numhtiles, dec -> yend ) ) ; <S2SV_ModStart> -> numtiles = JAS_ADD_TOO_BIG ( dec -> numhtiles, <S2SV_ModEnd> siz -> xoff <S2SV_ModStart> siz -> xoff ) ; dec -> ystart = JAS_ADD_TOO_BIG ( dec -> numyiles, <S2SV_ModEnd> siz -> yoff <S2SV_ModStart> siz -> yoff )
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numhtiles = %d; numvtiles = %d; tilexoff = %d; tileyoff = %d;\\n", dec -> numhtiles, tile -> ystart, tile -> yend, tile -> tilewidth, tile -> tileheight ) ) ; <S2SV_ModStart> -> numtiles = JAS_ADD_TOO_BIG ( dec -> numhtiles, tile -> xend ) ; dec -> yend = JAS_ADD_TOO_BIG ( dec -> numvtiles, tile -> yend ) <S2SV_ModEnd> ; JAS_DBGLOG (
<S2SV_ModStart> * cmpt ; jas_alloc2 ( dec -> numhtiles, sizeof ( jpc_dec_tile_t ) ) ) { return - 1 ; } JAS_DBGLOG ( 10, ( "numtiles = %d; numhtiles = %d; numvtiles = %d;\\n", dec -> numhtiles, dec -> yend ) ) ; <S2SV_ModStart> -> numtiles = JAS_ADD_TO_NUM ( dec -> numhtiles, dec -> ystart ) ; dec -> yend = JAS_ADD_TO_NUM ( dec -> numvtiles, dec -> yend ) <S2SV_ModEnd> ; if (
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numhtiles = %d; numvtiles = %d; tilexoff = %d; tileyoff = %d;\\n", dec -> numhtiles, tile -> ystart, tile -> yend, tile -> tilewidth, tile -> tileheight ) ) ; <S2SV_ModStart> 1 ; } <S2SV_ModEnd> if (!
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numhtiles = %d; numvtiles = %d; tilexoff = %d; tileyoff = %d;\\n", dec -> numhtiles, tile -> ystart, tile -> yend, tile -> tilewidth, tile -> tileheight ) ) ; <S2SV_ModStart> -> numtiles = JAS_MIN ( dec -> numhtiles, tile -> ystart ) ; dec -> yend = JAS_MAX ( dec -> numvtiles, tile -> yend ) <S2SV_ModEnd> ; if (
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numhtiles = %d; numvtiles = %d;\\n", dec -> numhtiles, dec -> vtiles ) ) ; <S2SV_ModStart> -> numtiles = JAS_ADD_TOO_BIG ( dec -> numhtiles, tile -> xstart, tile -> ystart ) ; dec -> yend = JAS_ADD_TOO_BIG ( dec -> numvtiles, tile -> yend ) <S2SV_ModEnd> ; if (
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numtiles = %d; numhtiles = %d; numvtiles = %d; tilewidth = %d; tileheight = %d;\\n", dec -> numcomps, dec -> htileno, dec -> vtileno, dec -> tilewidth, dec -> tileheight ) ) ) { return - 1 ; } <S2SV_ModStart> -> numtiles = JAS_MIN ( dec -> numhtiles, tile -> width ) ; dec -> ystart = JAS_MIN ( dec -> yend, tile -> height ) <S2SV_ModEnd> ; JAS_DBGLOG (
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "dec %p; numhtiles = %d; numvtiles = %d;\\n", dec, <S2SV_ModEnd> siz -> xoff <S2SV_ModStart> siz -> xoff, <S2SV_ModEnd> siz -> yoff <S2SV_ModStart> siz -> yoff ) ) <S2SV_ModStart> 1 ; } JAS_DBGLOG ( 10, ( "dec %p; numhtiles = %d; numvtiles = %d;\\n", dec, <S2SV_ModEnd> dec -> numhtiles <S2SV_ModStart> dec -> numvtiles ) )
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numhtiles = %d; numvtiles = %d;\\n", dec -> numhtiles, dec -> vtiles ) ) ; <S2SV_ModStart> -> numtiles = JAS_ADD_TOO_BIG ( dec -> numhtiles, tile -> xstart, tile -> ystart ) ; dec -> yend = JAS_ADD_TOO_BIG ( dec -> numvtiles, tile -> yend ) <S2SV_ModEnd> ; JAS_DBGLOG (
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numtiles = %d; numhtiles = %d; numvtiles = %d; tilexoff = %d; tileyoff = %d;\\n", dec -> numcomps, siz -> xoff, siz -> yoff, siz -> tilewidth, siz -> yoff ) ) ; <S2SV_ModStart> -> numtiles = JAS_MIN ( dec -> numhtiles, siz -> width ) ; dec -> yend = JAS_MAX ( dec -> numvtiles, siz -> height ) <S2SV_ModEnd> ; if (
<S2SV_ModStart> * cmpt ; jas_alloc2 ( dec -> numhtiles, sizeof ( jpc_dec_tile_t ) ) ) { return - 1 ; } JAS_DBGLOG ( 10, ( "numtiles = %d; numhtiles = %d; numvtiles = %d; tilexoff = %d; tileyoff = %d;\\n", dec -> numhtiles, dec -> ystart, dec -> yend, dec -> tilewidth, dec -> yheight ) ) ; <S2SV_ModEnd> if (!
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numhtiles = %d; numvtiles = %d; tilexoff = %d; tileyoff = %d;\\n", dec -> numhtiles, tile -> ystart, tile -> yend, tile -> tilewidth, tile -> tileheight ) ) ; <S2SV_ModStart> -> numtiles = JAS_ADD_TOO_BIG ( dec -> numhtiles, tile -> ystart ) ; dec -> yend = JAS_ADD_TOO_BIG ( dec -> numvtiles, tile -> yend ) <S2SV_ModEnd> ; } }
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "dec %p; numhtiles = %d; numvtiles = %d;\\n", dec, <S2SV_ModEnd> siz -> xoff <S2SV_ModStart> siz -> xoff, <S2SV_ModEnd> siz -> yoff <S2SV_ModStart> dec -> numvtiles ) )
<S2SV_ModStart> * cmpt ; jas_alloc2 ( dec -> numhtiles, sizeof ( dec -> tilewidth ), JAS_alloc2 ( dec -> numvtiles, sizeof ( dec -> tileheight ) ) ) ) { return - 1 ; } <S2SV_ModStart> -> numtiles = JAS_MIN ( dec -> numhtiles, <S2SV_ModStart> dec -> numvtiles )
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numtiles = %d; numhtiles = %d; numvtiles = %d; tilexoff = %d; tileyoff = %d;\\n", dec -> numcomps, siz -> xoff, siz -> yoff, siz -> tilewidth, siz -> yoff ) ) ; <S2SV_ModStart> -> numtiles = JAS_MIN ( dec -> numhtiles, siz -> width ) ; dec -> yend = JAS_MAX ( dec -> yend, siz -> height ) <S2SV_ModEnd> ; if (
<S2SV_ModStart> * cmpt ; jas_alloc2 ( dec -> numhtiles, sizeof ( jpc_dec_tile_t ) ) ) { return - 1 ; } JAS_DBGLOG ( 10, ( "numtiles = %d; numhtiles = %d; numvtiles = %d; tilexoff = %d; tileyoff = %d;\\n", dec -> numhtiles, dec -> ystart, dec -> yend, dec -> tilewidth, dec -> yheight ) ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> 1 ; } dec -> xstart = siz -> xoff ; dec -> ystart = siz -> yoff ; dec -> yend = siz -> height ;
<S2SV_ModStart> * cmpt ; jas_alloc2 ( dec -> numhtiles, sizeof ( jpc_dec_tile_t ) ) ) { return - 1 ; } JAS_DBGLOG ( 10, ( "numtiles = %d; numhtiles = %d; numvtiles = %d;\\n", dec -> numhtiles, dec -> yend ) ) ; <S2SV_ModStart> -> numtiles = JAS_MIN ( dec -> numhtiles, <S2SV_ModEnd> dec -> numvtiles <S2SV_ModStart> dec -> numvtiles )
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numhtiles = %d; numvtiles = %d;\\n", dec -> numhtiles, dec -> yend ) ) ; <S2SV_ModStart> dec -> numvtiles <S2SV_ModEnd> ) { htileno
<S2SV_ModStart> * cmpt ; JAS_DBGLOG ( 10, ( "numhtiles = %d; numvtiles = %d;\\n", dec -> numhtiles, dec -> yend ) ) ; <S2SV_ModStart> -> numtiles = JAS_ADD_TOO_BIG ( dec -> numhtiles, <S2SV_ModEnd> siz -> xoff <S2SV_ModStart> siz -> xoff ) ; dec -> yend = JAS_ADD_TOO_BIG ( dec -> numyiles, <S2SV_ModEnd> siz -> yoff <S2SV_ModStart> siz -> yoff )
