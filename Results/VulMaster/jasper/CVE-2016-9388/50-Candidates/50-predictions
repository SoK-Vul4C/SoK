<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> i ) { <S2SV_ModEnd> } pad = <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> ) | c ) ; if ( z >= hdr -> width || z >= hdr -> height ) { return - 1 ; } <S2SV_ModEnd> nz += 8
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> i ) { <S2SV_ModEnd> } pad = <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> | c ; if ( z >= hdr -> width || z >= hdr -> height ) { return - 1 ; }
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> i ) { <S2SV_ModEnd> } pad = <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> ) | c )
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> image ) ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> EOF ) { jas_stream_free ( in ) ; <S2SV_ModStart> 1 ; } if ( z >= hdr -> width || z >= hdr -> height ) { jas_stream_free ( in ) ; return - 1 ; }
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> image ) ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> ) | c )
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> i ) { <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { jas_stream_free ( in ) ; <S2SV_ModStart> 1 ; } if ( z >= hdr -> width || z >= hdr -> height ) { jas_stream_free ( in ) ; return - 1 ; }
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> jas_image_width ( image ) <S2SV_ModStart> EOF ) { jas_stream_free ( in ) ; <S2SV_ModStart> 1 ; } if ( z >= hdr -> width || z >= hdr -> height ) { jas_stream_free ( in ) ; return - 1 ; }
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> i ) { <S2SV_ModEnd> } pad = <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> ) | c ; if ( z >= hdr -> width || z >= hdr -> height ) { return - 1 ; } <S2SV_ModEnd> nz += 8
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> image ) ), 0 ) ; assert ( data [ i ] <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> ) | c ) ; nz += 8 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { data [ i ] = jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ i ] )
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data ) ; <S2SV_ModStart> i ) { <S2SV_ModEnd> } pad = <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> ) | c ) ; if ( z >= hdr -> width || z >= hdr -> height ) { return - 1 ; } <S2SV_ModEnd> nz += 8
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> ( image ), 1 <S2SV_ModStart> EOF ) { jas_stream_free ( in ) ; <S2SV_ModStart> 1 ; } if ( z >= hdr -> width || z >= hdr -> height ) { jas_stream_free ( in ) ; return - 1 ; }
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> i ) { <S2SV_ModEnd> } pad = <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> 8 ) | ( c & 0xff ) <S2SV_ModEnd> ) ; nz
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> image ) ), 2 <S2SV_ModEnd> ) ; } <S2SV_ModStart> EOF ) { jas_stream_free ( in ) ; <S2SV_ModStart> 1 ; } if ( z >= hdr -> width || z >= hdr -> height ) { jas_stream_free ( in ) ; return - 1 ; }
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> image ) ), 0 <S2SV_ModEnd> ) ; } <S2SV_ModStart> EOF ) { jas_stream_free ( in ) ; <S2SV_ModStart> 1 ; } if ( z >= hdr -> width || z >= hdr -> height ) { jas_stream_free ( in ) ; return - 1 ; }
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> i ) { <S2SV_ModEnd> } pad = <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> 8 ) | ( c & 0xFF ) <S2SV_ModEnd> ) ; nz
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 <S2SV_ModEnd> ] ) ; <S2SV_ModStart> i ) { <S2SV_ModEnd> } pad = <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> ) | c ) ; if ( z >= hdr -> width || z >= hdr -> height ) { return - 1 ; } <S2SV_ModEnd> nz += 8
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> image ) ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> ) | c ) ; if ( z >= hdr -> width || z >= hdr -> height ) { return - 1 ; } <S2SV_ModEnd> nz += 8
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> image ) ), 0 ) ; assert ( data [ i ] <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> ) | c ) ; nz += 8 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { data [ i ] = jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ i ]
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> image ) ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> | c ; if ( z >= hdr -> width || z >= hdr -> height ) { return - 1 ; }
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> i ) { <S2SV_ModEnd> } pad = <S2SV_ModStart> ) { return JAS_ERROR <S2SV_ModEnd> ; } z <S2SV_ModStart> | c ; if ( z >= hdr -> width || z >= hdr -> height ) { return JAS_ERROR ; }
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> jas_image_width ( image ) <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> ) | c )
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> jas_image_width ( image ) <S2SV_ModStart> EOF ) { jas_stream_free ( in ) ; <S2SV_ModStart> ) | c ; jas_stream_free ( in )
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> image ) ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> EOF ) { jas_stream_free ( in ) ; <S2SV_ModStart> ) | c ; jas_stream_free ( in )
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data ) ; <S2SV_ModStart> i ) { <S2SV_ModEnd> } pad = <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> | c ; if ( z >= hdr -> width || z >= hdr -> height ) { return - 1 ; }
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> image ) ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> EOF ) { jas_stream_close ( in ) ; <S2SV_ModStart> 1 ; } if ( z >= hdr -> width || z >= hdr -> height ) { jas_stream_close ( in ) ; return - 1 ; }
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { jas_stream_free ( in ) ; <S2SV_ModStart> 1 ; } if ( z >= hdr -> width || z >= hdr -> height ) { jas_stream_free ( in ) ; return - 1 ; }
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> image ) ), 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> EOF ) { jas_stream_free ( in ) ; <S2SV_ModStart> 1 ; } if ( z >= hdr -> width || z >= hdr -> height ) { jas_stream_free ( in ) ; return - 1 ; }
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> image ) ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> ) | c ) ; if ( z > hdr -> width || z > hdr -> height ) { return - 1 ; } <S2SV_ModEnd> nz += 8
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> i ) { <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { jas_stream_free ( in ) ; <S2SV_ModStart> 1 ; } jas_matrix_set ( data [ z ], c, <S2SV_ModEnd> z << 8 <S2SV_ModStart> z << 8 ) ; jas_matrix_set ( data [ 2 ], c, <S2SV_ModEnd> z << 8 <S2SV_ModStart> z << 8 ) ; jas_stream_free ( in
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } pad = <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> | c ; if ( z >= hdr -> width || z >= hdr -> height ) { return - 1 ; }
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> image ) ), 0 ) ; assert ( data [ i ] <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> ) | c ) ; nz += 8 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { data [ i ] = jas_matrix_create ( 1, jas_image_width ( image ) )
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> image ) ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> EOF ) { jas_stream_close ( in ) ; <S2SV_ModStart> ) | c ; jas_stream_close ( in )
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> i ) { <S2SV_ModEnd> } pad = <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> | c ; if ( z >= hdr -> width || z >= hdr -> height ) { return - 1 ; }
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> jas_image_width ( image ) <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> 8 ) | ( c & 0xff ) <S2SV_ModEnd> ) ; nz
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> image ) ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> 8 ) | ( c & 0xff ) <S2SV_ModEnd> ) ; nz
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data ) ; <S2SV_ModStart> i ) { <S2SV_ModEnd> } pad = <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> ) | c )
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 <S2SV_ModEnd> ] ) ; <S2SV_ModStart> i ) { <S2SV_ModEnd> } pad = <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> | c ; if ( z >= hdr -> width || z >= hdr -> height ) { return - 1 ; }
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> image ) ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> 8 ) | ( c & 0xFF ) <S2SV_ModEnd> ) ; nz
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 <S2SV_ModEnd> ] ) ; <S2SV_ModStart> i ) { <S2SV_ModEnd> } pad = <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> ) | c )
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> jas_image_width ( image ) <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> ) | c ) ; if ( z >= hdr -> width || z >= hdr -> height ) { return - 1 ; } <S2SV_ModEnd> nz += 8
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> jas_image_width ( image ), 1 <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> 8 ) | ( c & 0xff ) <S2SV_ModEnd> ) ; nz
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> i ) { <S2SV_ModEnd> } pad = <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> ) | c ; if ( z >= hdr -> width || z >= hdr -> height ) { return - 1 ; } <S2SV_ModEnd> nz += 8
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> image ) ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> EOF ) { jas_stream_free ( in ) ; <S2SV_ModStart> 1 ; } if ( z >= hdr -> width || z >= hdr -> height ) { return - 1 ; }
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> image ) ), 2 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> ) | c ) ; if ( z >= hdr -> width || z >= hdr -> height ) { return - 1 ; } <S2SV_ModEnd> nz += 8
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> i ) { <S2SV_ModEnd> } pad = <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> ) | c ) ; if ( z >= hdr -> depth ) { return - 1 ; } <S2SV_ModEnd> nz += 8
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> image ) ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> ) | c ) ; if ( z >= hdr -> width || z >= hdr -> height ) { return - 1 ; } nz += 8 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { data [ i ] = jas_matrix_create ( 1, jas_image_width ( image ) )
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> jas_image_width ( image ), 1 <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> ) | c )
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> image ) ), 0 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> ) | c ) ; if ( z >= hdr -> width || z >= hdr -> height ) { return - 1 ; } <S2SV_ModEnd> nz += 8
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> i ) { <S2SV_ModEnd> } pad = <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> 8 ) | ( c & 0x7F ) <S2SV_ModEnd> ) ; nz
<S2SV_ModStart> = 0 ; jas_matrix_create ( 1, jas_image_width ( image ) ) ; assert ( data [ 0 ] ) ; <S2SV_ModStart> = jas_matrix_create ( <S2SV_ModEnd> jas_image_width ( image <S2SV_ModStart> image ) ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) { return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> z = ( ( <S2SV_ModStart> ) | c ) ; if ( z > hdr -> depth ) { return - 1 ; } <S2SV_ModEnd> nz += 8
