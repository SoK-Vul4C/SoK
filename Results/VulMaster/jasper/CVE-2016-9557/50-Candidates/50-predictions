<S2SV_ModStart> bool s ; <S2SV_ModEnd> assert ( (
<S2SV_ModStart> ; ulong tmp ; if ( val < 0 ) return - 1
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 || prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else { val = 0 ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 || prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 7 ) { val = encode_twos_comp ( val, prec ) ; } else { val = 0
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 || prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 7 ) { val = encode_twos_comp ( val, prec ) ; } else { val = 0 ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else { val = 0 ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 || prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 3 ) { val = encode_twos_comp ( val, prec ) ; } else { val = 0
<S2SV_ModStart> ; ulong tmp ; if ( prec < 1 || prec > JAS_DB_MAX_PREC ) return - 1
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 || prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 1 || prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else { val = 0
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 || prec > 2 ) { val = 0 ; } else if ( prec > 7 ) { val = encode_twos_comp ( val, prec ) ; } else { val = 0 ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 || prec > 2 ) { return - 1 ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 || prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else { val = 0
<S2SV_ModStart> bool s ; JAS_DBGLOG ( 1, ( "putint(%d, %d)\\n", sgnd, prec, val ) ) <S2SV_ModEnd> ; assert (
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 1 ) { val = encode_twos_comp ( val, prec ) ; } else { val = 0
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 1 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else { val = 0
<S2SV_ModStart> ; ulong tmp ; if ( prec < 1 || prec > JAS_DB_MAX_COMBINATION ) { return - 1 ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 || prec > 2 ) { JAS_ERROR ( "invalid prec value (%d) for putint", val ) ; return - 1 ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 || prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 0 ) { val = encode_twos_comp ( val, prec ) ; } else { val = 0 ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 1 ) { val = encode_twos_comp ( val, prec )
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 || prec > JAS_UINTFAST_NUM ) { return - 1 ; } else if ( prec > JAS_UINTFAST_NUM ) { return - 1 ; } else { return 0 ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 || prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 3 ) { val = encode_twos_comp ( val, prec ) ; } else { val = 0 ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> bool s ; JAS_DBGLOG ( 1, ( "putint(%d, %d)", sgnd, prec, val ) ) <S2SV_ModEnd> ; assert (
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 1 ) { val = 0 ; } else { val = 0 ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else { val = 0
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 1 ) { val = encode_twos_comp ( val, prec ) ; } else { val = 0 ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 || prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 1 || prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else { val = 0 ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 || prec > JAS_UINTFAST_BITS ) { return - 1 ; } else if ( prec > JAS_UINTFAST_BITS ) { return - 1 ; } else { return 0 ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 || prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 0 ) { val = encode_twos_comp ( val, prec ) ; } else { val = 0
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 1 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 2 ) { val = encode_twos_comp ( val, prec )
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 1 ) { JAS_ERROR ( "invalid prec value (%d) for putint", val ) ; return - 1 ; } else { JAS_ERROR ( "invalid prec value (%d) for putint", val ) ) ; return - 1 ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 || prec > 2 ) { val = 0 ; } else { val = encode_twos_comp ( val, prec ) ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 || prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 1 || prec > 2 ) { val = encode_twos_comp ( val, prec )
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 || prec > JAS_UINTFAST_BITS ) { return - 1 ; } else if ( prec > JAS_UINTFAST_BITS ) { return - 1 ; } else if ( prec > JAS_UINTFAST_BITS ) { return - 1 ; } else { return 0 ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 || prec > JAS_UINTFAST_NUM ) { return - 1 ; } else if ( prec > JAS_UINTFAST_NUM ) { return - 1 ; } else if ( prec > JAS_UINTFAST_NUM ) { return - 1 ; } else { return 0 ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 1 ) { JAS_ERROR ( "invalid prec value (%d) for putint", val ) ; return - 1 ; } else { JAS_ERROR ( "invalid prec value (%d) for putint", val ) ; return - 1 ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 1 ) { JAS_ERROR ( "invalid prec value (%d) for putint", val ) ; return - 1 ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 || prec > 2 ) { return - 1 ; } else if ( prec > 7 ) { return - 1 ; } else { return 0 ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> ; ulong tmp ; if (! jas_check_stack_depth ( out, prec ) ) return - 1
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 || prec > JAS_UINTFAST_BITS ) { return - 1 ; } else if ( prec > JAS_UINTFAST_BITS ) { return - 1 ; } else { return - 1 ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> bool s ; JAS_DBGLOG ( 1, ( "putint(%d, %d)", val, prec ) ) <S2SV_ModEnd> ; assert (
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 || prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 7 ) { JAS_ERROR ( "invalid prec value (%d) for putint\\n", val ) ; return - 1 ; } } else { JAS_ERROR ( "invalid prec value (%d) for putint\\n", val ) ; return - 1
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 || prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 7 ) { JAS_ERROR ( "invalid prec value (%d) for putint", ( int ) val ) ; return - 1 ; } } else { JAS_ERROR ( "invalid prec value (%d) for putint", ( int ) val ) ; return - 1
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 || prec > JAS_UINTFAST_NUM ) { return - 1 ; } else if ( prec > JAS_UINTFAST_NUM ) { return - 1 ; } else { return - 1 ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 ) { return - 1 ; } else { return - 1 ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 1 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else { val = 0 ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 || prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 7 ) { val = 0 ; } else { val = - 1
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 1 ) { JAS_ERROR ( "invalid prec value (%d) for putint", ( int ) val ) ; return - 1 ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 ) { return - 1 ; } ) { return 0
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 || prec > 2 ) { JAS_ERROR ( "invalid prec value (%d) for putint", ( int ) val ) ; return - 1 ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> ; ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec < 1 || prec > 2 ) { val = encode_twos_comp ( val, prec ) ; } else if ( prec > 7 ) { val = 0 ; } else { val = 0 ; } <S2SV_ModEnd> assert ( (
