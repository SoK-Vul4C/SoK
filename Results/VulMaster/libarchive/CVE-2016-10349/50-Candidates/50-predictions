<S2SV_ModStart> ( a, sizeof ( * p ), NULL ) ) == NULL ) return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> cab_offset, 255 ) ) ; return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> cab_offset, 255 ) ) ; return ( truncated_error ( a ) ) ; } return (
<S2SV_ModStart> ( a, ARCHIVE_MAX_HEADER_SIZE, <S2SV_ModStart> == NULL ) { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ; } } else { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ) ; } } return ( 0 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ( p = archive_read_ahead <S2SV_ModEnd> ( a,
<S2SV_ModStart> ( a, sizeof ( * p ), NULL ) ) == NULL ) return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> files_offset, ( intmax_t ) cab -> cab_count ) ) ; return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) cab -> cab_count ) ) ; return (
<S2SV_ModStart> ( a, ARCHIVE_MAX_HEADER_SIZE, <S2SV_ModStart> == NULL ) { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ; } } else { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ) ; } return ( 0 ) ) ; }
<S2SV_ModStart> ( a, ARCHIVE_MAX_HEADER_SIZE, <S2SV_ModStart> == NULL ) { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ; } } else { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ) ; } } return ( 0 ) <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ( a, ARCHIVE_MAX_HEADER_SIZE, <S2SV_ModStart> == NULL ) { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ; } } else { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ) ; } }
<S2SV_ModStart> ( a, ARCHIVE_MAX_HEADER_SIZE, <S2SV_ModStart> == NULL ) { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ; } } else { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ; } } return ( 0 ) ) ; <S2SV_ModEnd> } cab ->
<S2SV_ModStart> ( a, sizeof ( * p ), NULL ) ) == NULL ) return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> files_offset, ( intmax_t ) cab -> files_offset ) ) ; return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) cab -> cab_offset ) ) ; return (
<S2SV_ModStart> ( a, sizeof ( * p ), NULL ) ) == NULL ) return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> file_count ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> cab_offset, ( intmax_t ) cab -> file_count ) ) ; return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> file_count ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) cab -> cab_offset ) ) ; return (
<S2SV_ModStart> ( a, sizeof ( * p ), NULL ) ) == NULL ) return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> files_offset, ( intmax_t ) cab -> files_offset + 8 ) ) ; return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) cab -> cab_offset + 8 ) ) ; return (
<S2SV_ModStart> ( a, sizeof ( * p ), NULL ) ) == NULL ) return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> files_offset, ( intmax_t ) cab -> cab_count ) ) ; return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) cab -> cab_count ) ) ; return ( truncated_error ( a ) ) ; } return (
<S2SV_ModStart> ( a, ARCHIVE_MAX_HEADER_SIZE, <S2SV_ModStart> == NULL ) { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ; } } else { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ) ; } return ( 0 ) ) ; } <S2SV_ModEnd> } cab ->
<S2SV_ModStart> ( a, ARCHIVE_MAX_HEADER_SIZE, <S2SV_ModStart> == NULL ) { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ; } } else { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ) ; } } return ( 0 ) ) ; <S2SV_ModEnd> } cab ->
<S2SV_ModStart> ( a, sizeof ( * p ), NULL ) ) == NULL ) return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> files_offset, ( intmax_t ) cab -> files_offset + 8 ) ) ; return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) cab -> cab_offset + 8 ) ) ; return ( truncated_error ( a ) ) ; } return (
<S2SV_ModStart> ( a, ARCHIVE_MAX_HEADER_SIZE, <S2SV_ModStart> == NULL ) { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ; } } else { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ; } }
<S2SV_ModStart> ( a, 4, <S2SV_ModEnd> NULL ) )
<S2SV_ModStart> ( a, ARCHIVE_MAX_HEADER_SIZE, <S2SV_ModStart> == NULL ) { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ; } } else { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ) ; } } return ( 0
<S2SV_ModStart> ( a, ARCHIVE_MAX_HEADER_SIZE, <S2SV_ModStart> == NULL ) { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ; } } else { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ; } } return ( 0 ) <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ( a, ARCHIVE_MAX_HEADER_SIZE, <S2SV_ModStart> == NULL ) { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ; } } else { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ) ; }
<S2SV_ModStart> ( a, ARCHIVE_MAX_HEADER_SIZE, <S2SV_ModStart> == NULL ) { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ; } } else { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ; } } return ( 0 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ( a, ARCHIVE_MAX_HEADER_SIZE, <S2SV_ModStart> == NULL ) { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ; } } else { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ) ; return ( truncated_error ( a ) ) ; } } return ( 0 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ( a, sizeof ( * p ), NULL ) ) == NULL ) return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> file_count ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> cab_offset, ( intmax_t ) file_count ) ) ; return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> file_count ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) cab -> cab_offset, ( intmax_t ) file_count ) ) ; return (
<S2SV_ModStart> ( a, sizeof ( * p ), NULL ) ) == NULL ) return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 4 > hd -> file_count ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> cab_offset, ( intmax_t ) cab -> file_count ) ) ; return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> file_count ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) cab -> cab_offset ) ) ; return (
<S2SV_ModStart> ( a, sizeof ( * p ), NULL ) ) == NULL ) return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> cab_offset, 255 ) ) ; return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> cab_offset, 255 ) ) ; return ( truncated_error ( a ) ) ; }
<S2SV_ModStart> ( a, sizeof ( * p ), NULL ) ) == NULL ) return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> file_count ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> cab_offset, ( intmax_t ) file_count ) ) ; return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> file_count ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) file_count ) ) ; return (
<S2SV_ModStart> ( a, sizeof ( * p ), NULL ) ) == NULL ) return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> files_offset, ( intmax_t ) cab -> files_offset ) ) ; return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) cab -> cab_offset ) ) ; return ( truncated_error ( a ) ) ; } return (
<S2SV_ModStart> ( a, ARCHIVE_MAX_HEADER_SIZE, <S2SV_ModStart> == NULL ) { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ; } } else { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ; } return ( 0 ) ) ; }
<S2SV_ModStart> ( a, ARCHIVE_MAX_HEADER_SIZE, <S2SV_ModStart> == NULL ) { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ; } } else { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ) ; } } return ( ARCHIVE_OK <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ( a, ARCHIVE_MAX_HEADER_SIZE, <S2SV_ModStart> == NULL ) { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ; } } else { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ) ; } } return ( ARCHIVE_FATAL <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ( a, ARCHIVE_MAX_HEADER_SIZE, <S2SV_ModStart> == NULL ) { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ; } } else { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ) ; } } return ( ARCHIVE_FATAL
<S2SV_ModStart> ( a, sizeof ( * p ), NULL ) ) == NULL ) return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> files_offset, ( intmax_t ) cab -> cab_count ) ) ; return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) cab -> cab_count ) ) ; return ( truncated_error ( a ) ) <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ( a, sizeof ( * p ), NULL ) ) == NULL ) return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> files_offset, ( intmax_t ) cab -> files_offset ) ) ; return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) cab -> cab_offset ) ) ; return ( truncated_error ( a ) ) <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ( a, sizeof ( * p ), NULL ) ) == NULL ) return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> file_count ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> cab_offset, ( intmax_t ) file_count ) ) ; return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> file_count ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) cab -> cab_offset, ( intmax_t ) file_count ) ) ; return ( truncated_error ( a ) ) ; } return (
<S2SV_ModStart> ( a, sizeof ( * p ), NULL ) ) == NULL ) return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> file_count ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Too many CFFILE headers" ) ; return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> file_count ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Too many CFFILE headers" ) ; return ( truncated_error ( a ) ) ; } if (
<S2SV_ModStart> ( a, sizeof ( * p ), NULL ) ) == NULL ) return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> file_count ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> cab_offset, ( intmax_t ) file_count ) ) ; return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> file_count ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) file_count ) ) ; return ( truncated_error ( a ) ) ; } return (
<S2SV_ModStart> ( a, sizeof ( * p ), NULL ) ) == NULL ) return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> files_offset, ( intmax_t ) cab -> files_offset ) ) ; return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) cab -> cab_offset ) ) ; return ( truncated_error ( a ) ) ) ; } return (
<S2SV_ModStart> ( a, sizeof ( * p ), NULL ) ) == NULL ) return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> file_count ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> cab_offset, ( intmax_t ) cab -> file_count ) ) ; return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> file_count ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) cab -> file_count ) ) ; return (
<S2SV_ModStart> ( a, sizeof ( * p ), NULL ) ) == NULL ) return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> cab_offset, 255 ) ) ; return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> cab_offset, 255 ) ) ; return ( truncated_error ( a ) ) ; } if (
<S2SV_ModStart> ( a, ARCHIVE_MAX_HEADER_SIZE, <S2SV_ModStart> == NULL ) { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ; } } else { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ) ; } return ( ARCHIVE_FATAL ) ) ; }
<S2SV_ModStart> ( a, sizeof ( * p ), NULL ) ) == NULL ) return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> file_count ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> cab_offset, ( intmax_t ) cab -> file_count ) ) ; return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> file_count ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) cab -> cab_offset, ( intmax_t ) cab -> file_count ) ) ; return (
<S2SV_ModStart> ( a, sizeof ( * p ), NULL ) ) == NULL ) return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> files_offset, ( intmax_t ) cab -> cab_count ) ) ; return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) cab -> cab_count ) ) ; return ( truncated_error ( a ) ) ; }
<S2SV_ModStart> ( a, ARCHIVE_MAX_HEADER_SIZE, <S2SV_ModStart> == NULL ) { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ; } } else { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ) ; return ( truncated_error ( a ) ) ; } }
<S2SV_ModStart> ( a, sizeof ( * p ), NULL ) ) == NULL ) return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> file_count ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Too many CFFILE headers" ) ; return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> file_count ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Too many CFFILE headers" ) ; return ( truncated_error ( a ) ) ) ; } if ( hd -> cab_offset + 8 > hd -> file_count ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Too many CFFILE headers" ) ; return (
<S2SV_ModStart> ( a, sizeof ( * p ), NULL ) ) == NULL ) return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> cab_offset, 255 ) ) ; return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> cab_offset, 255 ) ) ; return ( truncated_error ( a ) ) ; <S2SV_ModEnd> } cab ->
<S2SV_ModStart> ( a, sizeof ( * p ), NULL ) ) == NULL ) return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> file_count ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Too many CFFILE headers" ) ; return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> file_count ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Too many CFFILE headers" ) ; return ( truncated_error ( a ) ) ) ; } if (
<S2SV_ModStart> ( a, ARCHIVE_MAX_HEADER_SIZE, <S2SV_ModStart> == NULL ) { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ; } } else { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ) ; return ( truncated_error ( a ) ) ; } } return ( 0 ) <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ( a, sizeof ( * p ), NULL ) ) == NULL ) return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> file_count ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> cab_offset, ( intmax_t ) file_count ) ) ; return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> file_count ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) cab -> cab_offset, ( intmax_t ) file_count ) ) ; return ( truncated_error ( a ) ) <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ( a, sizeof ( * p ), NULL ) ) == NULL ) return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> files_offset, ( intmax_t ) cab -> cab_count ) ) ; return ( truncated_error ( a ) ) ; } if ( hd -> cab_offset + 8 > hd -> files_offset ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid offset of CFFILE %jd < %jd", ( intmax_t ) hd -> cab_count ) ) ; return (
<S2SV_ModStart> ( a, ARCHIVE_MAX_HEADER_SIZE, <S2SV_ModStart> == NULL ) { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ; } } else { if ( a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'M' && a -> format -> data [ ARCHIVE_FILE_FORMAT_SIZE - 1 ]!= 'Z' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Invalid header size" ) ; return ( truncated_error ( a ) ) ) ; } return ( 1 ) ; }
