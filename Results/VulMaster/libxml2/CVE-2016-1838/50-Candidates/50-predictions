<S2SV_ModStart> * name ; const xmlChar * start ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { start = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ctxt <S2SV_ModStart> -> cur [ tlen <S2SV_ModEnd> ] == '>'
<S2SV_ModStart> * name ; char * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> -> cur, ptr <S2SV_ModEnd>, tlen )
<S2SV_ModStart> * name ; const xmlChar * start ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { start = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> -> cur, start <S2SV_ModEnd>, tlen )
<S2SV_ModStart> * name ; char * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ctxt <S2SV_ModStart> -> cur [ tlen <S2SV_ModEnd> ] == '>'
<S2SV_ModStart> * name ; const xmlChar * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> -> cur, ptr <S2SV_ModEnd>, tlen )
<S2SV_ModStart> * name ; const xmlChar * start ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { start = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> -> cur [ tlen <S2SV_ModEnd> ] == '>'
<S2SV_ModStart> * name ; char * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ctxt <S2SV_ModStart> -> cur [ <S2SV_ModEnd> tlen ] ==
<S2SV_ModStart> * name ; const xmlChar * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ctxt <S2SV_ModStart> -> cur [ tlen <S2SV_ModEnd> ] == '>'
<S2SV_ModStart> * name ; const xmlChar * start ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { start = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> ctxt -> input
<S2SV_ModStart> * name ; const xmlChar * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ctxt <S2SV_ModStart> -> cur [ <S2SV_ModEnd> tlen ] ==
<S2SV_ModStart> * name ; const xmlChar * cur = ctxt -> input -> cur ; <S2SV_ModStart> } SKIP ( 1 <S2SV_ModEnd> ) ; if <S2SV_ModStart> if ( ( <S2SV_ModEnd> ctxt -> input <S2SV_ModStart> -> name, <S2SV_ModEnd> tlen ) == <S2SV_ModStart> ) ) { <S2SV_ModEnd> ctxt -> input <S2SV_ModStart> -> cur [ tlen ] == '>' ) { if ( ctxt -> input -> cur += tlen + 1 ; goto done ; } if ( ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } else { if ( prefix == NULL ) name = xmlParseNameAndCompare ( ctxt, ctxt -> name, prefix ) ; } GROW ; if ( ctxt -> instate == XML_PARSER_EOF ) return ;
<S2SV_ModStart> * name ; const xmlChar * start ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { start = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '<' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ctxt <S2SV_ModStart> -> cur [ tlen <S2SV_ModEnd> ] == '>'
<S2SV_ModStart> * name ; char * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> ; if ( ( <S2SV_ModStart> > 0 ) && ( ptr [ tlen ] == '>' ) ) { if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } if (
<S2SV_ModStart> * name ; char * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> -> cur, ptr <S2SV_ModEnd>, tlen ) <S2SV_ModStart> 0 ) ) <S2SV_ModEnd> { if ( <S2SV_ModStart> { if ( ptr <S2SV_ModEnd> == '>' )
<S2SV_ModStart> * name ; const xmlChar * p ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { p = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ctxt <S2SV_ModStart> -> cur [ tlen <S2SV_ModEnd> ] == '>'
<S2SV_ModStart> * name ; char * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> ctxt -> input
<S2SV_ModStart> * name ; const xmlChar * p ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { p = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> -> cur, p <S2SV_ModEnd>, tlen )
<S2SV_ModStart> * name ; char * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ctxt <S2SV_ModStart> { if ( ptr <S2SV_ModEnd> == '>' )
<S2SV_ModStart> * name ; const xmlChar * start ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { start = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> ; if ( <S2SV_ModEnd> ctxt -> instate <S2SV_ModStart> ctxt -> instate!= XML_PARSER_EOF ) return ; if ( ctxt -> instate
<S2SV_ModStart> * name ; const xmlChar * start ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { start = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ]!= '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ctxt <S2SV_ModStart> -> cur [ tlen <S2SV_ModEnd> ] == '>'
<S2SV_ModStart> * name ; const xmlChar * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> ctxt -> input
<S2SV_ModStart> * name ; const xmlChar * start ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { start = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> if ( ( start!= NULL ) && (
<S2SV_ModStart> * name ; const xmlChar * start ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { start = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ctxt <S2SV_ModStart> ) ) { <S2SV_ModEnd> ctxt -> input
<S2SV_ModStart> * name ; char * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> { if ( ptr <S2SV_ModEnd> == '>' )
<S2SV_ModStart> * name ; const xmlChar * cur = ctxt -> input -> cur ; <S2SV_ModStart> } SKIP ( 1 <S2SV_ModEnd> ) ; if <S2SV_ModStart> if ( ( <S2SV_ModEnd> ctxt -> input <S2SV_ModStart> -> name, <S2SV_ModEnd> tlen ) == <S2SV_ModStart> ) ) { <S2SV_ModEnd> ctxt -> input <S2SV_ModStart> -> cur [ tlen ] == '>' ) { if ( ctxt -> input -> cur += tlen + 1 ; goto done ; } if ( ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } else { if ( prefix == NULL ) name = xmlParseNameAndCompare ( ctxt, ctxt -> name, prefix ) ; } GROW ; if ( ctxt -> instate == XML_PARSER_EOF ) return ; if (
<S2SV_ModStart> * name ; const xmlChar * start ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { start = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> { if ( start!= NULL ) if (
<S2SV_ModStart> * name ; char * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> -> cur, ptr <S2SV_ModEnd>, tlen ) <S2SV_ModStart> 0 ) ) <S2SV_ModEnd> { if ( <S2SV_ModStart> { if ( ptr <S2SV_ModEnd> == '>' )
<S2SV_ModStart> * name ; char * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '<' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> -> cur, ptr <S2SV_ModEnd>, tlen ) <S2SV_ModStart> 0 ) ) <S2SV_ModEnd> { if ( <S2SV_ModStart> { if ( ptr <S2SV_ModEnd> == '>' )
<S2SV_ModStart> * name ; char * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ]!= '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> -> cur, ptr <S2SV_ModEnd>, tlen )
<S2SV_ModStart> * name ; const xmlChar * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ( ctxt -> input -> cur [ tlen ] == '>' ) && ( ctxt -> input -> col > 0 ) ) ) { <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> ctxt -> input <S2SV_ModStart> ] == '>' && ( ctxt -> input -> cur + tlen + 1 > line ) ) { xmlFatalErr ( ctxt, XML_ERR_LTSLASH_REQUIRED, NULL ) ; return ; } if ( ctxt -> input -> cur [ tlen ] == '>'
<S2SV_ModStart> * name ; const xmlChar * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> -> cur [ <S2SV_ModEnd> tlen ] ==
<S2SV_ModStart> * name ; char * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> ; if ( <S2SV_ModEnd> ctxt -> instate <S2SV_ModStart> ctxt -> instate!= XML_PARSER_EOF ) return ; if ( ctxt -> instate
<S2SV_ModStart> * name ; char * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '<' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ctxt <S2SV_ModStart> -> cur [ tlen <S2SV_ModEnd> ] == '>'
<S2SV_ModStart> * name ; const xmlChar * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ctxt <S2SV_ModStart> { if ( ptr <S2SV_ModEnd> == '>' )
<S2SV_ModStart> * name ; const xmlChar * start ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { start = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> ; if ( ctxt -> instate == XML_PARSER_EOF ) return ; if (
<S2SV_ModStart> * name ; char * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '<' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> -> cur, ptr <S2SV_ModEnd>, tlen )
<S2SV_ModStart> * name ; const xmlChar * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> ; if ( <S2SV_ModEnd> ctxt -> instate <S2SV_ModStart> ctxt -> instate!= XML_PARSER_EOF ) return ; if ( ctxt -> instate
<S2SV_ModStart> * name ; const xmlChar * start ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { start = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( prefix
<S2SV_ModStart> * name ; char * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '<' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ctxt <S2SV_ModStart> -> cur [ <S2SV_ModEnd> tlen ] ==
<S2SV_ModStart> * name ; const xmlChar * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '<' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ctxt <S2SV_ModStart> -> cur [ tlen <S2SV_ModEnd> ] == '>'
<S2SV_ModStart> * name ; const xmlChar * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '<' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ctxt <S2SV_ModStart> -> cur [ <S2SV_ModEnd> tlen ] ==
<S2SV_ModStart> * name ; const xmlChar * start ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { start = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '<' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> -> cur, start <S2SV_ModEnd>, tlen )
<S2SV_ModStart> * name ; const xmlChar * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> -> cur, ptr <S2SV_ModEnd>, tlen ) <S2SV_ModStart> 0 ) ) <S2SV_ModEnd> { if ( <S2SV_ModStart> { if ( ptr <S2SV_ModEnd> == '>' )
<S2SV_ModStart> * name ; char * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> -> cur [ <S2SV_ModEnd> tlen ] ==
<S2SV_ModStart> * name ; const xmlChar * start ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { start = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> ; if ( <S2SV_ModEnd> ctxt -> instate <S2SV_ModStart> ctxt -> instate!= XML_PARSER_EOF ) xmlFreeInputStream ( input <S2SV_ModEnd> ) ; }
<S2SV_ModStart> * name ; const xmlChar * cur = ctxt -> input -> cur ; <S2SV_ModStart> } SKIP ( 1 <S2SV_ModEnd> ) ; if <S2SV_ModStart> if ( ( <S2SV_ModEnd> ctxt -> input <S2SV_ModStart> -> name, <S2SV_ModEnd> tlen ) == <S2SV_ModStart> ) ) { <S2SV_ModEnd> ctxt -> input <S2SV_ModStart> -> cur [ tlen ] == '>' ) { if ( ctxt -> input -> cur += tlen + 1 ; goto done ; } if ( ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } else { if ( prefix == NULL ) name = xmlParseNameAndCompare ( ctxt, ctxt -> name, prefix ) ; } SKIP ( <S2SV_ModEnd> 1 ) ;
<S2SV_ModStart> * name ; char * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> -> cur [ tlen <S2SV_ModEnd> ] == '>'
<S2SV_ModStart> * name ; const xmlChar * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> -> cur [ tlen <S2SV_ModEnd> ] == '>'
<S2SV_ModStart> * name ; const xmlChar * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '<' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> 2 ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> -> cur, ptr <S2SV_ModEnd>, tlen )
<S2SV_ModStart> * name ; char * ptr ; <S2SV_ModStart> return ; } if ( ( tlen > 0 ) && ( ctxt -> input -> cur [ tlen ] == '>' ) ) { ptr = ctxt -> input -> cur + tlen + 1 ; if ( ctxt -> input -> cur [ tlen ] == '>' ) { ctxt -> input -> cur += tlen + 1 ; goto done ; } ctxt -> input -> cur += tlen ; ctxt -> input -> col += tlen ; name = ( xmlChar * ) 1 ; } <S2SV_ModStart> if ( ( <S2SV_ModEnd> ctxt -> instate <S2SV_ModStart> ctxt -> instate!= XML_PARSER_EOF ) || ( ctxt -> instate
