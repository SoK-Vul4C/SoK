<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_top < 1 || rctx -> image_width > 4 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } rctx -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 6 ]
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_top < 1 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } rctx -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 6 ]
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_top < 1 || rctx -> image_width > 4 || rctx -> image_top > 5 ) { iw_set_error ( rctx -> ctx, "Invalid image size" ) ; goto done ; } rctx -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 6 ]
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } if ( rctx -> image_height > 7 ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; } rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) >> 1 ) ; if ( has_local_ct ) { has_local_ct = ( int ) ( rctx -> rbuf [ 8 ] & 0x07 ) ; if ( rctx -> colortable. num_entries < rctx -> total_npixels ) break ; } root_codesize = rctx -> image_width * rctx -> image_height
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_top < 1 || rctx -> image_width > rctx -> image_height ) { iw_set_error ( rctx -> ctx, "Invalid image size" ) ; goto done ; } rctx -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 6 ]
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } if ( rctx -> image_height > 15 ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; } rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) >> 1 ) ; if ( has_local_ct ) { has_local_ct = ( int ) ( rctx -> rbuf [ 8 ] & 0x07 ) ; if ( rctx -> colortable. num_entries < rctx -> total_npixels ) break ; } root_codesize = rctx -> image_width * rctx -> image_height
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 0 || rctx -> image_top < 0 || rctx -> image_width > 4 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } rctx -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 6 ]
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } rctx -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 6 ]
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } if ( rctx -> image_height > 15 ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; } rctx -> image_width *= 2 ; rctx -> image_height *= 2
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_top < 1 || rctx -> image_width > 4 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } rctx -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 6 ] ) ; if ( rctx -> image_height < 1 || rctx -> image_height > 4 ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; } rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 )
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 0 || rctx -> image_top < 0 || rctx -> image_width > 4 || rctx -> image_top > 5 ) { iw_set_error ( rctx -> ctx, "Invalid image size" ) ; goto done ; } rctx -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 6 ]
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } if ( rctx -> image_height > 15 ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; } rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) >> 1 ) ; if ( has_local_ct ) { has_local_ct = ( int ) ( rctx -> rbuf [ 8 ] & 0x07 ) ; if ( rctx -> colortable. num_entries < rctx -> total_npixels ) break ; }
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } if ( rctx -> image_height > 7 ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; } rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) >> 1 ) ; if ( has_local_ct ) { has_local_ct = ( int ) ( rctx -> rbuf [ 8 ] & 0x07 ) ; if ( rctx -> colortable. num_entries < rctx -> total_npixels ) break ; }
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width <= 0 || rctx -> image_top <= 0 ) { iw_set_error ( rctx -> ctx, "Invalid image width or top value" ) ; goto done ; } rctx -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 6 ]
<S2SV_ModStart> 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_top < 1 || rctx -> image_width > 4 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } if ( rctx -> image_height < 1 || rctx -> image_height > 6 ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; }
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_top < 1 || rctx -> image_width > 4 || rctx -> image_height > 5 ) { iw_set_error ( rctx -> ctx, "Invalid image size" ) ; goto done ; } rctx -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 6 ]
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 0 || rctx -> image_top < 0 || rctx -> image_width > 4 || rctx -> image_top > 4 ) { iw_set_error ( rctx -> ctx, "Invalid image size" ) ; goto done ; } rctx -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 6 ]
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width <= 0 || rctx -> image_top > rctx -> image_width ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } rctx -> image_height <= 0 || rctx -> image_height > rctx -> image_height ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; } rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 )
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_top < 1 || rctx -> image_width > 4 ) { iw_set_error ( rctx -> ctx, "Invalid image size" ) ; goto done ; } rctx -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 6 ]
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } if ( rctx -> image_height > 7 ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; } rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) >> 1 ) ; if ( has_local_ct ) { has_local_ct = ( int ) ( rctx -> rbuf [ 8 ] & 0x07 ) ; rctx -> colortable. num_entries = 1 << ( 1 + local_ct_size ) ) break ; } root_codesize = rctx -> image_width * rctx -> image_height
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } if ( rctx -> image_height > 15 ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; } rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) >> 1 ) ; if ( has_local_ct ) { local_ct_size = ( int ) ( rctx -> rbuf [ 8 ] & 0x07 ) ; rctx -> colortable. num_entries = 1 << ( 1 + local_ct_size ) ) ; } else { rctx -> colortable. num_entries = 0 ; }
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width <= 0 || rctx -> image_top > rctx -> image_width ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } rctx -> image_height <= 0 || rctx -> image_height > rctx -> image_height ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; } rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) ) ; if ( has_local_ct ) { has_local_ct = ( int ) ( rctx -> rbuf [ 8 ] & 0x07 ) ; if ( rctx -> colortable. num_entries < rctx -> total_npixels ) break ; } root_codesize = rctx -> image_width * rctx -> image_height
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } if ( rctx -> image_height > 15 ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; } rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) >> 1 ) ; if ( has_local_ct ) { has_local_ct = ( int ) ( rctx -> rbuf [ 8 ] & 0x07 ) ; rctx -> colortable. num_entries = 1 << ( 1 + local_ct_size ) ) break ; } root_codesize = rctx -> image_width * rctx -> image_height
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } if ( rctx -> image_height > 7 ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; } rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) >> 1 ) ; if ( has_local_ct ) { local_ct_size = ( int ) ( rctx -> rbuf [ 8 ] & 0x07 ) ; rctx -> colortable. num_entries = 1 << ( 1 + local_ct_size ) ) ; } else { rctx -> colortable. num_entries = 0 ; }
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width <= 0 || rctx -> image_top <= 0 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } rctx -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 6 ]
<S2SV_ModStart> 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_top < 1 || rctx -> image_width > 4 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } if ( rctx -> image_height < 1 || rctx -> image_height > 5 ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; }
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, "Invalid image width or height" ) ; goto done ; } if ( rctx -> image_height > 15 ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; } rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) >> 1 ) ; if ( has_local_ct ) { has_local_ct = ( int ) ( rctx -> rbuf [ 8 ] & 0x07 ) ; if ( rctx -> colortable. num_entries < rctx -> total_npixels ) break ; } root_codesize = rctx -> image_width * rctx -> image_height
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } if ( rctx -> image_height > 7 ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; } rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) >> 1 ) ; if ( has_local_ct ) { local_ct_size = ( int ) ( rctx -> rbuf [ 8 ] & 0x07 ) ; rctx -> colortable. num_entries = 1 << ( 1 + local_ct_size ) ) break ; } root_codesize = rctx -> image_width * rctx -> image_height
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, "Invalid image width or height" ) ; goto done ; } if ( rctx -> image_height > 15 ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; } rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) >> 1 ) ; if ( has_local_ct ) { has_local_ct = ( int ) ( rctx -> rbuf [ 8 ] & 0x07 ) ; if ( rctx -> colortable. num_entries < rctx -> total_npixels ) break ; }
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_top < 1 || rctx -> image_width > 4 || rctx -> image_top > 4 ) { iw_set_error ( rctx -> ctx, "Invalid image size" ) ; goto done ; } rctx -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 6 ]
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 2 || rctx -> image_top < 2 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } rctx -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 6 ]
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_top < 1 || rctx -> image_width > rctx -> image_height ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } rctx -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 6 ]
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } if ( rctx -> image_height > 7 ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; } rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) >> 2 ) ; if ( has_local_ct ) { has_local_ct = ( int ) ( rctx -> rbuf [ 8 ] & 0x07 ) ; if ( rctx -> colortable. num_entries < rctx -> total_npixels ) break ; } root_codesize = rctx -> image_width * rctx -> image_height
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width <= 0 || rctx -> image_top > rctx -> image_width ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } rctx -> image_height <= 0 || rctx -> image_height > rctx -> image_height ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; } rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) ) ; if ( has_local_ct ) { has_local_ct = ( int ) ( rctx -> rbuf [ 8 ] & 0x07 ) ; if ( rctx -> colortable. num_entries < rctx -> total_npixels ) break ; }
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } if ( rctx -> image_height > 15 ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; } rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) >> 1 ) ; if ( has_local_ct ) { local_ct_size = ( int ) ( rctx -> rbuf [ 8 ] & 0x07 ) ; rctx -> colortable. num_entries = 1 << ( 1 + local_ct_size ) ) break ; } root_codesize = rctx -> image_width * rctx -> image_height
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } if ( rctx -> image_height > 15 ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; } rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) >> 1 ) ; if ( has_local_ct ) { has_local_ct = ( int ) ( rctx -> rbuf [ 8 ] & 0x07 ) ; rctx -> colortable. num_entries = 1 << ( 1 + local_ct_size ) ) ; } else { rctx -> colortable. num_entries = 0 ; }
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width <= 0 || rctx -> image_top > rctx -> image_width ) { iw_set_error ( rctx -> ctx, "Invalid image size" ) ; goto done ; } rctx -> image_height <= 0 || rctx -> image_height > rctx -> image_height ) { iw_set_error ( rctx -> ctx, "Invalid image size" ) ; goto done ; } rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 )
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } if ( rctx -> image_height > 15 ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; } rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) >> 1 ) ; if ( has_local_ct ) { has_local_ct = ( int ) ( rctx -> rbuf [ 8 ] & 0x07 ) ; rctx -> colortable. num_entries = 1 << ( 1 + local_ct_size ) ) ; break ; } root_codesize = rctx -> image_width * rctx -> image_height
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } if ( rctx -> image_height > 7 ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; } rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) >> 1 ) ; if ( has_local_ct ) { has_local_ct = ( int ) ( rctx -> rbuf [ 8 ] & 0x07 ) ; } else { rctx -> colortable. num_entries = 0 ; }
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_top < 1 || rctx -> image_width > 4 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } rctx -> image_height
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } if ( rctx -> image_height > 7 ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; } rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) >> 1 ) ; if ( has_local_ct ) { has_local_ct = ( int ) ( rctx -> rbuf [ 8 ] & 0x07 ) ; rctx -> colortable. num_entries = 1 << ( 1 + local_ct_size ) ) ; } else { rctx -> colortable. num_entries = 0 ; }
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, "Invalid image width or height" ) ; goto done ; } if ( rctx -> image_height > 15 ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; } rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) >> 1 ) ; if ( has_local_ct ) { has_local_ct = ( int ) ( rctx -> rbuf [ 8 ] & 0x07 ) ; rctx -> colortable. num_entries = 1 << ( 1 + local_ct_size ) ) break ; } root_codesize = rctx -> image_width * rctx -> image_height
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_top < 1 || rctx -> image_width > rctx -> image_height ) { iw_set_error ( rctx -> ctx, "Invalid image width or top value" ) ; goto done ; } rctx -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 6 ]
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } if ( rctx -> image_height > 7 ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; } rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) >> 1 ) ; if ( has_local_ct ) { has_local_ct = ( int ) ( rctx -> rbuf [ 8 ] & 0x07 ) ; rctx -> colortable. num_entries = 1 << ( 1 + local_ct_size ) ) ; break ; } root_codesize = rctx -> image_width * rctx -> image_height
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } if ( rctx -> image_height > 7 ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; } rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) >> 2 ) ; if ( has_local_ct ) { local_ct_size = ( int ) ( rctx -> rbuf [ 8 ] & 0x07 ) ; rctx -> colortable. num_entries = 1 << ( 1 + local_ct_size ) ) ; } else { rctx -> colortable. num_entries = 0 ; }
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_top < 1 || rctx -> image_width > 4 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } rctx -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 6 ] ) ; if ( rctx -> image_height < 1 || rctx -> image_height > 5 ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; } rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 )
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 0 || rctx -> image_top < 0 || rctx -> image_width > rctx -> image_height ) { iw_set_error ( rctx -> ctx, "Invalid image size" ) ; goto done ; } rctx -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 6 ]
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } if ( rctx -> image_height > 7 ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; } rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) >> 1 ) ; if ( has_local_ct ) { local_ct_size = ( int ) ( rctx -> rbuf [ 8 ] & 0x07 ) ; if ( rctx -> colortable. num_entries < rctx -> total_npixels ) break ; } root_codesize = rctx -> image_width * rctx -> image_height
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, "Invalid image size" ) ; goto done ; } if ( rctx -> image_height > 15 ) { iw_set_error ( rctx -> ctx, "Invalid image size" ) ; goto done ; } rctx -> image_width *= 2 ; rctx -> image_height *= 2
<S2SV_ModStart> [ 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, "Invalid image width" ) ; goto done ; } if ( rctx -> image_height > 15 ) { iw_set_error ( rctx -> ctx, "Invalid image height" ) ; goto done ; } rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) >> 1 ) ; if ( has_local_ct ) { has_local_ct = ( int ) ( rctx -> rbuf [ 8 ] & 0x07 ) ; } else { rctx -> colortable. num_entries = 0 ; }
