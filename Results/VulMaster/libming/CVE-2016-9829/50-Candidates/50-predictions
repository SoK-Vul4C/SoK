<S2SV_ModStart> table ) { unsigned <S2SV_ModStart> -> NumZoneData = readUInt16 <S2SV_ModEnd> ( f )
<S2SV_ModStart> table ) { SWF_UINT16 <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> -> NumZoneData = readUInt16 <S2SV_ModEnd> ( f )
<S2SV_ModStart> table ) { uint32_t <S2SV_ModEnd> i ; table <S2SV_ModStart> -> NumZoneData = readUInt32 <S2SV_ModEnd> ( f )
<S2SV_ModStart> table ) { uint32_t <S2SV_ModEnd> i ; table <S2SV_ModStart> -> NumZoneData = readUInt16 <S2SV_ModEnd> ( f )
<S2SV_ModStart> table ) { size_t <S2SV_ModEnd> i ; table <S2SV_ModStart> -> NumZoneData = readUInt16 <S2SV_ModEnd> ( f )
<S2SV_ModStart> table ) { SWF_CREATE_ZONERECORD ( f ) <S2SV_ModEnd> ; table -> <S2SV_ModStart> -> NumZoneData = readUInt16 <S2SV_ModEnd> ( f )
<S2SV_ModStart> table ) { SWF_UINT <S2SV_ModEnd> i ; table <S2SV_ModStart> -> NumZoneData = readUInt16 <S2SV_ModEnd> ( f )
<S2SV_ModStart> table ) { SWF_CREATE_ZONERECORD_TABLE ( f ) <S2SV_ModEnd> ; table -> <S2SV_ModStart> -> NumZoneData = readUInt16 <S2SV_ModEnd> ( f )
<S2SV_ModStart> table ) { unsigned <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 0 ) return ; if ( table -> ZoneData [ 0 ] == 0xFF ) return ; if ( table -> ZoneData [ 1 ] == 0xFF ) return ; if ( table -> ZoneData [ 2 ] == 0xFF ) return ; if ( table -> ZoneData [ 3 ] == 0xFF ) return ; readUInt8 ( f
<S2SV_ModStart> table ) { SWF_UINT <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 0 ) return ; if ( table -> ZoneData [ 0 ] == 0 ) return ; if ( table -> ZoneData [ 1 ] == 0 ) return ; if ( table -> ZoneData [ 2 ] == 0 ) return ; if ( table -> ZoneData [ 3 ] == 0 ) return ; readSWF_ZONEDATA ( f, table -> ZoneData + 1
<S2SV_ModStart> table ) { SWF_UINT <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 0 ) return ; if ( table -> ZoneData [ 0 ] == 0 ) return ; if ( table -> ZoneData [ 1 ] == 0 ) return ; if ( table -> ZoneData [ 2 ] == 0 ) return ; if ( table -> ZoneData [ 3 ] == 0
<S2SV_ModStart> table ) { SWF_UNUSED <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 0 ) return ; if ( table -> ZoneData [ 0 ] == 0xFF ) return ; if ( table -> ZoneData [ 1 ] == 0xFF ) return ; if ( table -> NumZoneData > SWF_ZONERECORD_MAX_SIZE ) return ; readUInt8 ( f
<S2SV_ModStart> table ) { unsigned <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 1 ) return ; if (! table -> NumZoneData ) return ; if (! table -> ZoneData
<S2SV_ModStart> table ) { uint16_t <S2SV_ModEnd> i ; table <S2SV_ModStart> -> NumZoneData = readUInt16 <S2SV_ModEnd> ( f )
<S2SV_ModStart> table ) { SWF_UNUSED <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 0 ) return ; if ( table -> ZoneData [ 0 ] == 0 ) return ; if ( table -> ZoneData [ 1 ] == 0 ) return ; if ( table -> ZoneData [ 2 ] == 0
<S2SV_ModStart> table ) { SWF_UNUSED <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 0 ) return ; if ( table -> ZoneData [ 0 ] == 0xFF ) return ; if ( table -> ZoneData [ 1 ] == 0xFF ) return ; if ( table -> ZoneData [ 2 ] == 0xFF ) return ; if ( table -> ZoneData [ 3 ] == 0xFF ) return ; readUInt8 ( f
<S2SV_ModStart> table ) { SWF_UINT <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 0 ) return ; if ( table -> ZoneData [ 0 ] == 0 ) return ; readSWF_ZONEDATA ( f, table -> ZoneData + 1
<S2SV_ModStart> table ) { unsigned <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 0 ) return ; if ( table -> ZoneData [ 0 ] == 0xFF ) return ; if ( table -> ZoneData [ 1 ] == 0xFF ) return ; if ( table -> ZoneData [ 2 ] == 0xFF ) return ; if ( table -> ZoneData [ 3 ] == 0xFF ) return ; readSWF_ZONEDATA ( f
<S2SV_ModStart> table ) { SWF_DBG ( "parseSWF_ZONERECORD\\n" ) ; <S2SV_ModStart> readUInt8 ( f ) ; SWF_DBG ( "NumZoneData: %d\\n", table -> NumZoneData
<S2SV_ModStart> table ) { SWF_UNUSED <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 0 ) return ; if ( table -> ZoneData [ 0 ] == 0xFF ) return ; if ( table -> ZoneData [ 1 ] == 0xFF ) return ; if ( table -> ZoneData [ 2 ] == 0xFF ) return ; readUInt8 ( f
<S2SV_ModStart> table ) { SWF_UNUSED <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 0 ) return ; if ( table -> ZoneData [ 0 ] == 0xFF ) return ; if ( table -> ZoneData [ 1 ] == 0xFF ) return ; if ( table -> ZoneData [ 2 ] == 0xFF ) return ; if ( table -> ZoneData [ 3 ] == 0xFF ) return ; readSWF_ZONEDATA ( f
<S2SV_ModStart> table ) { unsigned <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 0 ) return ; if ( table -> ZoneData [ 0 ] == 0xFF ) return ; if ( table -> ZoneData [ 1 ] == 0xFF ) return ; if ( table -> NumZoneData > SWF_ZONERECORD_MAX_SIZE ) return ; readUInt8 ( f
<S2SV_ModStart> table ) { SWF_CREATE_ZONERECORD_TABLE ( f, 0, 0 ) ; <S2SV_ModStart> readUInt8 ( f ) ; SWF_CREATE_ZONERECORD_TABLE ( f, 0, 0
<S2SV_ModStart> table ) { SWF_UINT <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 0 ) return ; if ( table -> ZoneData [ 0 ] == 0 ) return ; if ( table -> ZoneData [ 1 ] == 0 ) return ; if ( table -> ZoneData [ 2 ] == 0
<S2SV_ModStart> table ) { unsigned <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 0 ) return ; if (! table -> NumZoneData * sizeof ( struct SWF_ZONEDATA ) ) return ; if (! table -> ZoneData ) return ; i = 0 ; i < table -> NumZoneData ; i ++ ) if (! table -> ZoneData [ i ] ) return ; i ++ ) parseSWF_ZONEDATA ( f, table -> ZoneData + i
<S2SV_ModStart> table ) { SWF_UNUSED <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 1 ) error ( "Invalid SWF_ZONERECORD table size"
<S2SV_ModStart> table ) { unsigned <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 0 ) return ; if ( table -> ZoneData [ 0 ] == 0xFF ) return ; if ( table -> ZoneData [ 1 ] == 0xFF ) return ; if ( table -> ZoneData [ 2 ] == 0xFF ) return ; if ( table -> ZoneData [ 3 ] == 0xFF ) return ; if ( table -> ZoneData [ 4 ] == 0xFF ) return ; table -> ZoneData [ 5 ] = 0xFF <S2SV_ModEnd> ; for (
<S2SV_ModStart> table ) { unsigned <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 0 ) return ; if (! table -> NumZoneData * sizeof ( struct SWF_ZONEDATA ) ) return ; if (! table -> ZoneData ) return ; i = 0 ; i < table -> NumZoneData ; i ++ ) if (! table -> ZoneData [ i ] ) return ; free ( table -> ZoneData
<S2SV_ModStart> table ) { SWF_UNUSED <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 0 ) return ; if (! table -> ZoneData ) return ; if (! table -> NumZoneData * sizeof ( struct SWF_ZONEDATA
<S2SV_ModStart> table ) { unsigned <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 0 ) return ; if ( table -> ZoneData [ 0 ] == 0 ) return ; if ( table -> ZoneData [ 1 ] == 0 ) return ; if ( table -> ZoneData [ 2 ] == 0 ) return ; if ( table -> ZoneData [ 3 ] == 0
<S2SV_ModStart> table ) { SWF_UNUSED <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 0 ) return ; if ( table -> ZoneData [ 0 ] == 0xFF ) return ; if ( table -> ZoneData [ 1 ] == 0xFF ) return ; if ( table -> ZoneData [ 2 ] == 0xFF ) return ; if ( table -> ZoneData [ 3 ] == 0xFF ) return ; } <S2SV_ModEnd> table -> ZoneData
<S2SV_ModStart> table ) { unsigned <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 1 ) return ; if (! table -> NumZoneData * sizeof ( struct SWF_ZONEDATA ) ) return ; if (! table -> ZoneData ) return ; i = 0 ; i < table -> NumZoneData ; i ++ ) if (! table -> ZoneData [ i ] ) return ; i ++ ) parseSWF_ZONEDATA ( f, table -> ZoneData + i
<S2SV_ModStart> table ) { unsigned <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 0 ) return ; if ( table -> ZoneData [ 0 ] == 0 ) return ; if ( table -> ZoneData [ 1 ] == 0 ) return ; if ( table -> ZoneData [ 2 ] == 0
<S2SV_ModStart> table ) { SWF_UNUSED <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 1 ) error ( "Invalid SWF_ZONERECORD table value"
<S2SV_ModStart> table ) { unsigned <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 0 ) return ; if (! table -> ZoneData ) return ; if (! table -> NumZoneData * sizeof ( struct SWF_ZONEDATA
<S2SV_ModStart> table ) { SWF_UNUSED <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 1 ) return ; if (! table -> NumZoneData ) return ; SWF_ASSERT ( 0!= table -> NumZoneData
<S2SV_ModStart> table ) { unsigned <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 0 ) return ; if ( table -> ZoneData [ 0 ] == 0xFF ) return ; if ( table -> ZoneData [ 1 ] == 0xFF ) return ; if ( table -> NumZoneData > SWF_MAX_ZONEDATA
<S2SV_ModStart> table ) { unsigned <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 1 ) error ( "Invalid SWF_ZONERECORD table size"
<S2SV_ModStart> table ) { SWF_UINT <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 0 ) return ; if ( table -> ZoneData [ 0 ] == 0 ) return ; if ( table -> ZoneData [ 1 ] == 0 ) return ; if ( table -> ZoneData [ 2 ] == 0 ) return ; if ( table -> ZoneData [ 3 ] == 0 ) return ; readSWF_UINT ( f
<S2SV_ModStart> table ) { SWF_UNUSED <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 0 ) return ; if ( table -> ZoneData [ 0 ] == 0xFF ) return ; if ( table -> ZoneData [ 1 ] == 0xFF ) return ; if ( table -> ZoneData [ 2 ] == 0xFF ) return ; if ( table -> ZoneData [ 3 ] == 0xFF ) return ; memset ( table -> ZoneData, 0, sizeof ( struct SWF_ZONEDATA )
<S2SV_ModStart> table ) { unsigned <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 1 ) error ( "Invalid SWF_ZONERECORD table value"
<S2SV_ModStart> table ) { SWF_CREATE_ZONERECORD_TABLE ( f, 0, 0 ) ; <S2SV_ModStart> readUInt8 ( f ) ; SWF_CREATE_ZONERECORD_TABLE ( f, 1, 0
<S2SV_ModStart> table ) { SWF_DBG ( "parseSWF_ZONERECORD\\n" ) ; <S2SV_ModStart> readUInt8 ( f ) ; SWF_DBG ( "NumZoneData = %d\\n", table -> NumZoneData
<S2SV_ModStart> table ) { unsigned <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 0 ) return ; if (! table -> NumZoneData * sizeof ( struct SWF_ZONEDATA ) ) return ; if (! table -> ZoneData ) return ; i = 0 ; i < table -> NumZoneData ; i ++ ) parseSWF_ZONEDATA ( f, table -> ZoneData + i
<S2SV_ModStart> table ) { SWF_UNUSED <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 1 ) return ; if (! table -> NumZoneData > SWF_ZONERECORD_MAX_SIZE ) return ; if (! table -> ZoneData ) return ; SWF_ASSERT ( table -> NumZoneData <= SWF_ZONERECORD_MAX_SIZE
<S2SV_ModStart> table ) { unsigned <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 1 ) return ; if (! table -> NumZoneData * sizeof ( struct SWF_ZONEDATA ) ) return ; if (! table -> ZoneData ) return ; i = 0 ; i < table -> NumZoneData ; i ++ ) if (! table -> ZoneData [ i ] ) return ; free ( table -> ZoneData
<S2SV_ModStart> table ) { unsigned <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 1 ) return ; if (! table -> NumZoneData ) return ; if (! table -> ZoneData ) return <S2SV_ModStart> f ) ; if (! table -> NumZoneData ) { return ; }
<S2SV_ModStart> table ) { SWF_UNUSED <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 1 ) return ; if (! table -> ZoneData ) return ; if (! table -> NumZoneData * sizeof ( struct SWF_ZONEDATA
<S2SV_ModStart> table ) { unsigned <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 1 ) return ; if (! table -> NumZoneData * sizeof ( struct SWF_ZONEDATA ) ) return ; if (! table -> ZoneData ) return ; i = 0 ; i < table -> NumZoneData ; i ++ ) parseSWF_ZONEDATA ( f, table -> ZoneData + i
<S2SV_ModStart> table ) { SWF_UNUSED <S2SV_ModStart> readUInt8 ( f ) ; if ( table -> NumZoneData < 0 ) return ; if ( table -> ZoneData [ 0 ] == 0 ) return ; if ( table -> ZoneData [ 1 ] == 0 ) return ; if ( table -> ZoneData [ 2 ] == 0 ) return ; if ( table -> ZoneData [ 3 ] == 0
