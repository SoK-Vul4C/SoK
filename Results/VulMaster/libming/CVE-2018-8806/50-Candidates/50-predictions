<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) ) { fprintf ( stderr, " Can\'t get string for type: %d\\n", act -> Type ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) ) { fprintf ( stderr, " Can\'t get string for type: %d\\n", act -> Type ) ; return "" ; } <S2SV_ModStart> break ; } <S2SV_ModEnd> }    
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) - 1 ) { fprintf ( stderr, " Can\'t get string for type: %d\\n", act -> Type ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) - 1 ) { fprintf ( stderr, " Can\'t get string for type: %d\\n", act -> Type ) ; return "" ; } <S2SV_ModStart> break ; } <S2SV_ModEnd> }    
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) ) { fprintf ( stderr, " Can\'t get string for constant 8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) ) { fprintf ( stderr, " Can\'t get string for constant 16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } <S2SV_ModEnd> }    
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) ) { fprintf ( stderr, " Can\'t get string for constant 8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) ) { fprintf ( stderr, " Can\'t get string for constant 16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } # ifdef DEBUG printf ( "*getString* type: %d\\n", act -> Type ) ; # endif
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) ) { fprintf ( stderr, " can\'t get string for constant 8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) ) { fprintf ( stderr, " can\'t get string for constant 16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } # ifdef DEBUG printf ( "*getString* type: %d\\n", act -> Type ) ; # endif
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) ) { fprintf ( stderr, " can\'t get string for constant 8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) ) { fprintf ( stderr, " can\'t get string for constant 16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } <S2SV_ModEnd> }    
<S2SV_ModStart> = malloc ( sizeof ( char ) * ( <S2SV_ModStart> = malloc ( sizeof ( char ) * ( <S2SV_ModStart> break ; } t = malloc ( sizeof ( char ) * ( act -> p. String ) ) ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. String ] ) ; strcat ( t, "\'" ) ; return t ;
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) ) { fprintf ( stderr, " Can\'t get string for type: %d\\n", act -> Type ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) ) { fprintf ( stderr, " Can\'t get string for type: %d\\n", act -> Type ) ; return "" ; } <S2SV_ModStart> break ; } # ifdef DEBUG printf ( "*getString* type: %d\\n", act -> Type ) ; # endif
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) ) { fprintf ( stderr, " can\'t get string for type: %d\\n", act -> Type ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) ) { fprintf ( stderr, " can\'t get string for type: %d\\n", act -> Type ) ; return "" ; } <S2SV_ModStart> break ; } <S2SV_ModEnd> }    
<S2SV_ModStart> = malloc ( sizeof ( char ) * ( <S2SV_ModStart> = malloc ( sizeof ( char ) * ( <S2SV_ModStart> break ; } t = malloc ( strlenext ( pool [ act -> p. String ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. String ] ) ; strcat ( t, "\'" ) ; return t ;
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) - 1 ) { fprintf ( stderr, " can\'t get string for type: %d\\n", act -> Type ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) - 1 ) { fprintf ( stderr, " can\'t get string for type: %d\\n", act -> Type ) ; return "" ; } <S2SV_ModStart> break ; } <S2SV_ModEnd> }    
<S2SV_ModStart> = malloc ( sizeof ( char ) * ( <S2SV_ModStart> = malloc ( sizeof ( char ) * ( <S2SV_ModStart> break ; } t = malloc ( strlenext ( pool [ act -> p. Constant8 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" ) ; return t ;
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) - 1 ) { fprintf ( stderr, " Can\'t get string for constant 8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) - 1 ) { fprintf ( stderr, " Can\'t get string for constant 16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } <S2SV_ModEnd> }    
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) ) { fprintf ( stderr, " Can\'t get string for constant8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) ) { fprintf ( stderr, " Can\'t get string for constant16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } # ifdef DEBUG printf ( "*getString* type: %d\\n", act -> Type ) ; # endif
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) ) { fprintf ( stderr, " Can\'t get string for constant8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) ) { fprintf ( stderr, " Can\'t get string for constant16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } <S2SV_ModEnd> }    
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) - 1 ) { fprintf ( stderr, " Can\'t get string for type: %d\\n", act -> Type ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) - 1 ) { fprintf ( stderr, " Can\'t get string for type: %d\\n", act -> Type ) ; return "" ; } <S2SV_ModStart> break ; } # ifdef DEBUG printf ( "*getString* type: %d\\n", act -> Type ) ; # endif
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) ) { fprintf ( stderr, " can\'t get string for constant8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) ) { fprintf ( stderr, " can\'t get string for constant16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } # ifdef DEBUG printf ( "*getString* type: %d\\n", act -> Type ) ; # endif
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) ) { fprintf ( stderr, " Can\'t get string for constant 8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) ) { fprintf ( stderr, " Can\'t get string for constant 16\\n" ) ; return "" ; } <S2SV_ModStart> ; } return "false" <S2SV_ModEnd> ; }  
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) - 1 ) { fprintf ( stderr, " Can\'t get string for constant 8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) - 1 ) { fprintf ( stderr, " Can\'t get string for constant 16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } # ifdef DEBUG printf ( "*getString* type: %d\\n", act -> Type ) ; # endif
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool ) - 1 ) { fprintf ( stderr, " Can\'t get string for constant 8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool ) - 1 ) { fprintf ( stderr, " Can\'t get string for constant 16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } t = malloc ( strlenext ( pool [ act -> p. String ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. String ] ) ; strcat ( t, "\'" ) ; return t <S2SV_ModEnd> ; }  
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) - 1 ) { fprintf ( stderr, " can\'t get string for constant 8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) - 1 ) { fprintf ( stderr, " can\'t get string for constant 16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } # ifdef DEBUG printf ( "*getString* type: %d\\n", act -> Type ) ; # endif
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) ) { fprintf ( stderr, " can\'t get string for type: %d\\n", act -> Type ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) ) { fprintf ( stderr, " can\'t get string for type: %d\\n", act -> Type ) ; return "" ; } <S2SV_ModStart> break ; } # ifdef DEBUG printf ( "*getString* type: %d\\n", act -> Type ) ; # endif
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) ) { fprintf ( stderr, " Can\'t get string for constant 8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) ) { fprintf ( stderr, " Can\'t get string for constant 16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } t = malloc ( strlenext ( pool [ act -> p. String ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. String ] ) ; strcat ( t, "\'" ) ; return t <S2SV_ModEnd> ; }  
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) - 1 ) { fprintf ( stderr, " can\'t get string for constant 8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) - 1 ) { fprintf ( stderr, " can\'t get string for constant 16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } <S2SV_ModEnd> }    
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) ) { fprintf ( stderr, " can\'t get string for constant 8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) ) { fprintf ( stderr, " can\'t get string for constant 16\\n" ) ; return "" ; } <S2SV_ModStart> ; } return "false" <S2SV_ModEnd> ; }  
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) ) { fprintf ( stderr, " can\'t get string for constant8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) ) { fprintf ( stderr, " can\'t get string for constant16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } <S2SV_ModEnd> }    
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool ) - 3 ) { fprintf ( stderr, " Can\'t get string for constant 8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool ) - 3 ) { fprintf ( stderr, " Can\'t get string for constant 16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } t = malloc ( strlenext ( pool [ act -> p. String ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. String ] ) ; strcat ( t, "\'" ) ; return t <S2SV_ModEnd> ; }  
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) ) { fprintf ( stderr, " can\'t get string for constant 8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) ) { fprintf ( stderr, " can\'t get string for constant 16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } t = malloc ( strlenext ( pool [ act -> p. String ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. String ] ) ; strcat ( t, "\'" ) ; return t <S2SV_ModEnd> ; }  
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) ) { fprintf ( stderr, " Can\'t get string for constant 8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) ) { fprintf ( stderr, " Can\'t get string for constant 16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } t = malloc ( strlenext ( pool [ act -> p. String ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. String ] ) ; strcat ( t, "\'" ) ;
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool ) - 3 ) { fprintf ( stderr, " can\'t get string for constant 8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool ) - 3 ) { fprintf ( stderr, " can\'t get string for constant 16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } t = malloc ( strlenext ( pool [ act -> p. String ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. String ] ) ; strcat ( t, "\'" ) ; return t <S2SV_ModEnd> ; }  
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) ) { fprintf ( stderr, " Can\'t get string for type: %d\\n", act -> Type ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) ) { fprintf ( stderr, " Can\'t get string for type: %d\\n", act -> Type ) ; return "" ; } <S2SV_ModStart> break ; } t = malloc ( strlenext ( pool [ act -> p. String ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. String ] ) ; strcat ( t, "\'" ) ;
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) ) { fprintf ( stderr, " can\'t get string for constant 8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) ) { fprintf ( stderr, " can\'t get string for constant 16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } t = malloc ( strlenext ( pool [ act -> p. String ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. String ] ) ; strcat ( t, "\'" ) ;
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) ) { fprintf ( stderr, " Can\'t get string for type: %d\\n", act -> Type ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) ) { fprintf ( stderr, " Can\'t get string for type: %d\\n", act -> Type ) ; return "" ; } <S2SV_ModStart> break ; } default : fprintf ( stderr, " Can\'t get string for type: %d\\n", act -> Type ) ; return "false" <S2SV_ModEnd> ; }  
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) ) { fprintf ( stderr, " Can\'t get string for constant 8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) ) { fprintf ( stderr, " Can\'t get string for constant 16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } abort ( ) <S2SV_ModEnd> ; }  
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool ) - 1 ) { fprintf ( stderr, " can\'t get string for constant 8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool ) - 1 ) { fprintf ( stderr, " can\'t get string for constant 16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } t = malloc ( strlenext ( pool [ act -> p. String ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. String ] ) ; strcat ( t, "\'" ) ; return t <S2SV_ModEnd> ; }  
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) - 1 ) { fprintf ( stderr, " can\'t get string for type: %d\\n", act -> Type ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) - 1 ) { fprintf ( stderr, " can\'t get string for type: %d\\n", act -> Type ) ; return "" ; } <S2SV_ModStart> break ; } # ifdef DEBUG printf ( "*getString* type: %d\\n", act -> Type ) ; # endif
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) ) { fprintf ( stderr, " Can\'t get string for type: %d\\n", act -> Type ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) ) { fprintf ( stderr, " Can\'t get string for type: %d\\n", act -> Type ) ; return "" ; } <S2SV_ModStart> ; } return "false" <S2SV_ModEnd> ; }  
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) ) { fprintf ( stderr, " can\'t get string for constant 8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) ) { fprintf ( stderr, " can\'t get string for constant 16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } abort ( ) <S2SV_ModEnd> ; }  
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) ) { fprintf ( stderr, " Can\'t get string for type: %d\\n", act -> Type ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) ) { fprintf ( stderr, " Can\'t get string for type: %d\\n", act -> Type ) ; return "" ; } <S2SV_ModStart> break ; } abort ( ) <S2SV_ModEnd> ; }  
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) - 1 ) { fprintf ( stderr, " Can\'t get string for constant8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) - 1 ) { fprintf ( stderr, " Can\'t get string for constant16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } <S2SV_ModEnd> }    
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) - 1 ) { fprintf ( stderr, " can\'t get string for constant8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) - 1 ) { fprintf ( stderr, " can\'t get string for constant16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } # ifdef DEBUG printf ( "*getString* type: %d\\n", act -> Type ) ; # endif
<S2SV_ModStart> = malloc ( "%s", <S2SV_ModStart> = malloc ( "%s", <S2SV_ModStart> break ; } t = malloc ( strlen ( "" ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" ) ; return t ; case PUSH_CONSTANT16 : t = malloc ( strlenext ( pool [ act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; strcat ( t, "\'" ) ;
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) - 1 ) { fprintf ( stderr, " Can\'t get string for constant8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) - 1 ) { fprintf ( stderr, " Can\'t get string for constant16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } # ifdef DEBUG printf ( "*getString* type: %d\\n", act -> Type ) ; # endif
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) ) { fprintf ( stderr, " Can\'t get string for constant 8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) ) { fprintf ( stderr, " Can\'t get string for constant 16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } default : fprintf ( stderr, " Can\'t get string for type: %d\\n", act -> Type ) ; return "false" <S2SV_ModEnd> ; }  
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool ) - 3 ) { fprintf ( stderr, " Can\'t get string for constant 8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool ) - 3 ) { fprintf ( stderr, " Can\'t get string for constant 16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } abort ( ) <S2SV_ModEnd> ; }  
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) - 1 ) { fprintf ( stderr, " Can\'t get string for type: %d\\n", act -> Type ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) - 1 ) { fprintf ( stderr, " Can\'t get string for type: %d\\n", act -> Type ) ; return "" ; } <S2SV_ModStart> ; } return "false" <S2SV_ModEnd> ; }  
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) - 1 ) { fprintf ( stderr, " Can\'t get string for constant 8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) - 1 ) { fprintf ( stderr, " Can\'t get string for constant 16\\n" ) ; return "" ; } <S2SV_ModStart> ; } return "false" <S2SV_ModEnd> ; }  
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool ) - 1 ) { fprintf ( stderr, " Can\'t get string for constant 8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool ) - 1 ) { fprintf ( stderr, " Can\'t get string for constant 16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } abort ( ) <S2SV_ModEnd> ; }  
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) - 1 ) { fprintf ( stderr, " can\'t get string for constant8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) - 1 ) { fprintf ( stderr, " can\'t get string for constant16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } <S2SV_ModEnd> }    
<S2SV_ModStart> case PUSH_CONSTANT : if ( act -> p. Constant8 > sizeof ( pool [ act -> p. Constant8 ] ) ) { fprintf ( stderr, " can\'t get string for constant 8\\n" ) ; return "" ; } <S2SV_ModStart> case PUSH_CONSTANT16 : if ( act -> p. Constant16 > sizeof ( pool [ act -> p. Constant16 ] ) ) { fprintf ( stderr, " can\'t get string for constant 16\\n" ) ; return "" ; } <S2SV_ModStart> break ; } default : fprintf ( stderr, " Can\'t get string for type: %d\\n", act -> Type ) ; return "false" <S2SV_ModEnd> ; }  
