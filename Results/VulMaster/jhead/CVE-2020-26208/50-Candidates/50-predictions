<S2SV_ModStart> malloc ( itemlen + 1
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, 1 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data!= NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } else { free ( Sections [ SectionsRead ]. Data ) ; } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } } break ;
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data == NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } else { free ( Sections [ SectionsRead ]. Data ) ; } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } } break ;
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data!= NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } else { free ( Sections [ SectionsRead ]. Data ) ; } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } break ; }
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data == NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } else { free ( Sections [ SectionsRead ]. Data ) ; } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } break ; }
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data == NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF2 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF2 section, %d bytes long\\n", itemlen ) ; } } break ;
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data!= NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF2 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF2 section, %d bytes long\\n", itemlen ) ; } } break ;
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data <S2SV_ModEnd> ) ; if
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data == NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } else { free ( Sections [ SectionsRead ]. Data ) ; } break ; case M_SOF1 : if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } break ; case M_SOF2 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF2 section, %d bytes long\\n", itemlen ) ; } } break ;
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data!= NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } else { free ( Sections [ SectionsRead ]. Data ) ; } break ; case M_SOF1 : if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } break ; case M_SOF2 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF2 section, %d bytes long\\n", itemlen ) ; } } break ;
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( Data [ 0 ] == 0 && Sections [ SectionsRead ]. Size!= itemlen ) { ErrFatal ( "Too many padding bytes before section %02X", Data [ 0 ] ) ; } if ( Data [ 1 ] == 0 && Sections [ SectionsRead ]. Size!= itemlen ) { ErrFatal ( "Too many padding bytes before section %02X", Data [ 1 ] ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } else { free ( Sections [ SectionsRead ]. Data ) ; } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } } break ;
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data == NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF2 : if ( ShowTags ) { printf ( "Image contains SOF2 section, %d bytes long\\n", itemlen ) ; } } break ;
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data!= NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } else { free ( Sections [ SectionsRead ]. Data ) ; } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } } break ; }
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( Data [ 0 ] == 0 && Sections [ SectionsRead ]. Size!= itemlen ) { ErrFatal ( "Too many padding bytes before section %02X", Data [ 0 ] ) ; } if ( Data [ 1 ] == 0 && Sections [ SectionsRead ]. Size!= itemlen ) { ErrFatal ( "Too many padding bytes before section %02X", Data [ 1 ] ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } else { free ( Sections [ SectionsRead ]. Data ) ; } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } break ; }
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data == NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } else { free ( Sections [ SectionsRead ]. Data ) ; } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } } break ; }
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data!= NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF2 : if ( ShowTags ) { printf ( "Image contains SOF2 section, %d bytes long\\n", itemlen ) ; } } break ;
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data == NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } else { free ( Sections [ SectionsRead ]. Data ) ; } break ; case M_SOF1 : if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } break ; case M_SOF2 : if ( ShowTags ) { printf ( "Image contains SOF2 section, %d bytes long\\n", itemlen ) ; } break ; }
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data!= NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } } break ;
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data == NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } } break ;
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data == NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF2 : if ( ReadMode & READ_METADATA ) { free ( Sections [ SectionsRead ]. Data ) ; } break ; }
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data!= NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } else { free ( Sections [ SectionsRead ]. Data ) ; } break ; case M_SOF1 : if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } break ; case M_SOF2 : if ( ShowTags ) { printf ( "Image contains SOF2 section, %d bytes long\\n", itemlen ) ; } break ; }
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data!= NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF2 : if ( ReadMode & READ_METADATA ) { free ( Sections [ SectionsRead ]. Data ) ; } break ; }
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data == NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF2 : if ( ShowTags ) { printf ( "Image contains SOF2 section, %d bytes long\\n", itemlen ) ; } break ; }
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data == NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } else { free ( Sections [ SectionsRead ]. Data ) ; } break ; case M_SOF1 : if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } break ; case M_SOF2 : if ( ShowTags ) { printf ( "Image contains SOF2 section, %d bytes long\\n", itemlen ) ; } } break ;
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data == NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF2 : if ( ReadMode & READ_METADATA ) { printf ( "Image contains SOF2 section, %d bytes long\\n", itemlen ) ; } break ; }
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data == NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } else { free ( Sections [ SectionsRead ]. Data ) ; } break ; case M_SOF1 : if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } break ; case M_SOF2 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "No image in jpeg!\\n" ) ; } } break ;
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data!= NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF2 : if ( ShowTags ) { printf ( "Image contains SOF2 section, %d bytes long\\n", itemlen ) ; } break ; }
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data == NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF2 : if ( ReadMode & READ_METADATA ) { free ( Sections [ SectionsRead ]. Data ) ; } break ;
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data!= NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } else { free ( Sections [ SectionsRead ]. Data ) ; } break ; case M_SOF1 : if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } break ; case M_SOF2 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "No image in jpeg!\\n" ) ; } } break ;
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data!= NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF2 : if ( ReadMode & READ_METADATA ) { printf ( "Image contains SOF2 section, %d bytes long\\n", itemlen ) ; } break ; }
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data!= NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } else { free ( Sections [ SectionsRead ]. Data ) ; } break ; case M_SOF1 : if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } break ; case M_SOF2 : if ( ShowTags ) { printf ( "Image contains SOF2 section, %d bytes long\\n", itemlen ) ; } } break ;
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data!= NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF2 : if ( ReadMode & READ_METADATA ) { free ( Sections [ SectionsRead ]. Data ) ; } break ;
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data!= NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } else { free ( Sections [ SectionsRead ]. Data ) ; } break ; case M_SOF1 : if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } break ; case M_SOF2 : if ( ReadMode & READ_METADATA ) { if (
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data!= NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "No image in jpeg!\\n" ) ; } } else { free ( Sections [ SectionsRead ]. Data ) ; } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "No image in jpeg!\\n" ) ; } } break ;
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data == NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } else { free ( Sections [ SectionsRead ]. Data ) ; } break ; case M_SOF1 : if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } break ; case M_SOF2 : if ( ReadMode & READ_METADATA ) { if (
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data == NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF1 : if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } break ; case M_SOF2 : if ( ShowTags ) { printf ( "Image contains SOF2 section, %d bytes long\\n", itemlen ) ; } break ; }
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data == NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } else { free ( Sections [ SectionsRead ]. Data ) ; } break ; case M_SOF1 : if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } break ; case M_SOF2 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf (
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data!= NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF1 : if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } break ; case M_SOF2 : if ( ShowTags ) { printf ( "Image contains SOF2 section, %d bytes long\\n", itemlen ) ; } break ; }
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data == NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF2 : if ( ShowTags ) { printf ( "Image contains SOF2 section, %d bytes long\\n", itemlen ) ; } break ;
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data!= NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } else { free ( Sections [ SectionsRead ]. Data ) ; } break ; case M_SOF1 : if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } break ; case M_SOF2 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf (
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data == NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF2 : if ( ReadMode & READ_METADATA ) { free ( Sections [ SectionsRead ]. Data ) ; }
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data!= NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOFTFILE section, %d bytes long\\n", itemlen ) ; } } else { free ( Sections [ SectionsRead ]. Data ) ; } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } } break ;
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data!= NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF2 : if ( ShowTags ) { printf ( "Image contains SOF2 section, %d bytes long\\n", itemlen ) ; } break ;
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data!= NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF2 : if ( ReadMode & READ_METADATA ) { free ( Sections [ SectionsRead ]. Data ) ; }
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data == NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "No image in jpeg!\\n" ) ; } } else { free ( Sections [ SectionsRead ]. Data ) ; } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "No image in jpeg!\\n" ) ; } } break ;
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data!= NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } else { free ( Sections [ SectionsRead ]. Data ) ; } break ; case M_SOF1 : if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } break ;
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data == NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } else { free ( Sections [ SectionsRead ]. Data ) ; } break ; case M_SOF1 : if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } break ; case M_SOF2 : if ( ShowTags ) { printf ( "Image contains SOF2 section, %d bytes long\\n", itemlen ) ; } break ;
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data == NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOFTFILE section, %d bytes long\\n", itemlen ) ; } } else { free ( Sections [ SectionsRead ]. Data ) ; } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } } break ;
<S2SV_ModStart> uchar * ) safe_calloc ( itemlen, & Sections [ SectionsRead ]. Data ) ; if ( ReadMode & READ_METADATA ) { if ( Sections [ SectionsRead ]. Data!= NULL ) { free ( Sections [ SectionsRead ]. Data ) ; } Sections [ SectionsRead ]. Data = ( uchar * ) malloc ( itemlen ) ; if ( Sections [ SectionsRead ]. Data == NULL ) { ErrFatal ( "Could not allocate memory" ) ; } } break ; case M_SOF0 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF0 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF1 : if ( ReadMode & READ_METADATA ) { if ( ShowTags ) { printf ( "Image contains SOF1 section, %d bytes long\\n", itemlen ) ; } } break ; case M_SOF2 : if ( ReadMode & READ_METADATA ) { free ( Sections [ SectionsRead ]. Data
