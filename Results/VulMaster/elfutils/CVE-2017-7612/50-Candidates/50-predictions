<S2SV_ModStart> ; if ( ( <S2SV_ModStart> sh_size < ( 2LL <S2SV_ModEnd> + nbucket + <S2SV_ModStart> + nchain ) ) && shdr -> sh_entsize!= 0 <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> sh_size < ( 2LL <S2SV_ModEnd> + nbucket + <S2SV_ModStart> + nchain ) ) && shdr -> sh_entsize!= 0 ) <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( 2 + nbucket + nchain ) * shdr -> sh_entsize ) { if ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( 2 + nbucket + nchain ) * shdr -> sh_entsize ) { if ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ) ) ; } <S2SV_ModStart> sh_size < ( 3 + nbucket + nchain ) * shdr -> sh_entsize ) { if ( <S2SV_ModEnd> shdr -> sh_size <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( 2 + nbucket + nchain ) * shdr -> sh_entsize ) { if ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ) ) ; } <S2SV_ModStart> sh_size < ( 1 + nbucket + nchain ) * shdr -> sh_entsize ) { if ( <S2SV_ModEnd> shdr -> sh_size <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( 2 + nbucket + nchain ) * shdr -> sh_entsize ) if ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> sh_size < ( 2LL <S2SV_ModEnd> + nbucket + <S2SV_ModStart> + nchain ) ) && shdr -> sh_entsize!= 0 <S2SV_ModEnd> ) ERROR ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> sh_size < ( 3 + nbucket ) * shdr -> sh_entsize ) || ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> sh_size < ( 1 <S2SV_ModEnd> + nbucket + <S2SV_ModStart> + nchain ) ) && shdr -> sh_entsize!= 0 ) <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( 2 + nbucket + nchain ) * shdr -> sh_entsize ) { if ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ) ) ; } <S2SV_ModStart> sh_size < ( 2 + nbucket + nchain ) * shdr -> sh_entsize ) { if ( <S2SV_ModEnd> shdr -> sh_size <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( 2 + nbucket + nchain ) * shdr -> sh_entsize ) { if ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ) ) ; } <S2SV_ModStart> sh_size < ( 3 + nbucket + nchain ) * shdr -> sh_entsize ) { if ( <S2SV_ModEnd> shdr -> sh_size <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain array too large\\n" <S2SV_ModEnd> ), idx
<S2SV_ModStart> ; if ( ( 2 + nbucket + nchain ) * shdr -> sh_entsize ) { if ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ) ) ; } <S2SV_ModStart> sh_size < ( 2 + nbucket + nchain ) * shdr -> sh_entsize ) { if ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( nchain > shdr -> sh_size ) { if ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain array too large\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ) ) ; } <S2SV_ModStart> sh_size < ( 2 + nbucket + nchain ) * shdr -> sh_entsize ) { if ( nchain > shdr -> sh_size / <S2SV_ModEnd> shdr -> sh_entsize <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain array too large\\n" <S2SV_ModEnd> ), idx
<S2SV_ModStart> ; if ( ( 2 + nbucket + nchain ) * shdr -> sh_entsize ) { if ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ) ) ; } <S2SV_ModStart> sh_size < ( 1 + nbucket + nchain ) * shdr -> sh_entsize ) { if ( <S2SV_ModEnd> shdr -> sh_size <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain array too large\\n" <S2SV_ModEnd> ), idx
<S2SV_ModStart> ; if ( nchain > shdr -> sh_size / shdr -> sh_entsize ) { ERROR ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" ), idx, section_name ( ebl, idx ), ( long int ) ( 2 + nbucket + nchain ) * shdr -> sh_entsize ) ) ; } if ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> sh_size < ( 2LL <S2SV_ModEnd> + nbucket + <S2SV_ModStart> nchain ) * ( <S2SV_ModStart> sh_entsize ) ) ) <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> sh_size < ( 2LL <S2SV_ModEnd> + nbucket + <S2SV_ModStart> + nchain ) ) || ( shdr -> sh_size > ( 2LL <S2SV_ModEnd> + nbucket + <S2SV_ModStart> + nchain ) ) ) ) { ERROR ( gettext ( "\\\n section [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" ), idx, section_name ( ebl, idx ), ( long int ) shdr -> sh_size, ( long int ) ( 2 + nbucket + nchain ) <S2SV_ModStart> ) ) ; }
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> sh_size < ( 3 + nbucket + nchain ) * shdr -> sh_entsize ) || ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( 2 + nbucket + nchain ) * shdr -> sh_entsize ) { if ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ) ) ; } <S2SV_ModStart> sh_size < ( 2 + nbucket + nchain ) * shdr -> sh_entsize ) { if ( <S2SV_ModEnd> shdr -> sh_size <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain array too large\\n" <S2SV_ModEnd> ), idx
<S2SV_ModStart> ; if ( nchain > shdr -> sh_size / shdr -> sh_entsize ) { ERROR ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" ), idx, section_name ( ebl, idx ), ( long int ) ( 2 + nbucket + nchain ) * shdr -> sh_entsize ) ) ; } else if ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> sh_size < ( 2LL <S2SV_ModEnd> + nbucket + <S2SV_ModStart> + nchain ) ) || ( shdr -> sh_size > ( 2LL <S2SV_ModEnd> + nbucket + <S2SV_ModStart> + nchain ) ) ) ) { ERROR ( gettext ( "\\\n section [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" ), idx, section_name ( ebl, idx ), ( long int ) shdr -> sh_size, ( long int ) ( 2 + nbucket + nchain )
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> sh_size < ( 2LL <S2SV_ModEnd> + nbucket + <S2SV_ModStart> + nchain ) ) || ( shdr -> sh_size > ( 2LL <S2SV_ModEnd> + nbucket + <S2SV_ModStart> + nchain ) ) ) ) { <S2SV_ModEnd> ERROR ( gettext <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> sh_size < ( 1 <S2SV_ModEnd> + nbucket + <S2SV_ModStart> + nchain ) ) || ( shdr -> sh_size > ( 1 <S2SV_ModEnd> + nbucket + <S2SV_ModStart> + nchain ) ) ) ) { ERROR ( gettext ( "\\\n section [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" ), idx, section_name ( ebl, idx ), ( long int ) shdr -> sh_size, ( long int ) ( 2 + nbucket + nchain ) <S2SV_ModStart> ) ) ; }
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> sh_size < ( 2LL <S2SV_ModEnd> + nbucket + <S2SV_ModStart> + nchain ) ) && shdr -> sh_entsize!= 0 <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> sh_size, ( <S2SV_ModEnd> long int ) <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> sh_size < ( 2LL <S2SV_ModEnd> + nbucket + <S2SV_ModStart> + nchain ) ) || ( shdr -> sh_size > ( 2LL <S2SV_ModEnd> + nbucket + <S2SV_ModStart> + nchain ) ) ) ) { ERROR ( gettext ( "\\\n section [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" ), idx, section_name ( ebl, idx ), ( long int ) shdr -> sh_size, ( long int ) ( 2 + nbucket + nchain ) <S2SV_ModStart> ( gettext ( "\\\n section [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> sh_size < ( 1 <S2SV_ModEnd> + nbucket + <S2SV_ModStart> nchain ) * ( <S2SV_ModStart> sh_entsize ) ) ) <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> sh_size < ( 1 <S2SV_ModEnd> + nbucket + <S2SV_ModStart> + nchain ) ) && shdr -> sh_entsize!= 0 <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> sh_size < ( 2LL <S2SV_ModEnd> + nbucket + <S2SV_ModStart> + nchain ) ) && ( shdr -> sh_entsize!= 0 ) ) <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( 2 + nbucket + nchain ) * shdr -> sh_entsize < 2 <S2SV_ModEnd> ) ERROR ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> sh_size < ( 1 <S2SV_ModEnd> + nbucket + <S2SV_ModStart> + nchain ) ) || ( shdr -> sh_size > ( 1 <S2SV_ModEnd> + nbucket + <S2SV_ModStart> + nchain ) ) ) ) { ERROR ( gettext ( "\\\n section [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" ), idx, section_name ( ebl, idx ), ( long int ) shdr -> sh_size, ( long int ) ( 2 + nbucket + nchain ) <S2SV_ModStart> ( gettext ( "\\\n section [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( nchain > shdr -> sh_size ) { if ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> sh_size < ( 2LL <S2SV_ModEnd> + nbucket + <S2SV_ModStart> + nchain ) ) && shdr -> sh_entsize!= 0 <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> sh_size, ( <S2SV_ModEnd> int ) ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> sh_size < ( 2LL <S2SV_ModEnd> + nbucket + <S2SV_ModStart> + nchain ) ) || ( shdr -> sh_size > ( 2LL + nbucket + nchain ) * shdr -> sh_entsize ) ) <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( nchain > shdr -> sh_size ) { if ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain array too large\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ) ) ; } <S2SV_ModStart> sh_size < ( 2 + nbucket + nchain ) * shdr -> sh_entsize ) { if ( nchain > shdr -> sh_size / shdr -> sh_entsize ) ERROR ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" ), idx, section_name ( ebl, idx ), ( long int ) ( 2 + nbucket + nchain ) * shdr -> sh_entsize ) ) ; }
<S2SV_ModStart> ; if ( nchain > shdr -> sh_size ) { if ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain array too large\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ) ) ; } <S2SV_ModStart> sh_size < ( 2 + nbucket + nchain ) * shdr -> sh_entsize ) { if ( nchain > shdr -> sh_size / <S2SV_ModEnd> shdr -> sh_entsize <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> sh_size < ( 2LL <S2SV_ModEnd> + nbucket + <S2SV_ModStart> + nchain ) ) || ( ( 2 + nbucket + nchain ) <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> sh_size < ( 1 <S2SV_ModEnd> + nbucket + <S2SV_ModStart> + nchain ) ) || ( shdr -> sh_size > ( 1 + nbucket + nchain ) ) ) <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( long int ) <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( 2 + nbucket + nchain ) * shdr -> sh_entsize ) { if ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ) ) ; } <S2SV_ModStart> sh_size < ( 2 + nbucket + nchain ) * shdr -> sh_entsize ) { if ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain array too large\\n" <S2SV_ModEnd> ), idx
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> sh_size < ( 2LL <S2SV_ModEnd> + nbucket + <S2SV_ModStart> + nchain ) ) && shdr -> sh_entsize!= 0 <S2SV_ModEnd> ) ERROR ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\n section [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( nbucket >= 2 || nchain >= 2 || <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( nchain > shdr -> sh_size ) { if ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain array too large\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ) ) ; } <S2SV_ModStart> sh_size < ( 2 + nbucket + nchain ) * shdr -> sh_entsize ) { if ( nchain > shdr -> sh_size / shdr -> sh_entsize ) ERROR ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" ), idx, section_name ( ebl, idx ), ( long int ) ( <S2SV_ModStart> sh_size, ( <S2SV_ModEnd> long int ) <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain array too large\\n" <S2SV_ModEnd> ), idx
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> sh_size < ( 1 <S2SV_ModEnd> + nbucket + <S2SV_ModStart> + nchain ) ) && shdr -> sh_entsize!= 0 ) <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> sh_size, ( <S2SV_ModEnd> long int ) <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> sh_size < ( 2LL <S2SV_ModEnd> + nbucket + <S2SV_ModStart> + nchain ) ) && shdr -> sh_entsize!= 0 ) <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> sh_size, ( <S2SV_ModEnd> long int ) <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( 2 + nbucket + nchain ) * shdr -> sh_entsize ) { if ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ) ) ; } <S2SV_ModStart> sh_size < ( 2 + nbucket + nchain ) * shdr -> sh_entsize ) { if ( <S2SV_ModEnd> shdr -> sh_size <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( 2 + nbucket + nchain ) * shdr -> sh_entsize < shdr -> sh_size <S2SV_ModEnd> ) ERROR ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( ( 2 + nbucket + nchain ) * shdr -> sh_entsize < ( 1 + nbucket + nchain ) <S2SV_ModEnd> ) ERROR ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
<S2SV_ModStart> ; if ( nbucket >= nchain ) { if ( <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ) ) ; } <S2SV_ModStart> sh_size < ( 3 + nbucket + nchain ) * shdr -> sh_entsize ) ERROR ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" ), idx, section_name ( ebl, idx ), ( long int ) ( 2 + nbucket + nchain ) <S2SV_ModEnd> * shdr ->
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> sh_size < ( 2LL <S2SV_ModEnd> + nbucket + <S2SV_ModStart> + nchain ) ) || ( shdr -> sh_size > ( 2LL <S2SV_ModEnd> + nbucket + <S2SV_ModStart> + nchain ) ) ) ) { ERROR ( gettext ( "\\\n section [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" ), idx, section_name ( ebl, idx ), ( long int ) shdr -> sh_size, ( long int ) ( 2 + nbucket + nchain ) <S2SV_ModStart> ( gettext ( "\\\n section [%2d] \'%s\': hash chain array too large\\n" <S2SV_ModEnd> ), idx
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> sh_size < ( 2LL <S2SV_ModEnd> + nbucket + <S2SV_ModStart> nchain ) * ( <S2SV_ModStart> sh_entsize ) ) ) <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash table section is too small (is %ld, expected %ld)\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> sh_size, ( <S2SV_ModEnd> long int ) <S2SV_ModStart> ( gettext ( "\\\nsection [%2d] \'%s\': hash chain reference %" <S2SV_ModEnd> PRIu64 " out of bounds\\n" )
