<S2SV_ModStart>, samplesperpixel = 0 <S2SV_ModEnd> ; uint16 input_compression
<S2SV_ModStart>, samplesperpixel = 2 <S2SV_ModEnd> ; uint16 input_compression
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, 0 ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, 1 ) ; } else
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, - 1 ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; } else
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_JPEGCOLORMODE, JPEGCOLORMODE_RGB ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, JPEGCOLORMODE_RGB ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, JPEGCOLORMODE_RGB ) ; } else { TIFFSetField ( out,
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, - 1 ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; } break ; }
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, NULL ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, NULL ) ; } else
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, 1 ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, 1 ) ; } else
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, 0 ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, 1 ) ; } else {
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, NULL ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, NULL ) ; } else {
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, - 1 ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; } else {
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, 0 ) ; } else { TIFFSetField ( out,
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, - 1 ) ; } else { TIFFSetField ( out,
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, - 1 ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; } else { TIFFSetField ( out,
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, - 1 ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; } else { }
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, 0 ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, 1 ) ; } break ; }
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, 1 ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; } else
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, - 1 ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out,
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, - 1 ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; } else { TIFFSetField (
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, - 1 ) ; } break ; case COMPRESSION_CCITTFAX4 : if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out,
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, g3opts ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; } else
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, 0 ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; } else
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, g3opts ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; } break ; }
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, 0 ) ; } else CopyField ( TIFFTAG_GROUP3OPTIONS,
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, 1 ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, 1 ) ; } else {
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, 0 ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, 1 ) ; } else { TIFFSetField (
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, 0 ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out,
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, NULL ) ; } else { TIFFSetField ( out,
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, 1 ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; } break ; }
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, NULL ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, NULL ) ; } break ; }
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, 0 ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, 1 ) ; } else { }
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, 0 ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, 1 ) ; } else { TIFFSetField ( out,
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_JPEGCOLORMODE, JPEGCOLORMODE_RGB ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, JPEGCOLORMODE_RGB ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, TIFFCOLORMODE_RGB ) ; } else { TIFFSetField ( out,
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, - 1 ) ; } else CopyField ( TIFFTAG_GROUP3OPTIONS,
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, 0 ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; } break ; }
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, - 1 ) ; } else if ( compression == COMPRESSION_YCBCRSUBSAMPLING ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; } else
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, 0 ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, 0 ) ; } else
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; TIFFGetFieldDefaulted ( in, TIFFTAG_SUBSAMPLING, & subsamplinghor, & subsamplingver ) ; if ( subsamplinghor!= 1 || subsamplingver!= 1 ) { fprintf ( stderr, "tiffcp: %s: Can\'t copy/convert subsampled image.\\n", TIFFFileName ( in ) ) ; return FALSE ; } <S2SV_ModEnd> if ( compression
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, 1 ) ; } else { TIFFSetField ( out,
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, - 1 ) ; } else CopyField ( TIFFTAG_SAMPLESPERPIXEL,
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, 1 ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, 1 ) ; } break ; }
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, - 1 ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; } else { return
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, 0 ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { }
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, 0 ) ; } else CopyField ( TIFFTAG_SAMPLESPERPIXEL,
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_JPEGCOLORMODE, JPEGCOLORMODE_RGB ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, JPEGCOLORMODE_RGB ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, JPEGCOLORMODE_RGB ) ; } else if (
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, NULL ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, NULL ) ; } else { }
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, 1 ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, 0 ) ; } else
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, - 1 ) ; } else ( TIFFSetField ( out,
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, - 1 ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; } break ; default :
<S2SV_ModStart>, samplesperpixel = 1 ; uint16 input_compression, input_photometric = PHOTOMETRIC_MINISBLACK ; uint32 width, length ; struct cpTag * p ; uint16 subsamplinghor, subsamplingver ; if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( out, TIFFTAG_IMAGELENGTH, length ) ; } else if ( compression == COMPRESSION_CCITTFAX3 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; else CopyField ( TIFFTAG_GROUP3OPTIONS, - 1 ) ; } else if ( compression == COMPRESSION_CCITTFAX4 ) { if ( g3opts!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_GROUP3OPTIONS, g3opts ) ; } else if (
