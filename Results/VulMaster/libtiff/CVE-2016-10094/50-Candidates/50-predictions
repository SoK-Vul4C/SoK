<S2SV_ModStart> ( count >= 3 <S2SV_ModEnd> ) { _TIFFmemcpy
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Can\'t allocate %lu bytes of memory " "for t2p_readwrite_pdf_image_tile, %s", ( unsigned long ) t2p -> tiff_datasize, TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Can\'t allocate %u bytes of memory " "for t2p_readwrite_pdf_image_tile, %s", ( unsigned long ) t2p -> tiff_datasize, TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Too many tiles for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Bad tilesize for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && count <= TIFF_UINT32_MAX ) { TIFFError ( TIFF2PDF_MODULE, "Too many entries for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Too many entries for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Too many values for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Invalid data size for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 4 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 4 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Can\'t allocate %lu bytes of memory " "for t2p_readwrite_pdf_image_tile, %s", ( unsigned long ) t2p -> tiff_datasize, TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Can\'t allocate %lu bytes of memory " "for t2p_readwrite_pdf_image, %s", ( unsigned long ) t2p -> tiff_datasize, TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Can\'t allocate %u bytes of memory " "for t2p_readwrite_pdf_image, %s", ( unsigned long ) t2p -> tiff_datasize, TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Bad data size for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Too many pages for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Too many images for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 4 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 4 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Can\'t allocate %u bytes of memory " "for t2p_readwrite_pdf_image_tile, %s", ( unsigned long ) t2p -> tiff_datasize, TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && count <= TIFF_UINT32_MAX ) { TIFFError ( TIFF2PDF_MODULE, "Too many values for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 4 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 4 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Too many tiles for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 4 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 4 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Bad tilesize for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Bad tilesize %u", ( unsigned long ) t2p -> tiff_datasize ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Bad tablesize for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Too many pixels for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Too many rows for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Bad values for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Too many columns for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Too many tiles for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && count <= TIFF_IMG_MAX_JPEGTABLES ) { TIFFError ( TIFF2PDF_MODULE, "Too many jpeg tables for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 4 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 4 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Invalid data size for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 4 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 4 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Too many values for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 4 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 4 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Too many entries for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && count <= TIFF_MAX_JPEGTABLES ) { TIFFError ( TIFF2PDF_MODULE, "Too many jpeg tables for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Too many edges for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tables [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Too many tiles for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Bad tilesize for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 4 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 5 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Too many tiles for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && count <= TIFF_UINT32_MAX ) { TIFFError ( TIFF2P_MODULE, "Too many entries for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Bad tilesize value for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Too many errors for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && count <= TIFF_IMG_MAX_JPEGTABLES ) { TIFFError ( TIFF2PDF_MODULE, "Too many JPEG tables for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Too many bits for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 4 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 5 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Bad tilesize for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && count <= TIFF_UINT32_MAX ) { TIFFError ( TIFF2PDF_MODULE, "Too many pixels for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2P_MODULE, "Too many tiles for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 4 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 4 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Too many pages for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && count <= TIFF_MAX_JPEGTABLES ) { TIFFError ( TIFF2PDF_MODULE, "Too many JPEG tables for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Too many values for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Too many entries for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
<S2SV_ModStart> if ( count > 4 && count <= TIFF_UINT32_MAX ) { TIFFError ( TIFF2PDF_MODULE, "Too many entries for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count
<S2SV_ModStart> ( count >= 3 && count <= TIFF_UINT32_MAX ) { if ( count > 0 && count <= TIFF_UINT32_MAX ) { TIFFError ( TIFF2PDF_MODULE, "Too many entries for t2p_readwrite_pdf_image_tile, %s", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } } if ( count >=
<S2SV_ModStart> ( count >= 3 && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilelength && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetilewidth && t2p -> tiff_datasize > 3 && t2p -> tiff_tiles [ t2p -> pdf_page ]. tiles_edgetileheight ) { TIFFError ( TIFF2PDF_MODULE, "Invalid data size for t2p_readwrite_pdf_image, %s", TIFFFileName ( input ) ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( count >=
