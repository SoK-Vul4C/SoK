<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( ARCHIVE_FATAL ) ; } if ( ( p = __archive_read_ahead ( a, sizeof ( * p ), NULL ) ) == NULL ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header"
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( invalid ) ; }
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( ( p = __archive_read_ahead ( a, sizeof ( * p ), NULL ) ) == NULL ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header"
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( invalid ) ; } else { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header"
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( ( p = __archive_read_ahead ( a, sizeof ( * p ), NULL ) ) == NULL ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> of <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header"
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( ( p = __archive_read_ahead ( a, sizeof ( * p ), NULL ) ) == NULL ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ;
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; invalid : archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; }
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( invalid ) ; } else { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; }
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( ( p = __archive_read_ahead ( a, sizeof ( * p ), NULL ) ) == NULL ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ;
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; invalid : archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; <S2SV_ModEnd> } <S2SV_null>
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( ( p = __archive_read_ahead ( a, sizeof ( * p ), NULL ) ) == NULL ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header"
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; invalid : archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; invalid : archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( ARCHIVE_FATAL ) ;
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; invalid : archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; invalid : archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; }
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( invalid ) ; } else { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; }
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( ( p = __archive_read_ahead ( a, sizeof ( * p ), NULL ) ) == NULL ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> of <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( ARCHIVE_FATAL ) ; } if ( ( p = __archive_read_ahead ( a, sizeof ( * p ), NULL ) ) == NULL ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ;
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( invalid ) ; } else { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ;
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( invalid ) ; } else { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header"
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( ( p = __archive_read_ahead ( a, sizeof ( * p ), NULL ) ) == NULL ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; }
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( invalid ) ; } else { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ;
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; invalid : archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ;
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( ( p = __archive_read_ahead ( a, sizeof ( * p ), NULL ) ) == NULL ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> of <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header"
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; invalid : archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( ( p = __archive_read_ahead ( a, sizeof ( * p ), NULL ) ) == NULL ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; <S2SV_ModEnd> } <S2SV_null>
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; invalid : archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } <S2SV_ModEnd> cab -> cab_offset <S2SV_ModStart> ; invalid : archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ;
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( invalid ) ; } else { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; }
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; invalid : archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header"
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } <S2SV_ModEnd> cab -> cab_offset <S2SV_ModStart> ; invalid : archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header"
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( invalid ) ; } else { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return (
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; invalid : archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ;
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( ( p = __archive_read_ahead ( a, sizeof ( * p ), NULL ) ) == NULL ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; invalid : archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> of <S2SV_blank> CAB <S2SV_blank> header"
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( ( p = __archive_read_ahead ( a, sizeof ( * p ), NULL ) ) == NULL ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> of <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; <S2SV_ModEnd> } <S2SV_null>
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( ( p = __archive_read_ahead ( a, sizeof ( * p ), NULL ) ) == NULL ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> of <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ;
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; invalid : archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ;
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( invalid ) ; } else { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; }
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( ( p = __archive_read_ahead ( a, sizeof ( * p ), NULL ) ) == NULL ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; }
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } <S2SV_ModEnd> cab -> cab_offset <S2SV_ModStart> ; invalid : archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; invalid : archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } <S2SV_ModEnd> <S2SV_null>
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; invalid : archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ;
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( invalid ) ; } else { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( ARCHIVE_FATAL ) ;
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( invalid ) ; } else { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; }
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; invalid : archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; <S2SV_ModEnd> } <S2SV_null>
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; invalid : archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; invalid : archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header"
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( ( p = __archive_read_ahead ( a, sizeof ( * p ), NULL ) ) == NULL ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header"
<S2SV_ModStart> err ) ; archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( err ) ; } if ( len < CFHEADER_cbCabinet ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( invalid ) ; } else { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, "Couldn\'t <S2SV_blank> find <S2SV_blank> out <S2SV_blank> CAB <S2SV_blank> header" ) ; return ( ARCHIVE_FATAL ) ; }
