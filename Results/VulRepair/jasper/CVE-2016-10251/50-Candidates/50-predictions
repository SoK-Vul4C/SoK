<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { JAS_MIN ( pi -> xstep, pi -> picomp -> hs
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hs
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno - 1 ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { JAS_MIN ( pi -> xstep, pi -> picomp
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno - 1 ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp ->
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> ystep = JAS_MIN ( pi -> ystep, pi
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { JAS_MIN ( pi -> ystep, pi -> picomp -> hs
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno - 1 ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { <S2SV_ModEnd> pi -> xstep <S2SV_ModStart> -> ystep, pi -> picomp -> hs
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; } for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { JAS_MIN ( pi -> xstep, pi -> picomp ->
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MAX ( pi -> xstep, pi
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MAX ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MAX ( pi -> xstep, pi
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; } for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep,
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> hs
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MAX ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { JAS_MAX ( pi -> xstep, pi -> picomp -> hs
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno - 1 ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvl ) { pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp ->
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MAX ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno - 1 ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MAX ( pi -> xstep
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno - 1 ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> ystep = JAS_MIN ( pi -> ystep
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { JAS_MAX ( pi -> xstep, pi -> picomp -> hs
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno - 1 ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, pirlvl ) { JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { <S2SV_ModEnd> pi -> xstep <S2SV_ModStart> = JAS_MIN ( pi -> xstep
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno - 1 ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { <S2SV_ModEnd> pi -> xstep <S2SV_ModStart> -> ystep, pi -> picomp
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi ->
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { <S2SV_ModEnd> pi -> xstep <S2SV_ModStart> ) { pi -> ystep = JAS_
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MAX ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { JAS_MAX ( pi -> ystep, pi -> picomp -> hs
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno - 1 ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvl ) { JAS_MIN ( pi -> ystep, pi -> picomp -> hsamp * ( 1
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { <S2SV_ModEnd> pi -> xstep <S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno - 1 ) ) ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno - 1 ) ) ) ;
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { JAS_MAX ( pi -> ystep, pi -> picomp -> hs
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { <S2SV_ModEnd> pi -> xstep <S2SV_ModStart> -> xstep, pi -> picomp -> hs
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { <S2SV_ModEnd> pi -> xstep <S2SV_ModStart> ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; ++ rlvlno, ++ pirlvl ) { <S2SV_ModEnd> pi -> ystep <S2SV_ModStart> ) { pi -> ystep = JAS_MIN ( pi -> ystep
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno - 1 ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MAX ( pi -> xstep
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; } for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> ystep = JAS_MIN ( pi -> ystep,
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { <S2SV_ModEnd> pi -> xstep <S2SV_ModStart> ; pi -> ystep = JAS_MIN
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { <S2SV_ModEnd> pi -> xstep <S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno - 1 ) ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno - 1 ) ) ) ;
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MAX ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno - 1 ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvl ) { pi -> xstep = JAS_MAX ( pi -> xstep, pi -> picomp ->
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { <S2SV_ModEnd> pi -> xstep <S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno - 1 ) ) ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls <S2SV_ModEnd> - rlvlno
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { <S2SV_ModEnd> pi -> xstep <S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno - 1 ) ) ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls - rlvlno - 1 ) ) ) ;
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> ystep = JAS_MAX ( pi -> ystep, pi
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno - 1 ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { JAS_MIN ( pi -> ystep, pi -> picomp
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; } for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { <S2SV_ModEnd> pi -> xstep <S2SV_ModStart> -> ystep, pi -> picomp ->
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { <S2SV_ModEnd> pi -> xstep
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno - 1 ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvl ) { JAS_MIN ( pi -> ystep, pi -> picomp -> hsamp <S2SV_ModEnd> * (
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { <S2SV_ModEnd> pi -> xstep <S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno - 1 ) ) ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno - 1 ) ) ;
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { <S2SV_ModEnd> pi -> xstep <S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno - 1 ) ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls <S2SV_ModEnd> - rlvlno
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { <S2SV_ModEnd> pi -> xstep <S2SV_ModStart> ) ; pi -> ystep = JAS_
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { <S2SV_ModEnd> pi -> xstep <S2SV_ModStart> -> ystep = JAS_MIN ( pi
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { pi -> xstep = JAS_MIN ( pi -> xstep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ rlvlno ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) {
<S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls ) ) ) ; for ( rlvlno = 1, pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno, ++ pirlvl ) { <S2SV_ModEnd> pi -> xstep <S2SV_ModStart> -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - rlvlno - 1 ) ) ) ) ; pi -> ystep = JAS_MIN ( pi -> ystep, pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls <S2SV_ModEnd> - rlvlno
