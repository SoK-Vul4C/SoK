<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) ) { ctxt -> input -> cur = 0 ; ctxt -> input -> col = 0 ; } else { if ( ctxt -> input -> cur [ tlen ] == 0 ) && ( ctxt -> input -> cur [ tlen ] == 0x20 ) && ( ctxt -> input -> cur [ tlen ] == 0x20 ) ) ) { ctxt -> input -> cur = ctxt -> input -> cur [ tlen + 1 ] = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) ) { ctxt -> input -> cur = 0 ; ctxt -> input -> col = 0 ; } else { if ( ctxt -> input -> cur [ tlen ] == 0 ) && ( ctxt -> input -> cur [ tlen ] == 0x20 ) && ( ctxt -> input -> cur [ tlen ] == 0x20 ) ) ) { ctxt -> input -> cur = ctxt -> input -> cur [ tlen + 1 ] = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModEnd> ; if ( <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) ) { ctxt -> input -> cur = 0 ; ctxt -> input -> col = 0 ; } else { if ( ctxt -> input -> cur [ tlen ] == 0 && ( ctxt -> input -> cur [ tlen ] == 0x20 ) && ( ctxt -> input -> cur [ tlen ] == 0x20 ) ) ) { ctxt -> input -> cur = ctxt -> input -> cur [ tlen + 1 ] = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) ) { ctxt -> input -> cur = 0 ; ctxt -> input -> col = 0 ; } else { if ( ctxt -> input -> cur [ tlen ] == 0 && ( ctxt -> input -> cur [ tlen ] == 0x20 ) && ( ctxt -> input -> cur [ tlen ] == 0x20 ) ) { ctxt -> input -> cur = ctxt -> input -> cur [ tlen + 1 ] = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) ) { ctxt -> input -> cur = 0 ; ctxt -> input -> col = 0 ; } else { if ( ctxt -> input -> cur [ tlen ] == 0 && ( ctxt -> input -> cur [ tlen ] == 0x20 ) && ( ctxt -> input -> cur [ tlen ] == 0x20 ) ) { ctxt -> input -> cur = ctxt -> input -> cur [ tlen + 1 ] = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) ) { ctxt -> input -> cur = 0 ; ctxt -> input -> col = 0 ; } else { if ( ctxt -> input -> cur [ tlen ] == 0 && ( ctxt -> input -> cur [ tlen ] == 0x20 ) && ( ctxt -> input -> cur [ tlen ] == 0x20 ) ) ) { ctxt -> input -> cur = ctxt -> input -> cur [ tlen + 1 ] = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR ) == 0 ) ) || ( ctxt -> input -> cur [ len - 1 ] == 0x20 ) ) { if ( ctxt -> input -> cur [ len - 1 ] == 0x20 ) ) { ctxt -> input -> cur = ctxt -> input -> cur [ len - 1 ] = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) ) { ctxt -> input -> cur = 0 ; ctxt -> input -> col = 0 ; } else { if ( ctxt -> input -> cur [ tlen ] == 0 ) && ( ctxt -> input -> cur [ tlen ] == 0x20 ) && ( ctxt -> input -> cur [ tlen ] == 0x20 ) ) { ctxt -> input -> cur = ctxt -> input -> cur [ tlen + 1 ] = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModEnd> ; if ( <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) ) { ctxt -> input -> cur = 0 ; ctxt -> input -> col = 0 ; } else { if ( ctxt -> input -> cur [ tlen ] == 0 && ( ctxt -> input -> cur [ tlen ] == 0x20 ) && ( ctxt -> input -> cur [ tlen ] == 0x20 ) ) { ctxt -> input -> cur = ctxt -> input -> cur [ tlen + 1 ] = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) ) { ctxt -> input -> cur = 0 ; ctxt -> input -> col = 0 ; } else { if ( ctxt -> input -> cur [ tlen ] == 0 && ( ctxt -> input -> cur [ tlen ] == 0x20 ) && ( ctxt -> input -> cur [ tlen ] == 0x20 ) ) ) { ctxt -> input -> cur = ctxt -> input -> cur [ tlen + 1 ] = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) ) { ctxt -> input -> cur = 0 ; ctxt -> input -> col = 0 ; } else { if ( ctxt -> input -> cur [ tlen ] == 0 ) && ( ctxt -> input -> cur [ tlen ] == 0x20 ) && ( ctxt -> input -> cur [ tlen ] == 0x20 ) ) { ctxt -> input -> cur = ctxt -> input -> cur [ tlen + 1 ] = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModEnd> ; if ( <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) ) { ctxt -> input -> cur = 0 ; ctxt -> input -> col = 0 ; } else { if ( ctxt -> input -> cur [ tlen ] == 0 && ( ctxt -> input -> cur [ tlen ] == 0x20 ) && ( ctxt -> input -> cur [ tlen ] == 0x20 ) ) ) { ctxt -> input -> cur = ctxt -> input -> cur [ tlen + 1 ] = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModEnd> ; if ( <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) ) { ctxt -> input -> cur = 0 ; ctxt -> input -> col = 0 ; } else { if ( ctxt -> input -> cur [ tlen ] == 0 && ( ctxt -> input -> cur [ tlen ] == 0x20 ) && ( ctxt -> input -> cur [ tlen ] == 0x20 ) ) { ctxt -> input -> cur = ctxt -> input -> cur [ tlen + 1 ] = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModEnd> ; if ( <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 )
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR ) == 0 ) ) || ( ctxt -> input -> cur [ len - 1 ] == 0x20 ) ) { if ( ctxt -> input -> cur [ len - 1 ] == 0x20 ) ) { ctxt -> input -> cur = ctxt -> input -> cur [ len - 1 ] = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModEnd> ; if ( <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) ) { ctxt -> input -> cur = 0 ; ctxt -> input -> col = 0 ; } else { if ( ctxt -> input -> cur [ tlen ] == 0 && ( ctxt -> input -> cur [ tlen ] == 0x20 ) && ( ctxt -> input -> cur [ tlen ] == 0x20 ) ) { ctxt -> input -> cur = ctxt -> input -> cur [ tlen + 1 ] == 0x20 ) ) { ctxt -> input -> cur = ctxt -> input -> cur [ tlen + 1 ] = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; }
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) ) { ctxt -> input -> cur = ctxt -> input -> cur =
<S2SV_ModStart> * name ; int len <S2SV_ModEnd> ; if ( <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) ) ) return ;
<S2SV_ModStart> * name ; int len <S2SV_ModEnd> ; if ( <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) ) { ctxt -> input -> cur = 0 ; ctxt -> input -> col = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } } <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModEnd> ; if ( <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) ) ) { ctxt -> replaceEntities = 0 ; }
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) ) { ctxt -> input -> cur = 0 ; ctxt -> input -> col = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } } <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModEnd> ; if ( <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) ) { ctxt -> input -> cur = NULL ; ctxt -> input -> col = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } } <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DT
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) ) { ctxt -> input -> cur = 0 ; ctxt -> input -> col = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModEnd> ; if ( <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) ) { ctxt -> input -> cur = 0 ; ctxt -> input -> col = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR ) == 0 ) ) { ctxt -> input -> cur = 0 ; ctxt -> input -> col = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } } <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) ) { ctxt -> input -> cur = ctxt -> input -> cur
<S2SV_ModStart> * name ; int len <S2SV_ModEnd> ; if ( <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) ) { ctxt -> input -> cur = NULL ; ctxt -> input -> col = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) ) { ctxt -> input -> cur = ctxt -> input -> cur + len ; ctxt -> input -> col = ctxt -> input -> cur + len ;
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) ) ) { ctxt -> replaceEntities = 0 ; }
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) ) { ctxt -> input -> cur = NULL ; ctxt -> input -> col = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } } <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = 0 ; <S2SV_ModStart> 0 ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 )
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) ) ) { ctxt -> replaceEntities = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } return ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) ) { ctxt -> input -> cur = NULL ; ctxt -> input -> col = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) ) { ctxt -> input -> cur = ctxt -> input -> cur =
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) ) ) return ;
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 )
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) ) { ctxt -> input -> cur = ctxt -> input -> cur + len ; ctxt -> input -> col += tlen ; }
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) ) ) { ctxt -> replaceEntities = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) ) { ctxt -> input -> cur = 0 ; ctxt -> input -> col = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } } <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModEnd> ; if ( <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR ) == 0 ) ) { ctxt -> input -> cur = NULL ; ctxt -> input -> col = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR ) == 0 ) ) { ctxt -> input -> cur = 0 ; ctxt -> input -> col = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModEnd> ; if ( <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) ) { ctxt -> input -> cur = 0 ; ctxt -> input -> col = 0 ; } else { if ( ctxt -> input -> cur [ tlen ] == 0 && ( ctxt -> input -> cur [ tlen ] == 0x20 ) && ( ctxt -> input -> cur [ tlen ] == 0x20 ) ) { ctxt -> input -> cur = ctxt -> input -> cur [ tlen + 1 ] == 0x20 ) ) { ctxt -> input -> cur = ctxt -> input -> cur [ tlen + 1 ] = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ;
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) ) { ctxt -> input -> cur = NULL ; ctxt -> input -> col = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR_LOAD ) == 0 ) ) { ctxt -> input -> cur = ctxt -> input -> cur + len ; ctxt -> input -> col = ctxt -> input -> cur + len ; }
<S2SV_ModStart> * name ; int len <S2SV_ModEnd> ; if ( <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> input -> flags & XML_PARSE_DTDATTR ) == 0 ) ) { ctxt -> input -> cur = 0 ; ctxt -> input -> col = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = 0 ; <S2SV_ModStart> 0 ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) )
<S2SV_ModStart> * name ; int len <S2SV_ModStart> return ; } len = ctxt -> input -> len ; while ( ( len > 0 ) && ( ctxt -> input -> cur [ len <S2SV_ModEnd> ] == '>' <S2SV_ModStart> == '>' ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> replaceEntities == 0 ) ) ) { ctxt -> replaceEntities = 0 ; } } } else { if ( ctxt -> instate == XML_PARSER_EOF ) return ; } return ; } <S2SV_null> <S2SV_null> <S2SV_null>
