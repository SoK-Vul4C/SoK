<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( tif -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) m. i [ 1 ] ) ; return ( err ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) m. i [ 1 ] ) ; return ( err ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; } <S2SV_ModEnd> return ( TIFFReadDirEntryErrOK )
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; } <S2SV_ModEnd> return ( TIFFReadDirEntryErrOK
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; } return 0 <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ; } <S2SV_ModEnd> return ( TIFFReadDirEntryErrOK
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( tif -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; } <S2SV_ModEnd> return ( TIFFReadDirEntryErrOK
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( tif -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; } <S2SV_ModEnd> return ( TIFFReadDirEntryErrOK )
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ) ; } return 0 <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ; } <S2SV_ModEnd> return ( TIFFReadDirEntryErrOK )
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ; } } <S2SV_ModEnd> return ( TIFFReadDirEntryErrOK
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ; } return 0 <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( tif -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; } return 0 <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) m. i [ 1 ] ) ; return ( err ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) m. i [ 1 ] ) ; return ( err ) <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( tif -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) m. i [ 1 ] ) ; return ( err ) <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( tif -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ; } <S2SV_ModEnd> return ( TIFFReadDirEntryErrOK
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( tif -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) m. i [ 1 ] ) ; return ( err ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ; } <S2SV_ModEnd> return ( TIFFReadDirEntryErrOK
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( tif -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( m. i [ 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) m. i [ 1 ] ) ; return ( err ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ; } return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) <S2SV_ModEnd> 1 ) ; return
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { return 0.0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; } <S2SV_ModEnd> return ( TIFFReadDirEntryErrErrOK
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ) ; } <S2SV_ModEnd> return ( TIFFReadDirEntryErrOK
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ; } <S2SV_ModEnd> return ( TIFFReadDirEntryErrOK )
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; } <S2SV_ModEnd> return ( TIFFReadDirEntryErrOk
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; return ( err ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ; } return 0 <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ; } } <S2SV_ModEnd> return ( TIFFReadDirEntryErrOK )
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; } if ( value!= NULL ) * value = value ; return 0 <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) <S2SV_ModEnd> 0.0 ) ; }
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; } } <S2SV_ModEnd> return ( TIFFReadDirEntryErr
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { return 0.0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; } } <S2SV_ModEnd> return ( TIFFReadDirEntryErrOK
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; } return 0 <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; } <S2SV_ModEnd> return ( TIFFReadDirEntryErrOk )
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; } <S2SV_ModEnd> return ( TIFFReadDirEntryErrErrOK )
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ) ; } } <S2SV_ModEnd> return ( TIFFReadDirEntryErrOK
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( tif -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK && direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) m. i [ 1 ] ) ; } <S2SV_ModEnd> return ( TIFFReadDirEntryErrOK
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = 0.0 ; } <S2SV_ModEnd> return ( TIFFReadDirEntryErrOK
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( tif -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) m. i [ 1 ] ) ; } <S2SV_ModEnd> return ( TIFFReadDirEntryErrOK
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( m. i [ 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) m. i [ 1 ] ) ; return ( err ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) ) / ( double ) ( direntry -> tdir_offset. toff_long ) ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) ; } <S2SV_ModEnd> return ( TIFFReadDirEntryErrOK
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) m. i [ 1 ] ) ; return ( 0 <S2SV_ModEnd> ) ; } <S2SV_null>
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( tif -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) ( direntry -> tdir_offset. toff_long ) ; } <S2SV_ModEnd> return ( TIFFReadDirEntryErrOK
<S2SV_ModStart> 0 ] == 0 && direntry -> tif_flags & TIFF_SWAB ) { if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = 0.0 ; if ( direntry -> tif_flags & TIFF_SWAB ) TIFFSwabLong ( & offset ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else * value = ( double ) ( ( int32 ) m. i [ 0 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ) ; if ( err!= TIFFReadDirEntryErrOK ) return ( err ) ; } else { * value = ( double ) ( ( int32 ) m. i [ 1 ] ) / ( double ) direntry -> tdir_offset. toff_long ) ) ; } <S2SV_ModEnd> return ( TIFFReadDirEntryErrOK )
