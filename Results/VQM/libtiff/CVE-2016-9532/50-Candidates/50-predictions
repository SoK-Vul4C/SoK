<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * spp * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> extract <S2SV_blank> data <S2SV_blank> to <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( int ) ( imagewidth * spp * bps ) ) ; _TIFFfree ( obuf ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * spp * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( imagewidth * spp * bps ) + 7 ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * spp * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> extract <S2SV_blank> data <S2SV_blank> to <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( imagewidth * spp * bps ) + 7 ) ; _TIFFfree ( obuf ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * spp * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( int ) ( imagewidth * spp * bps ) ) ; _TIFFfree ( obuf ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * spp * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> extract <S2SV_blank> data <S2SV_blank> to <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( imagewidth * spp * bps ) + 7 ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> extract <S2SV_blank> data <S2SV_blank> to <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( imagewidth * spp * bps ) + 7 ) ; _TIFFfree ( obuf ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * spp * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> extract <S2SV_blank> data <S2SV_blank> to <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> row <S2SV_blank> %lu <S2SV_blank> col <S2SV_blank> %lu <S2SV_blank> sample", ( int ) ( imagewidth * spp * bps ) ) ; _TIFFfree ( obuf ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * spp * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( imagewidth * spp * bps ) + 7 ) ; _TIFFfree ( obuf ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( imagewidth * spp * bps ) + 7 ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * spp ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> extract <S2SV_blank> data <S2SV_blank> to <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( int ) ( imagewidth * spp * bps ) ) ; _TIFFfree ( obuf ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * bps * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( imagewidth * spp * bps ) + 7 ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> extract <S2SV_blank> data <S2SV_blank> to <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( imagewidth * spp * bps ) + 7 ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * bps * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> extract <S2SV_blank> data <S2SV_blank> to <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( imagewidth * spp * bps ) + 7 ) ; _TIFFfree ( obuf ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> extract <S2SV_blank> data <S2SV_blank> to <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( int ) ( imagewidth * spp * bps ) ) ; _TIFFfree ( obuf ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * spp ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> extract <S2SV_blank> data <S2SV_blank> to <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> row <S2SV_blank> %lu <S2SV_blank> col <S2SV_blank> %lu <S2SV_blank> sample", ( int ) ( imagewidth * spp * bps ) ) ; _TIFFfree ( obuf ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > TIFFMax ( imagewidth, src_rowsize ) ) { TIFFError ( "writeBufferToSeparateTiles", "Cannot <S2SV_blank> write <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> row <S2SV_blank> %lu, <S2SV_blank> col <S2SV_blank> %lu <S2SV_blank> sample <S2SV_blank> %d", src_rowsize, TIFFTAG_BITSPERSAMPLE, & bps ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * spp ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> extract <S2SV_blank> data <S2SV_blank> to <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( imagewidth * spp * bps ) + 7 ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * spp * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> row <S2SV_blank> %lu <S2SV_blank> col <S2SV_blank> %lu <S2SV_blank> sample", ( int ) ( imagewidth * spp * bps ) ) ; _TIFFfree ( obuf ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> extract <S2SV_blank> data <S2SV_blank> to <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> row <S2SV_blank> %lu <S2SV_blank> col <S2SV_blank> %lu <S2SV_blank> sample", ( int ) ( imagewidth * spp * bps ) ) ; _TIFFfree ( obuf ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * spp * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Cannot <S2SV_blank> write <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( imagewidth * spp * bps ) + 7 ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > TIFFMax ( imagewidth, src_rowsize ) ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> row <S2SV_blank> %lu <S2SV_blank> col <S2SV_blank> %lu <S2SV_blank> sample", 7 ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * spp ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> extract <S2SV_blank> data <S2SV_blank> to <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( imagewidth * spp * bps ) + 7 ) ; _TIFFfree ( obuf ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> extract <S2SV_blank> data <S2SV_blank> to <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> row <S2SV_blank> %lu <S2SV_blank> col <S2SV_blank> %lu <S2SV_blank> sample", ( imagewidth * spp * bps ) + 7 ) ; _TIFFfree ( obuf ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > TIFFMax ( imagewidth, src_rowsize ) ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", & tw ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * spp ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( imagewidth * spp * bps ) + 7 ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * spp * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> extract <S2SV_blank> data <S2SV_blank> to <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> row <S2SV_blank> %lu <S2SV_blank> col <S2SV_blank> %lu <S2SV_blank> sample", ( imagewidth * spp * bps ) + 7 ) ; _TIFFfree ( obuf ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( imagewidth * spp * bps ) + 7 ) ; _TIFFfree ( obuf ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * bps * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( int ) ( imagewidth * spp * bps ) ) ; _TIFFfree ( obuf ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * bps * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( imagewidth * spp * bps ) + 7 ) ; _TIFFfree ( obuf ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * spp * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> row <S2SV_blank> %lu <S2SV_blank> col <S2SV_blank> %lu <S2SV_blank> sample", ( imagewidth * spp * bps ) + 7 ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * spp * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( int ) ( imagewidth * spp * bps ) ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * bps * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> extract <S2SV_blank> data <S2SV_blank> to <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( int ) ( imagewidth * spp * bps ) ) ; _TIFFfree ( obuf ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> extract <S2SV_blank> data <S2SV_blank> to <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> row <S2SV_blank> %lu <S2SV_blank> col <S2SV_blank> %lu <S2SV_blank> sample", ( int ) ( imagewidth * bps * bps ) ) ; _TIFFfree ( obuf ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( int ) ( imagewidth * spp * bps ) ) ; _TIFFfree ( obuf ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * bps * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> extract <S2SV_blank> data <S2SV_blank> to <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( imagewidth * spp * bps ) + 7 ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> extract <S2SV_blank> data <S2SV_blank> to <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( int ) ( imagewidth * bps * bps ) ) ; _TIFFfree ( obuf ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> row <S2SV_blank> %lu <S2SV_blank> col <S2SV_blank> %lu <S2SV_blank> sample", ( imagewidth * spp * bps ) + 7 ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * spp * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> extract <S2SV_blank> data <S2SV_blank> to <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( int ) ( imagewidth * spp * bps ) + 7 ) ) ; _TIFFfree ( obuf ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * bps * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> extract <S2SV_blank> data <S2SV_blank> to <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( int ) ( imagewidth * bps * bps ) ) ; _TIFFfree ( obuf ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > TIFFMax ( imagewidth, src_rowsize ) ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> calculate <S2SV_blank> row <S2SV_blank> size <S2SV_blank> for <S2SV_blank> multiple <S2SV_blank> tiles" ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> row <S2SV_blank> %lu <S2SV_blank> col <S2SV_blank> %lu <S2SV_blank> sample", ( int ) ( imagewidth * spp * bps ) ) ; _TIFFfree ( obuf ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > TIFFMax ( imagewidth, src_rowsize ) ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> allocate/max <S2SV_blank> output <S2SV_blank> buffer" ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * spp * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Cannot <S2SV_blank> write <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( imagewidth * spp * bps ) + 7 ) ; _TIFFfree ( obuf ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * spp * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> extract <S2SV_blank> data <S2SV_blank> to <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> row <S2SV_blank> %lu <S2SV_blank> col <S2SV_blank> %lu <S2SV_blank> sample", ( imagewidth * spp * bps ) + 7 ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * bps * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> row <S2SV_blank> %lu <S2SV_blank> col <S2SV_blank> %lu <S2SV_blank> sample", ( imagewidth * spp * bps ) + 7 ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * bps * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> extract <S2SV_blank> data <S2SV_blank> to <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> row <S2SV_blank> %lu <S2SV_blank> col <S2SV_blank> %lu <S2SV_blank> sample", ( int ) ( imagewidth * spp * bps ) ) ; _TIFFfree ( obuf ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> extract <S2SV_blank> data <S2SV_blank> to <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> row <S2SV_blank> %lu <S2SV_blank> col <S2SV_blank> %lu <S2SV_blank> sample", ( imagewidth * spp * bps ) + 7 ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * bps * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> extract <S2SV_blank> data <S2SV_blank> to <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> row <S2SV_blank> %lu <S2SV_blank> col <S2SV_blank> %lu <S2SV_blank> sample", ( int ) ( imagewidth * bps * bps ) ) ; _TIFFfree ( obuf ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * spp ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> extract <S2SV_blank> data <S2SV_blank> to <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> row <S2SV_blank> %lu <S2SV_blank> col <S2SV_blank> %lu <S2SV_blank> sample", ( imagewidth * spp * bps ) + 7 ) ; return 1 ; }
<S2SV_ModStart> bps ) ; if ( src_rowsize > imagewidth * spp * bps ) { TIFFError ( "writeBufferToSeparateTiles", "Unable <S2SV_blank> to <S2SV_blank> extract <S2SV_blank> data <S2SV_blank> to <S2SV_blank> tile <S2SV_blank> at <S2SV_blank> %lu <S2SV_blank> %lu <S2SV_blank> sample", ( int ) ( imagewidth * spp * bps ) ) ; return 1 ; }
