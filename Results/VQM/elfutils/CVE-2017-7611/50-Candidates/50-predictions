<S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> { ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx, section_name
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> { ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" ), <S2SV_ModStart> { ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" ), <S2SV_ModStart> { ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" ), <S2SV_ModStart> { ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" ), <S2SV_ModStart> { ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" )
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> { ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx, section_name
<S2SV_ModStart> { ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" ), <S2SV_ModStart> ) ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" ), <S2SV_ModStart> ) ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" ), <S2SV_ModStart> ) ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" ), <S2SV_ModStart> ) ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" )
<S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> { ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" ), <S2SV_ModStart> { ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" ), <S2SV_ModStart> { ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" ), <S2SV_ModStart> { ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" ), <S2SV_ModStart> { ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" ),
<S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> file <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> { ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx, section_name
<S2SV_ModStart> { ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> file <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx, section_name
<S2SV_ModStart> { ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" ), idx, section_name ( ebl, idx ) ) ; else if ( symshdr == NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> ) { ERROR ( <S2SV_ModEnd> "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" ), idx <S2SV_ModStart> ) ERROR ( <S2SV_ModEnd> "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" ), idx <S2SV_ModStart> ) ERROR ( <S2SV_ModEnd> "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" ), idx <S2SV_ModStart> ) ERROR ( <S2SV_ModEnd> "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" ), idx <S2SV_ModStart> ) ERROR ( <S2SV_ModEnd> "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" ), idx
<S2SV_ModStart> { ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd> ), idx, <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx, section_name
<S2SV_ModStart> { ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" ), <S2SV_ModStart> { ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" ), <S2SV_ModStart> { ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" ), <S2SV_ModStart> { ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" ), <S2SV_ModStart> ; ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" )
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> file <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> { ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd> ), idx, <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx, section_name
<S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> { ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" ), idx, section_name ( ebl, idx ) ) ; else if ( symshdr == NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> { ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx, section_name
<S2SV_ModStart> { ERROR ( <S2SV_ModEnd> "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" ), <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> { ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx, section_name
<S2SV_ModStart> { ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx, section_name
<S2SV_ModStart> { ERROR ( <S2SV_ModEnd> "%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" ), <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> { ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" ), <S2SV_ModStart> { ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" ), <S2SV_ModStart> { ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" ), <S2SV_ModStart> { ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" ), <S2SV_ModStart> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> { ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd> ), idx, <S2SV_ModStart> { ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" ), idx, section_name ( ebl, idx ) ) ; else if ( symshdr == NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" ), idx, section_name ( ebl, idx ) ) ; else if ( symshdr == NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" ), idx, section_name ( ebl, idx ), shdr -> sh_link ) ; else if ( symshdr -> sh_entsize!= sizeof ( Elf32_
<S2SV_ModStart> { ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd> ), idx, <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd> ), idx, <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd> ), idx, <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> { ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" ), <S2SV_ModStart> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" ), idx, section_name ( ebl, idx ) ) ; else if ( symshdr == NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" ), idx, section_name ( ebl, idx ) ) ; else if ( symshdr == NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ), shdr -> sh_link ) ; else if ( symshdr -> sh_entsize!= sizeof ( Elf32_Word ) ) ERROR
<S2SV_ModStart> { ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx, section_name
<S2SV_ModStart> ) { ERROR ( <S2SV_ModEnd> "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" ), idx <S2SV_ModStart> ) ERROR ( <S2SV_ModEnd> "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" ), idx <S2SV_ModStart> ) ERROR ( <S2SV_ModEnd> "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" ), idx <S2SV_ModStart> ) ERROR ( <S2SV_ModEnd> "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" ), idx <S2SV_ModStart> ) ERROR ( <S2SV_ModEnd> "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n", idx
<S2SV_ModStart> { ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" ) <S2SV_ModStart> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" ), idx, section_name ( ebl, idx ) ) ; else if ( symshdr == NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" ) <S2SV_ModStart> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> { ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" ), idx, section_name ( ebl, idx ) ) ; else if ( symshdr == NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, section_name
<S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> %2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> { ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, section_name
<S2SV_ModStart> { ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" ), idx, section_name ( ebl, idx ) ) ; else if ( symshdr == NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd> ), idx
<S2SV_ModStart> { ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" ), <S2SV_ModStart> ) ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" ), <S2SV_ModStart> ) ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" ), <S2SV_ModStart> ) ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" ), <S2SV_ModStart> ) ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" ),
<S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd> ), idx <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> { ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" ), <S2SV_ModStart> { ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" ), <S2SV_ModStart> { ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" ), <S2SV_ModStart> { ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" ), <S2SV_ModStart> ; ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" ),
<S2SV_ModStart> { ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" ), <S2SV_ModStart> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" ), idx, section_name ( ebl, idx ) ) ; else if ( symshdr == NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" ), idx, section_name ( ebl, idx ) ) ; else if ( symshdr == NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" ), idx, section_name ( ebl, idx ), shdr -> sh_link ) ; else if ( symshdr -> sh_entsize!= sizeof ( Elf32_Word ) ) ERROR
<S2SV_ModStart> { ERROR ( gettext <S2SV_ModEnd> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" ) <S2SV_ModStart> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" ), idx, section_name ( ebl, idx ) ) ; else if ( symshdr == NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" ), idx, section_name ( ebl, idx ) ) ; else if ( symshdr == NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ), shdr -> sh_link ) ; else if ( symshdr -> sh_entsize!= sizeof ( Elf32_Word ) ) ERROR
