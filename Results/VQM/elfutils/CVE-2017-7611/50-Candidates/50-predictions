<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> El
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; Elf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sym_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; Elf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sym_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ) ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; Elf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ) ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank>
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ), shdr -> sh_link <S2SV_ModEnd> ) ; if <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank>
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_SCn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> El
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank>
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; Elf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ), shdr -> sh_link <S2SV_ModEnd> ) ; if <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_SCn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; Elf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; Elf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> El
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" ), idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank>
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ) ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> El
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; Elf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" ), idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> El
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; Elf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32
<S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; Elf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ) ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_type ) ; if ( symshdr == NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\
<S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32_Word\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" ), idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; Elf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" ), idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank>
<S2SV_ModStart> { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf
<S2SV_ModStart> { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; Elf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> El
<S2SV_ModStart> { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; Elf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; Elf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_SCn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> Elf32
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n" ), idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" ), idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> El
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" ), idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ) ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank>
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; Elf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ) ) ; else
<S2SV_ModStart> { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank>
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ), shdr -> sh_link ) ; Elf_Data * data = elf_getdata ( symscn, NULL ) ; if ( data == NULL )
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; Elf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ), shdr -> sh_link ) ; Elf_Data * data = elf_getdata ( symscn, NULL ) ; if ( data == NULL )
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> must <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> El
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_SCn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ) ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match
<S2SV_ModStart> { ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr == <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr -> <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank>
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ), shdr -> sh_link ) ; Elf_Data * symdata = elf_getdata ( symscn, NULL ) ; if (
<S2SV_ModStart> { ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; Elf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr == <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr -> <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; Elf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n" ), idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ) ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> only <S2SV_blank> relocatable <S2SV_blank> files <S2SV_blank> can <S2SV_blank> have <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> section <S2SV_blank> not <S2SV_blank> for <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; else <S2SV_ModEnd> if ( symshdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> sh_link <S2SV_blank> extended <S2SV_blank> section <S2SV_blank> index <S2SV_blank> [%2d] <S2SV_blank> is <S2SV_blank> invalid\\n", idx, section_name ( ebl, idx ) ) ; else
