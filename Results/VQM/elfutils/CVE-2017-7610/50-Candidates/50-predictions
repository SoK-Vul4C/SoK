<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> ) { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n" <S2SV_ModEnd>, idx, section_name
<S2SV_ModStart> { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> { ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> { ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ; } if ( symshdr -> sh_type == SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n" <S2SV_ModEnd>, idx, section_name
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_type ) ; if ( symshdr -> sh_type!= SHT_SYMTAB <S2SV_ModEnd> ) ERROR ( <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; if ( shdr -> sh_info >= symshdr -> sh_size / gelf_fsize ( ebl -> elf, ELF_T_SYM, 1, EV_CURRENT ) ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n", idx, section_name ( ebl, idx )
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else { if ( symshdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ;
<S2SV_ModStart> { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> { ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; if ( symshdr -> sh_info >= symshdr -> sh_size / gelf_fsize ( ebl -> elf, ELF_T_SYM, 1, EV_CURRENT ) ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n", idx, section_name ( ebl, idx )
<S2SV_ModStart> ) { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; if ( symshdr -> sh_info >= symshdr -> sh_size / gelf_fsize ( ebl -> elf, ELF_T_SYM, 1, EV_CURRENT ) ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n", idx, section_name ( ebl, idx )
<S2SV_ModStart> { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else { if ( symshdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else
<S2SV_ModStart> { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else { if ( symshdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ;
<S2SV_ModStart> { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_type ) ; if ( symshdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else { if ( ehdr -> sh_type == SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ;
<S2SV_ModStart> { ERROR ( "%s: <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", __func__, idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else { if ( symshdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else { if ( symshdr -> sh_info!= SHT_SYMT
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_type ) ; if ( symshdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else { if ( ehdr -> sh_type == SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ;
<S2SV_ModStart> { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; if ( symshdr -> sh_info >= symshdr -> sh_size / gelf_fsize ( ebl -> elf, ELF_T_SYM, 1, EV_CURRENT ) ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n", idx, section_name ( ebl, idx ) )
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; if ( symshdr -> sh_info >= symshdr -> sh_size / gelf_fsize ( ebl -> elf, ELF_T_SYM, 1, EV_CURRENT ) ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n", idx, section_name ( ebl, idx ) )
<S2SV_ModStart> { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n" ), idx, section_name ( ebl, idx ) ) ; if ( symshdr -> sh_info >= symshdr -> sh_size / gelf_fsize ( ebl -> elf, ELF_T_SYM, 1, EV_CURRENT ) ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n", idx, section_name ( ebl, idx ) )
<S2SV_ModStart> ) { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; if ( symshdr -> sh_info >= symshdr -> sh_size / gelf_fsize ( ebl -> elf, ELF_T_SYM, 1, EV_CURRENT ) ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n", idx, section_name ( ebl, idx ) )
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else { if ( symshdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_type ) ; if ( symshdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else { if ( ehdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ;
<S2SV_ModStart> { ERROR ( "%s: <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", __func__, idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else { if ( symshdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; } else { if ( symshdr -> sh_info!= SHT_SY
<S2SV_ModStart> ) { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n" <S2SV_ModEnd>, idx, section_name
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_type ) ; if ( symshdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else { if ( ehdr -> sh_type == SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) )
<S2SV_ModStart> ) { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = gelf_getshdr ( symscn, NULL ) ; if ( symshdr -> sh_type!= SHT_SYMTAB <S2SV_ModEnd> ) ERROR ( gettext <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; if ( shdr -> sh_info >= symshdr -> sh_size / gelf_fsize ( ebl -> elf, ELF_T_SYM, 1, EV_CURRENT ) ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank>
<S2SV_ModStart> { ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> { ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ; } else { if ( symshdr -> sh_type == SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n" <S2SV_ModEnd>, idx, section_name
<S2SV_ModStart> { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_type ) ; if ( symshdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else { if ( ehdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ;
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = gelf_getshdr ( symscn, NULL ) ; if ( symshdr -> sh_type!= SHT_SYMTAB <S2SV_ModEnd> ) ERROR ( <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; if ( shdr -> sh_info >= symshdr -> sh_size / gelf_fsize ( ebl -> elf, ELF_T_SYM, 1, EV_CURRENT ) ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank>
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_type ) ; if ( symshdr -> sh_type!= SHT_SYMTAB <S2SV_ModEnd> ) ERROR ( <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; if ( shdr -> sh_info >= symshdr -> sh_size / gelf_fsize ( ebl -> elf, ELF_T_SYM, 1, EV_CURRENT ) ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n", idx, section_name ( ebl, idx
<S2SV_ModStart> { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n" ), idx, section_name ( ebl, idx ) ) ; if ( symshdr -> sh_info >= symshdr -> sh_size / gelf_fsize ( ebl -> elf, ELF_T_SYM, 1, EV_CURRENT ) ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n", idx, section_name ( ebl, idx )
<S2SV_ModStart> ) { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n" <S2SV_ModEnd>, idx, section_name <S2SV_ModStart> ELF_T_SYM ) ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n" <S2SV_ModEnd>, idx, section_name
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_type ) ; if ( symshdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else { if ( ehdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) )
<S2SV_ModStart> ) { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = gelf_getshdr ( symscn, NULL ) ; if ( symshdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else <S2SV_ModEnd> if ( shdr -> <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n", idx, section_name ( ebl, idx ) )
<S2SV_ModStart> { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_type ) ; if ( symshdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else { if ( ehdr -> sh_type == SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) )
<S2SV_ModStart> { ERROR ( "%s: <S2SV_blank> section <S2SV_blank> group <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", __func__, idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else { if ( symshdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else { if ( symshdr -> sh_info!= SHT_SYMT
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_type ) ; if ( symshdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else <S2SV_ModEnd> { if ( <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n", idx, section_name ( ebl, idx ) ) ; if ( symshdr -> sh_info >= symshdr -> sh_size / gelf_fsize ( ebl -> elf, ELF_T
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_type ) ; if ( symshdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else <S2SV_ModEnd> { if ( <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n", idx, section_name ( ebl, idx ) ) ; else
<S2SV_ModStart> { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_type ) ; if ( symshdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else <S2SV_ModEnd> { if ( <S2SV_ModStart> ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n", idx, section_name ( ebl, idx ) ) ; if ( symshdr -> sh_info >= symshdr -> sh_size / gelf_fsize ( ebl -> elf, ELF_T_SY
<S2SV_ModStart> { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; if ( symshdr -> sh_info >= symshdr -> sh_size / gelf_fsize ( ebl -> elf, ELF_T_SYM, 1, EV_CURRENT ) ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n", idx, section_name ( ebl, idx )
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = gelf_getshdr ( symscn, NULL ) ; if ( symshdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n", idx, section_name ( ebl, idx ) )
<S2SV_ModStart> ) { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_type ) ; if ( symshdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else { if ( ehdr -> sh_type == SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ;
<S2SV_ModStart> { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = gelf_getshdr ( symscn, NULL ) ; if ( symshdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else <S2SV_ModEnd> if ( shdr <S2SV_ModStart>!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name (
<S2SV_ModStart> { ERROR ( "%s: <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", __func__, idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else { if ( symshdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else { if ( symshdr -> sh_info >= symshdr -> sh
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> group <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> ) { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = gelf_getshdr ( symscn, NULL ) ; if ( symshdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else <S2SV_ModEnd> if ( shdr -> <S2SV_ModStart> ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n", idx, section_name ( ebl, idx )
<S2SV_ModStart> { ERROR ( "%s: <S2SV_blank> section <S2SV_blank> group <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", __func__, idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = NULL ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else { if ( symshdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; } else { if ( symshdr -> sh_info!= SHT_SY
<S2SV_ModStart> ) { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_type ) ; if ( symshdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else { if ( ehdr -> sh_type == SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) )
<S2SV_ModStart> { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_type ) ; if ( symshdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else { if ( ehdr -> sh_type == SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n" ), idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ;
<S2SV_ModStart> { ERROR ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_link ) ; GElf_Shdr * symshdr = gelf_getshdr ( symscn, NULL ) ; if ( symshdr -> sh_type!= SHT_SYMTAB <S2SV_ModEnd> ) ERROR ( <S2SV_ModStart> ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ) ) ; if ( shdr -> sh_info >= symshdr -> sh_size / gelf_fsize ( ebl -> elf, ELF_T_SYM, 1, EV_CURRENT ) ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sym <S2SV_blank> link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n" <S2SV_ModEnd>, idx, <S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> invalid <S2SV_blank> symbol <S2SV_blank> index <S2SV_blank> in <S2SV_blank> sh_info\\n" <S2SV_ModEnd>, idx,
<S2SV_ModStart> ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> groups <S2SV_blank> only <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> relocatable <S2SV_blank> object <S2SV_blank> files\\n", idx, section_name ( ebl, idx ) ) ; return ; } Elf_Scn * symscn = elf_getscn ( ebl -> elf, shdr -> sh_type ) ; if ( symshdr -> sh_type!= SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n", idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) ) ; else { if ( ehdr -> sh_type == SHT_SYMTAB ) ERROR ( gettext ( "\\n <S2SV_blank> section <S2SV_blank> [%2d] <S2SV_blank> \'%s\': <S2SV_blank> section <S2SV_blank> reference <S2SV_blank> in <S2SV_blank> sh_link <S2SV_blank> is <S2SV_blank> no <S2SV_blank> symbol <S2SV_blank> table\\n" ), idx, section_name ( ebl, idx ), elf_errmsg ( - 1 ) )
