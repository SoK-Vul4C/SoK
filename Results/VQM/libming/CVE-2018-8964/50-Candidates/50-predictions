<S2SV_ModStart> case PUSH_CONSTANT : <S2SV_ModEnd> t = malloc <S2SV_ModStart> = malloc ( act -> p. Constant8 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case PUSH_CONSTANT16 : <S2SV_ModEnd> t = malloc <S2SV_ModStart> = malloc ( act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> break ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> case PUSH_CONSTANT : <S2SV_ModEnd> t = malloc <S2SV_ModStart> = malloc ( strlen ( act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case PUSH_CONSTANT16 : <S2SV_ModEnd> t = malloc <S2SV_ModStart> = malloc ( strlen ( act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> break ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext (
<S2SV_ModStart> case PUSH_CONSTANT : <S2SV_ModEnd> t = malloc <S2SV_ModStart> = malloc ( strlen ( act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case PUSH_CONSTANT16 : <S2SV_ModEnd> t = malloc <S2SV_ModStart> = malloc ( strlen ( act -> p. Constant16 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> break ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant8 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; return t ; case 12 : case 11 : case PUSH_VARIABLE : return act -> p. String ; default : fprintf ( stderr, " <S2SV_blank> <S2SV_blank> Can\'t <S2SV_blank> get <S2SV_blank> string <S2SV_blank> for <S2SV_blank> type: <S2SV_blank> %d\\n", act -> Type ) ; break ; } }
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> } return t ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; return t ; case 12 : case 11 : case PUSH_VARIABLE : return act -> p. String ; default : fprintf ( stderr, " <S2SV_blank> <S2SV_blank> Can\'t <S2SV_blank> get <S2SV_blank> string <S2SV_blank> for <S2SV_blank> type: <S2SV_blank> %d\\n", act -> Type ) ; break ; } }
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> break ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> case PUSH_CONSTANT : <S2SV_ModEnd> pool [ act <S2SV_ModStart> = malloc ( act -> p. Constant8 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case PUSH_CONSTANT16 : <S2SV_ModEnd> pool [ act <S2SV_ModStart> act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] <S2SV_ModEnd> ) ; return
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return
<S2SV_ModStart> case PUSH_CONSTANT : t = safe_calloc <S2SV_ModEnd> ( strlenext ( act <S2SV_ModStart> case PUSH_CONSTANT16 : t = safe_calloc <S2SV_ModEnd> ( strlenext ( act <S2SV_ModStart> act -> p. Constant16 <S2SV_ModEnd> ) + 3 ) <S2SV_ModStart> case PUSH_STRING : t = safe_calloc <S2SV_ModEnd> ( strlenext ( act <S2SV_ModStart> act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, "\'" <S2SV_ModEnd> ) ; return t <S2SV_ModStart> case PUSH_CONSTANT16 : t = safe_calloc <S2SV_ModEnd> ( strlenext ( act <S2SV_ModStart> act -> p. Constant16 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return t
<S2SV_ModStart> case PUSH_CONSTANT : <S2SV_ModEnd> t = malloc <S2SV_ModStart> = malloc ( strlen ( act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case PUSH_CONSTANT16 : <S2SV_ModEnd> t = malloc <S2SV_ModStart> = malloc ( strlen ( act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> break ; } }
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> } return t ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> case PUSH_CONSTANT : t = safe_calloc <S2SV_ModEnd> ( strlenext ( act <S2SV_ModStart> case PUSH_CONSTANT16 : t = safe_calloc <S2SV_ModEnd> ( strlenext ( act <S2SV_ModStart> act -> p. Constant16 <S2SV_ModEnd> ) + 3 ) <S2SV_ModStart> case PUSH_STRING : t = safe_calloc <S2SV_ModEnd> ( strlenext ( act <S2SV_ModStart> act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, "\'" <S2SV_ModEnd> ) ; return t <S2SV_ModStart> case PUSH_CONSTANT16 : t = safe_calloc <S2SV_ModEnd> ( strlenext ( act <S2SV_ModStart> act -> p. Constant16 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ]
<S2SV_ModStart> case PUSH_CONSTANT : <S2SV_ModEnd> t = malloc <S2SV_ModStart> = malloc ( strlen ( act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case PUSH_CONSTANT16 : <S2SV_ModEnd> t = malloc <S2SV_ModStart> = malloc ( strlen ( act -> p. Constant16 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> break ; } }
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant8 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> } return t ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant8 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> act -> p. Constant16 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, "\'" <S2SV_ModEnd> ) ; return
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> act -> p. Constant16 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant8 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, "\'" <S2SV_ModEnd> ) ; return
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> } return t ;
<S2SV_ModStart> case PUSH_CONSTANT : t = safe_calloc <S2SV_ModEnd> ( strlenext ( act <S2SV_ModStart> case PUSH_CONSTANT16 : t = safe_calloc <S2SV_ModEnd> ( strlenext ( act <S2SV_ModStart> act -> p. Constant16 <S2SV_ModEnd> ) + 3 ) <S2SV_ModStart> case PUSH_STRING : t = safe_calloc <S2SV_ModEnd> ( strlenext ( act <S2SV_ModStart> act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, "\'" <S2SV_ModEnd> ) ; return t <S2SV_ModStart> case PUSH_CONSTANT16 : t = safe_calloc <S2SV_ModEnd> ( strlenext ( act <S2SV_ModStart> act -> p. Constant16 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, "\'" <S2SV_ModEnd> ) ; return t
<S2SV_ModStart> case PUSH_CONSTANT : t = safe_calloc <S2SV_ModEnd> ( strlenext ( act <S2SV_ModStart> case PUSH_CONSTANT16 : t = safe_calloc <S2SV_ModEnd> ( strlenext ( act <S2SV_ModStart> act -> p. Constant16 <S2SV_ModEnd> ) + 3 ) <S2SV_ModStart> case PUSH_STRING : t = safe_calloc <S2SV_ModEnd> ( strlenext ( act <S2SV_ModStart> act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, "\'" <S2SV_ModEnd> ) ; return t <S2SV_ModStart> case PUSH_CONSTANT16 : t = safe_calloc <S2SV_ModEnd> ( strlenext ( act <S2SV_ModStart> act -> p. Constant16 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] <S2SV_ModEnd> ) ; return t
<S2SV_ModStart> case PUSH_CONSTANT : <S2SV_ModEnd> t = malloc <S2SV_ModStart> = malloc ( strlen ( act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcpy ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case PUSH_CONSTANT16 : <S2SV_ModEnd> t = malloc <S2SV_ModStart> = malloc ( strlen ( act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> break ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant8 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; return t ; case 12 : case 11 : case PUSH_VARIABLE : return act -> p. String ; default : fprintf ( stderr, " <S2SV_blank> <S2SV_blank> Can\'t <S2SV_blank> get <S2SV_blank> string <S2SV_blank> for <S2SV_blank> type: <S2SV_blank> %d\\n", act -> Type ) ; break ; } return t ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> case PUSH_CONSTANT : <S2SV_ModEnd> t = malloc <S2SV_ModStart> = malloc ( strlen ( act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case PUSH_CONSTANT16 : <S2SV_ModEnd> t = malloc <S2SV_ModStart> = malloc ( strlen ( act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> break ; } } free ( act -> p ) ;
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] <S2SV_ModEnd> ) ; return
<S2SV_ModStart> case PUSH_CONSTANT : <S2SV_ModEnd> t = malloc <S2SV_ModStart> = malloc ( strlen ( act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case PUSH_CONSTANT16 : <S2SV_ModEnd> t = malloc <S2SV_ModStart> = malloc ( strlen ( act -> p. Constant16 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> break ; } } free ( act -> p ) ;
<S2SV_ModStart> case PUSH_CONSTANT : <S2SV_ModEnd> pool [ act <S2SV_ModStart> t = malloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> t = malloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> act -> p. Constant8 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case PUSH_CONSTANT16 : <S2SV_ModEnd> t = malloc <S2SV_ModStart> t = malloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; return t ; case 12 : case 11 : case PUSH_VARIABLE : return act -> p. String ; default : fprintf ( stderr, " <S2SV_blank> <S2SV_blank> Can\'t <S2SV_blank> get <S2SV_blank> string <S2SV_blank> for <S2SV_blank> type: <S2SV_blank> %d\\n", act -> Type ) ; break ; } }
<S2SV_ModStart> case PUSH_CONSTANT : <S2SV_ModEnd> t = malloc <S2SV_ModStart> = malloc ( act -> p. Constant8 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case PUSH_CONSTANT16 : <S2SV_ModEnd> t = malloc <S2SV_ModStart> = malloc ( act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> break ; } }
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant8 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> break ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; return t ; case 12 : case 11 : case PUSH_VARIABLE : return act -> p. String ; default : fprintf ( stderr, " <S2SV_blank> <S2SV_blank> Can\'t <S2SV_blank> get <S2SV_blank> string <S2SV_blank> for <S2SV_blank> type: <S2SV_blank> %d\\n", act -> Type ) ; break ; } return t ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> case PUSH_CONSTANT : <S2SV_ModEnd> t = malloc <S2SV_ModStart> = malloc ( strlen ( act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case PUSH_CONSTANT16 : <S2SV_ModEnd> t = malloc <S2SV_ModStart> = malloc ( strlen ( act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] <S2SV_ModEnd> ) ; return <S2SV_ModStart> break ; } } free ( act -> p ) ;
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; strcpy ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> } return t ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, "\'" <S2SV_ModEnd> ) ; return
<S2SV_ModStart> case PUSH_CONSTANT : <S2SV_ModEnd> act -> p <S2SV_ModStart> act -> p. Constant8 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case PUSH_CONSTANT16 : t = malloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] <S2SV_ModEnd> ) ; return
<S2SV_ModStart> case PUSH_CONSTANT : <S2SV_ModEnd> t = malloc <S2SV_ModStart> = malloc ( strlen ( act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case PUSH_CONSTANT16 : <S2SV_ModEnd> t = malloc <S2SV_ModStart> = malloc ( strlen ( act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> } return t ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant8 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; return t ; case 12 : case 11 : case PUSH_VARIABLE : return act -> p. String ; default : fprintf ( stderr, " <S2SV_blank> <S2SV_blank> Can\'t <S2SV_blank> get <S2SV_blank> string <S2SV_blank> for <S2SV_blank> type: <S2SV_blank> %d\\n", act -> Type ) ; break ; } } }
<S2SV_ModStart> case PUSH_CONSTANT : <S2SV_ModEnd> t = malloc <S2SV_ModStart> = malloc ( strlen ( act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case PUSH_CONSTANT16 : <S2SV_ModEnd> t = malloc <S2SV_ModStart> = malloc ( strlen ( act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] <S2SV_ModEnd> ) ; return <S2SV_ModStart> break ; } }
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; strcpy ( t, "\'" <S2SV_ModEnd> ) ; return
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant8 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> } return t ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> break ; } } free ( t ) ;
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant8 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; return t ; case 12 : case 11 : case PUSH_VARIABLE : return act -> p. String ; default : fprintf ( stderr, " <S2SV_blank> <S2SV_blank> Can\'t <S2SV_blank> get <S2SV_blank> string <S2SV_blank> for <S2SV_blank> type: <S2SV_blank> %d\\n", act ->Type ) ; break ; } }
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ]
<S2SV_ModStart> case PUSH_CONSTANT : <S2SV_ModEnd> pool [ act <S2SV_ModStart> p. Constant8 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> t = malloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] <S2SV_ModEnd> ) ; return
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; break <S2SV_ModStart> } return t ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant8 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; return t ; case 12 : case 11 : case PUSH_VARIABLE : return act -> p. String ; default : fprintf ( stderr, " <S2SV_blank> <S2SV_blank> Can\'t <S2SV_blank> get <S2SV_blank> string <S2SV_blank> for <S2SV_blank> type: <S2SV_blank> %d\\n", act -> Type ) ; break ; } return t ; default : fprintf ( stderr, " <S2SV_blank> <S2SV_blank> Can\'t <S2SV_blank> get <S2SV_blank> string <S2SV_blank> for <S2SV_blank> type: <S2SV_blank> %d\\n", act -> Type ) ; break ; } }
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> act -> p. Constant8 + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> act -> p. Constant16 + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return
<S2SV_ModStart> case PUSH_CONSTANT : <S2SV_ModEnd> t = malloc <S2SV_ModStart> = malloc ( strlen ( act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case PUSH_CONSTANT16 : <S2SV_ModEnd> t = malloc <S2SV_ModStart> = malloc ( strlen ( act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] <S2SV_ModEnd> ) ; return
<S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( act -> p. Constant8 ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant8 ] ) ; strcat ( t, "\'" <S2SV_ModEnd> ) ; return <S2SV_ModStart> : t = safe_calloc <S2SV_ModEnd> ( strlenext ( <S2SV_ModStart> ( strlenext ( pool [ act -> p. Constant16 ] ) + 3 ) ; strcpy ( t, "\'" ) ; strcatext ( t, pool [ act -> p. Constant16 ] ) ; return t ; case 12 : case 11 : case PUSH_VARIABLE : return act -> p. String ; default : fprintf ( stderr, " <S2SV_blank> <S2SV_blank> Can\'t <S2SV_blank> get <S2SV_blank> string <S2SV_blank> for <S2SV_blank> type: <S2SV_blank> %d\\n", act ->Type ) ; break ; } }
