<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> ZoneData == NULL ) return
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) <S2SV_ModEnd> ; for (
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == 0 ) { table -> NumZoneData = 0 ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> ZoneData == NULL ) { return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == 0 ) { break ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> ZoneData == NULL ) { break ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> ZoneData == NULL ) { table -> NumZoneData = 0 ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == 0 ) { return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == 0 ) return
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> ZoneData == NULL ) return ;
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == NULL ) return
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == 0 ) { table -> NumZoneData = 0 ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == 0 ) { table -> NumZoneData = 0 ; 0 ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == 0 ) { table -> NumZoneData = 0 ; break ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == 0 ) { table -> NumZoneData = SWF_ZONEDATA_MAX_SIZE ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == NULL ) { return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> ZoneData == NULL ) { LOG_ERR ( "ParseSWF_ZONERECORD: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> SWF_ZONERECORD <S2SV_blank> file: <S2SV_blank> %s", file ) ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == 0 ) { malloc ( SWF_ZONEDATA * sizeof ( struct SWF_ZONEDATA ) ) ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == 0 ) { f -> namelen = SWF_ZONERECORD_MAX_SIZE ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == 0 ) { table -> NumZoneData = sizeof ( struct SWF_ZONEDATA ) ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == 0 ) { struct SWF_ZONEDATA * zone = malloc ( sizeof ( struct SWF_ZONEDATA ) ) ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == 0 ) { errWriteFile ( f, SWF_ERR_FILE_FORMAT, "SWF_ZONERECORD: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> SWF_ZONERECORD\\n" ) ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == 0 ) return ;
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> ZoneData == NULL ) { LOG_ERR ( "ParseSWF_ZONERECORD: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> SWF_ZONERECORD <S2SV_blank> file: <S2SV_blank> %s\\n", file ) ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == 0 ) { for ( i = 0 ; i < table -> NumZoneData ; i ++ ) <S2SV_ModEnd> parseSWF_ZONEDATA ( f
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == 0 ) { f -> namelen = SWF_MAX_ZONERS ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == 0 ) { f -> namelen = SWF_ZONEDATA_MAXSIZE ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == 0 ) { errWriteLog ( SWF_ERR_FILE, "SWF_ZONERECORD: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> SWF_ZONERECORD\\n" ) ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == 0 ) { table -> NumZoneData = SWF_ZONEDATA_MAXSIZE ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == NULL ) { table -> NumZoneData = SWF_ZONEDATA_MAX_SIZE ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> ZoneData == NULL ) { table -> NumZoneData = SWF_ZONEDATA_MAX_SIZE ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> f ) ; if ( table -> NumZoneData == 0 ) { table -> NumZoneData = 0 ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) <S2SV_ModEnd> ; table ->
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == 0 ) { LOG_ERR ( "ParseSWF_ZONERECORD: <S2SV_blank> Bad <S2SV_blank> zone <S2SV_blank> data <S2SV_blank> in <S2SV_blank> SWF_ZONERECORD\\n" ) ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> f ) ; if ( table -> ZoneData == NULL ) return
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == NULL ) { break ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> ZoneData == NULL ) { LOG_ERR ( "ParseSWF_ZONERECORD: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> SWF_ZONERECORD <S2SV_blank> file: <S2SV_blank> %s", f ) ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == NULL ) { table -> NumZoneData = 0 ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == 0 ) { f -> namelen = SWF_MAX_ZONERECORD ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> ZoneData == NULL ) { LOG_ERR ( "ParseSWF_ZONERECORD: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> SWF_ZONERECORD: <S2SV_blank> %s", file ) ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> ZoneData == NULL ) { LOG_ERR ( "ParseSWF_ZONERECORD: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> SWF_ZONERECORD\\n" ) ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == 0 ) { f -> namelen = SWF_ZONERECORD_MAXSIZE ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == 0 ) { errWriteLog ( SWF_ERR_FILE, "SWF_ZONERECORD: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> SWF_ZONERECORD <S2SV_blank> file: <S2SV_blank> %s", file ) ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == 0 ) { table -> NumZoneData = 0 ; continue ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == 0 ) { f -> namelen = SWF_ZONEDATA_MAX_SIZE ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> ZoneData == NULL ) { for ( i = 0 ; i < table -> NumZoneData ; i ++ ) <S2SV_ModEnd> parseSWF_ZONEDATA ( f
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> ZoneData == NULL ) { table -> NumZoneData = NULL ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == 0 ) { table -> NumZoneData = 0 ; 0 = SWF_ZONEDATA_MAX_SIZE ; return ; }
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> NumZoneData == 0 ) return <S2SV_ModStart> i ; if ( i >= <S2SV_ModEnd> SWF_ZONEDATA * )
<S2SV_ModStart> table ) { <S2SV_ModEnd> table -> NumZoneData <S2SV_ModStart> ( f ) ; if ( table -> ZoneData == NULL ) { table -> NumZoneData = SWF_ZONEDATA_MAXSIZE ; return ; }
