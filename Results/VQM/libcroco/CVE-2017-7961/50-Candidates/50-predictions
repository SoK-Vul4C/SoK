<S2SV_ModStart> ) ) ; if ( num!= NULL ) { <S2SV_ModStart> -> val ; }
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { <S2SV_ModStart> -> val ; } <S2SV_ModStart> NULL ) ) ; <S2SV_ModEnd> cr_num_destroy ( num
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { blue = num -> val ; cr_num_destroy ( num ) ; } } else { blue = NULL ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num -> val!= NULL ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = NULL ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { vpx_write_bit ( a_this, 0 ) ; } } else { g_write_bit ( a_this, 0 ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num -> val!= NULL ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = NULL ; } <S2SV_ModEnd> cr_num_destroy ( num
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } } else { if ( status == CR_OK ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } } else { if ( num!= NULL ) { gboolean error ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = NULL ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } } else { if ( status == CR_OK ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } } else { if ( status == CR_OK ) { g_byte ( a_this, & init_pos ) ; gboolean is_percentage = TRUE ; } } else { status = CR_BAD_PARAM_ERROR ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } else { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { gboolean error ; } } else { error ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = NULL ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { g_byte ( a_this, 2 ) ; } } else { if ( a_this -> val!= NULL ) { g_byte ( a_this, 3 ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { g_byte ( a_this, 2 ) ; } } else { if ( a_this -> val!= NULL ) { g_byte ( a_this, 3 ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = NULL ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } else { g_assert ( num!= NULL ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } } else { if ( status == CR_OK ) { g_byte ( a_this, & init_pos ) ; g_byte ( a_this, & location ) ; } } else { status = CR_PARSING_ERROR ; goto error ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { g_byte ( a_this, 2 ) ; } } } else { g_byte ( a_this, & init_pos ) ; g_byte ( a_this, & location ) ; gboolean is_percentage = true ; } } else { status = CR_BAD_PARAM_ERROR ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } } else { if ( status == CR_BAD_COLOR ) { g_byte ( a_this, & init_pos ) ; g_byte ( a_this, & location ) ; } } } else { status = CR_BAD_COLOR ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } } else { if ( status == CR_OK ) { g_byte ( a_this, & init_pos ) ; gboolean is_percentage = TRUE ; break ; } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } } else { if ( status == CR_OK ) { g_byte ( a_this, & init_pos ) ; gboolean is_percentage = TRUE ; break ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } } else { if ( status == CR_OK ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { g_byte ( a_this, 2 ) ; } } } else { g_byte ( a_this, & init_pos ) ; g_byte ( a_this, & location ) ; gboolean is_percentage = true ; } } else { status = CR_BAD_PARAM_ERROR ; } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } } else { if ( num!= NULL ) { gboolean is_percentage = TRUE ; break ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = NULL ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } else { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { blue = num -> val ; cr_num_destroy ( num ) ; } } else { green = NULL ; blue = NULL ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } else { g_assert ( num!= NULL ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } } else { if ( status == CR_OK ) { g_byte ( a_this, & init_pos ) ; g_byte ( a_this, & location ) ; } } } else { status = CR_PARSING_ERROR ; goto error ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { g_byte ( a_this, 2 ) ; } } } else { g_byte ( a_this, & init_pos ) ; g_byte ( a_this, & location ) ; gboolean is_percentage = TRUE ; } } else { status = CR_BAD_PARAM_ERROR ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } } else { if ( status == CR_BAD_COLOR ) { g_byte ( a_this, & init_pos ) ; g_byte ( a_this, & color_type ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { g_byte ( a_this, 2 ) ; } } } else { g_byte ( a_this, & init_pos ) ; g_byte ( a_this, & location ) ; gboolean is_percentage = true ; } } else { status = CR_PARSING_ERROR ; goto error ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = NULL ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { g_byte ( a_this, 2 ) ; } } else { if ( a_this -> val!= NULL ) { g_byte ( a_this, 1 ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { g_byte ( a_this, 2 ) ; } } } else { g_byte ( a_this, & init_pos ) ; g_byte ( a_this, & location ) ; gboolean is_percentage = TRUE ; } } else { status = CR_BAD_PARAM_ERROR ; } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } } else { if ( status == CR_OK ) { g_byte ( a_this, & init_pos ) ; gboolean is_percentage = TRUE ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } else { if ( num!= NULL ) { gboolean error ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } } else { if ( status == CR_OK ) { g_byte ( a_this, & init_pos ) ; g_byte ( a_this, & location ) ; } } else { status = CR_BAD_PARAM_ERROR ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = NULL ; } <S2SV_ModEnd> cr_num_destroy ( num
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { g_byte ( a_this, 2 ) ; } } else { if ( a_this -> val!= NULL ) { g_byte ( a_this, 1 ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { g_assert ( a_this -> val!= NULL ) ; } } else { g_assert ( num!= NULL ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { g_byte ( a_this, 2 ) ; } } } else { if ( status == CR_OK ) { g_byte ( a_this, 0 ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = NULL ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } } else { if ( status == CR_OK ) { if ( a_this -> val!= NULL ) { gboolean error ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } } else { if ( status == CR_OK ) { g_byte ( a_this, & init_pos ) ; g_byte ( a_this, & location ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } } else { if ( status == CR_BAD_COLOR ) { g_byte ( a_this, & init_pos ) ; g_byte ( a_this, & blue ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = NULL ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { g_byte ( a_this, 2 ) ; } } else { if ( a_this -> val!= NULL ) { cr_num_destroy ( num ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean blue = num -> val ; } else { red = NULL ; } <S2SV_ModEnd> cr_num_destroy ( num
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } } else { if ( status == CR_OK ) { g_byte ( a_this, & init_pos ) ; gboolean is_percentage = TRUE ; } } else { g_byte ( a_this, & color_type ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } } else { if ( status == CR_BAD_COLOR ) { g_byte ( a_this, & init_pos ) ; g_byte ( a_this, & green ) ; gchar * blue = num -> val ; gboolean is_percentage = TRUE ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( ( num!= NULL ) && ( num -> val!= NULL ) ) { gboolean is_percentage = TRUE ; <S2SV_ModStart> -> val ; if ( is_percentage ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = false ; cr_num_destroy ( num ) ; } else { cr_num_destroy ( num ) ; }
<S2SV_ModStart> ) ) ; if ( num!= NULL ) { if ( ( status == CR_OK ) && ( num!= NULL ) ) { gboolean red = num -> val ; gboolean green = num -> val ; gboolean blue = num -> val ; } else { red = num -> val ; } <S2SV_ModEnd> cr_num_destroy ( num <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( status <S2SV_ModStart> == CR_OK ) { if ( a_this -> val!= NULL ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } } else { if ( status == CR_OK ) { if ( a_this -> val!= NULL ) { gboolean is_percentage = TRUE ; break ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; if ( ( status == CR_OK ) && ( num!= NULL ) ) { <S2SV_ModStart> -> val ; }
