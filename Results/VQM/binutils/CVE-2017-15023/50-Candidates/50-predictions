<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; } break ; case DW_LNCT_directory_index : if ( data_count > ( unsigned int ) format_count ) break ; if ( datai > ( unsigned
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma string = _bfd_safe_read_leb128 (
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) <S2SV_ModEnd> { bfd_byte *
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; } break ; case DW_LNCT_path : case DW_LNCT_directory_index : case DW_LNCT_timestamp : case DW_
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; switch ( formattype ) { case DW_LNCT_PATH : if ( data_count > ( unsigned int ) format_count ) break ; case DW_LNCT
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; switch ( format_type ) { case DW_LNCT_PATH : if ( data_count > ( unsigned int ) format_count ) break ; case DW_LNCT
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; } buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma string = _bfd_safe_read_leb128 (
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; } break ; case DW_LNCT_directory : if ( data_count > ( unsigned int ) format_count ) break ; if ( datai > ( unsigned int )
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; } break ; case DW_LNCT_directory : if ( data_count > ( unsigned int ) format_count ) break ; if ( data_count > ( unsigned
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; } break ; case DW_LNCT_directory : if ( data_count > ( unsigned int ) format_count ) break ; if ( datai > ( unsigned int
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; } break ; case DW_LNCT_directory_index : if ( data_count > ( unsigned int ) format_count ) break ; if ( data_count > ( unsigned
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 (
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = format_header_data ; for ( formati = 0 ; formati < format_count ; formati ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, format, & bytes_read, FALSE, buf_end ) ; buf += bytes_read ; if ( formati > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = format_header_data ; for ( formati = 0 ; formati < format_count ; formati ++
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; } break ; case DW_LNCT_directory_index : if ( data_count > ( unsigned int ) format_count ) break ; if ( datai > ( unsigned int
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma ( datai, DW_LNCT_DIR_index,
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; switch ( formattype ) { case DW_LNCT_DIR : if ( data_count > ( unsigned int ) format_count ) break ; case DW_LNCT
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; } buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) <S2SV_ModEnd> { bfd_byte *
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; switch ( format_type ) { case DW_LNCT_DIR : if ( data_count > ( unsigned int ) format_count ) break ; case DW_LNCT
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { if ( datai > ( unsigned int ) format_count ) break ; }
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; } <S2SV_ModEnd> if ( format_type ==
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; } break ; case DW_LNCT_directory : if ( data_count > ( unsigned int ) format_count ) break ; if ( datai > ( unsigned
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( formati = 0 ; formati < format_count ; formati ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 (
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; switch ( formattype ) { case DW_LNCT_PATH : case DW_LNCT_directory_index : case DW_LNCT_timestamp : case
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; break ; } <S2SV_ModEnd> } stringp =
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; } break ; case DW_LNCT_directory_index : if ( data_count > ( unsigned int ) format_count ) break ; stringp = stringp ;
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; } break ; case DW_LNCT_directory_index : if ( data_count > ( unsigned int ) format_count ) break ; if ( data_count >
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; } break ; case DW_LNCT_path : case DW_LNCT_directory_index : case DW_LNCT_timestamp : case DW_L
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; } break ; case DW_LNCT_directory_index : if ( data_count > ( unsigned int ) format_count ) break ; stringp =
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; } break ; case DW_LNCT_directory_index : if ( data_count > ( unsigned int ) format_count ) break ; bfd_vma (
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma ( datai, DW_LNCT_DIR_index
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; } break ; case DW_LNCT_directory_index : if ( data_count > ( unsigned int ) format_count ) break ; case DW_LNCT
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = format_header_data ; for ( formati = 0 ; formati < format_count ; formati ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, format, & bytes_read, FALSE, buf_end ) ; buf += bytes_read ; if ( formati > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) <S2SV_ModEnd> { bfd_byte *
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; } break ; case DW_LNCT_directory_index : if ( data_count > ( unsigned int ) format_count ) break ; if ( datai >
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { if ( datai > ( unsigned int ) format_count ) break ;
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < format_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; } break ; case DW_LNCT_directory_index : if ( data_count > ( unsigned int ) format_count ) break ; if ( datai > ( unsigned
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; } break ; case DW_LNCT_directory_index : if ( data_count > ( unsigned int ) format_count ) break ; if ( formati > ( unsigned
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; switch ( format_type ) { case DW_LNCT_PATH : case DW_LNCT_directory_index : case DW_LNCT_timestamp : case
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; } <S2SV_ModEnd> if ( formati ==
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; } break ; case DW_LNCT_path : if ( data_count > ( unsigned int ) format_count ) break ; if ( data_count > ( unsigned
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; } break ; case DW_LNCT_directory : if ( data_count > ( unsigned int ) format_count ) break ; bfd_vma ( abfd, data
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; } break ; case DW_LNCT_directory : if ( data_count > ( unsigned int ) format_count ) break ; stringp = stringp ;
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; } break ; case DW_LNCT_directory_index : if ( data_count > ( unsigned int ) format_count ) break ; case DW_LNCT_
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; } <S2SV_ModEnd> if ( formati
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; switch ( formattype ) { case DW_LNCT_PATH : case DW_LNCT_directory_index : case DW_LNCT_TIMESTAMP : case
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; } break ; case DW_LNCT_directory : if ( data_count > ( unsigned int ) format_count ) break ; if ( data_count > ( unsigned int
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; } break ; case DW_LNCT_PATH : if ( data_count > ( unsigned int ) format_count ) break ; if ( data_count > ( unsigned
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = format_header_data ; for ( formati = 0 ; formati < format_count ; formati ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, format, & bytes_read, FALSE, buf_end ) ; buf += bytes_read ; if ( formati > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = format_header_data ; for ( formati = 0 ; formati < format_count
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) <S2SV_ModEnd> { bfd_byte * format
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; } break ; case DW_LNCT_path : case DW_LNCT_directory_index : case DW_LNCT_TIMESTAMP : case DW_
<S2SV_ModStart> ; for ( datai = 0 ; datai < format_count ; datai ++ ) { if ( data_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_byte * format = format_header_data ; struct fileinfo fe ; if ( format_count > ( unsigned int ) format_count ) break ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; for ( datai = 0 ; datai < data_count ; datai ++ ) { bfd_vma content_type = _bfd_safe_read_leb128 ( abfd, buf, bytes_read, FALSE, buf_end ) ; buf += bytes_read ; } break ; case DW_LNCT_directory_index : if ( data_count > ( unsigned int ) format_count ) break ; if ( formati >
