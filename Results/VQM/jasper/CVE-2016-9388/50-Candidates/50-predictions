<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } else { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( c!= EOF ) { goto error ; } } for
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( c = jas_stream_getc ( in ) )
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } else { jas_matrix_setv ( data [ 0 ], x
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( c!= EOF ) { goto error ; } } for (
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> jas_matrix_create ( 1 <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( c!= EOF ) { goto error
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( ( c = jas_stream_getc ( in ) )
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( c!= EOF ) { goto error ; } } } for
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> jas_matrix_create ( 1 <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } else { jas_matrix_setv ( data [ 0 ]
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } jas_matrix_setv ( data [ 2 ], x, ( RAS_GETGREEN (
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } } for ( i = 0 ; i < jas_image_numcmpts ( image )
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; jas_matrix_setv ( data [ 2 ], x, ( RAS_GETGREEN (
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( ( c = jas_stream_getc ( in
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> jas_matrix_create ( 1 <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( c = jas_stream_getc
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } for ( i = 0 ; i < jas_image_numcmpts ( image )
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } } for ( i = 0 ; i < jas_image_numcmpts ( image
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( c!= EOF ) { goto error ; } } for
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } else { jas_matrix_setv ( data [ 0 ], x
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( c = jas_stream_getc ( in ) ) ==
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> jas_matrix_create ( 1 <S2SV_ModStart> image ) ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( c!= EOF ) { goto error
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( ( c = jas_stream_getc ( in )
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( c = jas_stream_getc ( in
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( ( c = jas_stream_getc (
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } jas_matrix_setv ( data [ 2 ], x, ( RAS_GETGREEN
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> jas_matrix_create ( 1 <S2SV_ModStart> image ) ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( c = jas_stream_getc
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> jas_matrix_create ( 1 <S2SV_ModStart> image ) ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } else { jas_matrix_setv ( data [ 0 ]
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> i ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } else { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( c < 0 ) { goto error ; } } for
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( c = jas_stream_getc ( in ) ==
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> i ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( c!= EOF ) { goto error ; } } for
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> jas_matrix_create ( 1 <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } } for ( i = 0 ; i < jas_image_numcmpts
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> i ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( c = jas_stream_getc ( in ) )
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( c == EOF ) { goto error ; } } for
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> jas_matrix_create ( 1 <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } for ( i = 0 ; i < jas_image_numcmpts (
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( c = jas_stream_getc ( in )
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( c!= EOF ) { goto error ; } } for ( i
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( c = jas_stream_getc (
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> jas_matrix_create ( 1 <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( ( c = jas_stream_getc
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED (
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( c = jas_stream_getc ( in ) )
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> i ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } else { jas_matrix_setv ( data [ 0 ], x
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( c = jas_stream_getc (
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( ( c = jas_stream_getc (
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> jas_matrix_create ( 1 <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( c = jas_stream_getc (
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } if ( pad ) { if ( c = jas_stream_getc ( in
<S2SV_ModStart> = 0 ; assert ( jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if (! ( <S2SV_ModEnd> data [ i <S2SV_ModStart> image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = <S2SV_ModStart> EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ], x, ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ], x, ( RAS_GETGREEN ( v ) ) ) ; } } for ( i = 0 ; i < jas_image_numcmpts ( image
