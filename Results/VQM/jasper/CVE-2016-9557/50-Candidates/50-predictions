<S2SV_ModStart> bool s ; jas_ulong <S2SV_ModEnd> tmp ; assert
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec < 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; }
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec < 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> value <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; }
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec < 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec < 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> count <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; }
<S2SV_ModStart> ; bool s ; jas_ulong tmp ; if ( prec < 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; }
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec > 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; }
<S2SV_ModStart> s ; jas_ulong tmp ; if ( prec < 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; }
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec < 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> number <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; }
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec < 1 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; }
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec < 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> depth <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; }
<S2SV_ModStart> ; ulong tmp ; if ( prec < 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; }
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec < 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> for <S2SV_blank> jas_stream_put" ) ; }
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec < 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> overflow <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; }
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec < 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> level <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; }
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec > 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> value <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; }
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec > 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> count <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; }
<S2SV_ModStart> bool s ; jas_ulong tmp ; assert ( prec > 0 ) ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } <S2SV_ModEnd> if ( sgnd
<S2SV_ModStart> bool s ; jas_ulong tmp ; jas_ulong <S2SV_ModEnd> tmp ; assert
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec < 1 || prec >= 2 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; }
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec < 3 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; }
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec < 1 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec < 0 || prec >= 2 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; }
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec > 0 ) { jas_eprintf ( "invalid <S2SV_blank> prec <S2SV_blank> count <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; return - 1 ; }
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec < 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> value <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec >= 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; }
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec < 0 || prec >= 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; }
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec > 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> number <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; }
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec < 0 ) { jas_eprintf ( "invalid <S2SV_blank> prec <S2SV_blank> count <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; return - 1 ; }
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec > 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> depth <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; }
<S2SV_ModStart> ; bool s ; jas_ulong tmp ; if ( prec < 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> value <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; }
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec < 2 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; }
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec > 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> overflow <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; }
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec < 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> count <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( sgnd < 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; }
<S2SV_ModStart> bool s ; jas_ulong tmp ; assert ( prec > 0 ) ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> ; bool s ; jas_ulong tmp ; if ( prec < 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec < 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> depth <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> ; bool s ; jas_ulong tmp ; if ( prec < 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; } <S2SV_ModEnd> assert ( (!
<S2SV_ModStart> ; bool s ; jas_ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } <S2SV_ModEnd> assert ( (!
<S2SV_ModStart> uint tmp ; if ( prec < 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; }
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec < 1 || prec >= 2 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec > 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec < 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; return - 1 ; }
<S2SV_ModStart> bool s ; jas_ulong tmp ; assert ( prec > 0 ) ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } <S2SV_ModEnd> assert ( val
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; assert ( val >= 0 ) ; return - 1 ; } <S2SV_ModEnd> if ( sgnd
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( sgnd ) { val = encode_twos_comp ( val, prec ) ; } assert ( val >= 0 ) ; val &= ( 1 << prec ) - 1
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec < 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> for <S2SV_blank> jas_stream_put" ) ; } <S2SV_ModEnd> assert ( (
<S2SV_ModStart> bool s ; jas_ulong tmp ; if ( prec < 0 ) { jas_deprecated ( "negative <S2SV_blank> prec <S2SV_blank> number <S2SV_blank> for <S2SV_blank> jas_stream_putc" ) ; } <S2SV_ModEnd> assert ( (
