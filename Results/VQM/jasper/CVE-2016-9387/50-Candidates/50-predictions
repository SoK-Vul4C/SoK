<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileyoff, dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileyoff, dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> tileyoff, dec -> tileheight ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileyoff, dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numvtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart>, dec -> tileheight, dec -> tilewidth, dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileyoff, dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> tileyoff, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileheight ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> sizeof ( dec -> tileyoff, dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart>, dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileheight, dec -> tilewidth, dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileyoff, dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> sizeof ( jpc_dec_tile_t ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileyoff, dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> tileheight, & size ) ) { return - 1 ; } dec -> numvtiles = size ; JAS_DBGLOG ( 10, ( "numvtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileheight, dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numvtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> ) ) { if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileyoff, dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numvtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> tileyoff, dec -> tileheight ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileheight ) { if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileyoff, dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileyoff, dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numvtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> tileheight, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileyoff, dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> tileheight, & size ) ) { return - 1 ; } dec -> numvtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart>, dec -> tileheight, dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileyoff, dec -> tileheight, dec -> tilewidth, dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart>, dec -> tileheight, dec -> tilewidth, dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numvtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart>, sizeof ( dec -> tileyoff, dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> ( dec -> tileyoff, dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileyoff, & size ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( dec -> numtiles ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> sizeof ( dec -> tileyoff, dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> ) ) ) { if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileyoff, sizeof ( dec -> tileyoff ) ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileyoff, dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> tileyoff, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> tileyoff, dec -> tileheight ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileheight = dec -> tileheight ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> sizeof ( dec -> tileyoff, dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numvtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileyoff, dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( dec -> numtiles ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileyoff, dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n" <S2SV_ModEnd>, dec -> <S2SV_ModStart> dec -> tileyoff, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> 2 ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> - dec -> tileyoff, dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> ) ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> sizeof ( dec -> tileyoff, dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> tileyoff, dec -> tileheight ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> 0 ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> tileyoff, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno
<S2SV_ModStart> * cmpt ; size_t size ; <S2SV_ModStart> dec -> tileyoff, dec -> tileheight ) ; if (! jas_safe_size_mul ( dec -> numhtiles, dec -> numvtiles, & size ) ) { return - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10, ( "numtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numhtiles <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numvtiles <S2SV_blank> = <S2SV_blank> %d;\\n", dec -> numtiles, dec -> numhtiles, dec -> numvtiles ) ) ; if (! ( dec -> tiles = jas_alloc2 ( dec -> numtiles, sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; } <S2SV_ModEnd> for ( tileno =
