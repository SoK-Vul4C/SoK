<S2SV_ModStart> = 0 ; uint32 <S2SV_ModEnd> strip ; rowsperstrip
<S2SV_ModStart> = 1 ; uint32 <S2SV_ModEnd> strip ; rowsperstrip
<S2SV_ModStart> = 0 ; uint32 <S2SV_ModEnd> strip ; td_imagelength
<S2SV_ModStart> = 1 ; uint32 <S2SV_ModEnd> strip ; td_imagelength
<S2SV_ModStart> = 0 ; uint32 <S2SV_ModEnd> strip ; td
<S2SV_ModStart> = 0 ; uint32 <S2SV_ModEnd> strip = (
<S2SV_ModStart> = 0 ; uint32 <S2SV_ModEnd> strip ; stripsperplane
<S2SV_ModStart> = 1 ; uint32 <S2SV_ModEnd> strip ; td
<S2SV_ModStart> = 1 ; uint32 <S2SV_ModEnd> rowsperstrip ; rowsperstrip
<S2SV_ModStart> = 1 ; uint32 <S2SV_ModEnd> strip = (
<S2SV_ModStart> = 1 ; uint32 <S2SV_ModEnd> strip ; stripsperplane
<S2SV_ModStart> = 0 ; uint32 <S2SV_ModEnd> rowsperstrip ; rowsperstrip
<S2SV_ModStart> = 0 ; uint32 > stripsperplane &&
<S2SV_ModStart> = 0 ; uint32 <S2SV_ModEnd> strip / stripinplane
<S2SV_ModStart> / td +
<S2SV_ModStart> / td_imagelength ; uint32 <S2SV_ModEnd> strip = (
<S2SV_ModStart> / td + 4
<S2SV_ModStart> = 0 ; uint32 header_type ;
<S2SV_ModStart> = 0 ; uint32 > "%lu:<S2SV_blank>Strip<S2SV_blank>out<S2SV_blank>of<S2SV_blank>range,<S2SV_blank>max<S2SV_blank>%lu" &&
<S2SV_ModStart> = 0 ; uint32 bail <S2SV_ModEnd> ; rowsperstrip =
<S2SV_ModStart> / td -> rmtvaluelen <S2SV_ModEnd> ) ; rowsperstrip
<S2SV_ModStart> = 1 ; uint32 <S2SV_ModEnd> td / stripinplane
<S2SV_ModStart> = 1 ; uint32 <S2SV_ModEnd> strip / stripinplane
<S2SV_ModStart> = 1 ; uint32 <S2SV_ModEnd> rowsperstrip ; td_imagelength
<S2SV_ModStart> = 0 ; uint32 <S2SV_ModEnd> td / stripinplane
<S2SV_ModStart> / td_imagelength ; uint32 header_type ;
<S2SV_ModStart> = 0 ; uint32 pathlen ;
<S2SV_ModStart> = 1 ; uint32 <S2SV_ModEnd> td_imagelength ; rowsperstrip
<S2SV_ModStart> / td -> rmtvaluelen <S2SV_ModEnd> ) ; if
<S2SV_ModStart> = 0 ; uint32 <S2SV_ModEnd> strip ; stripinplane
<S2SV_ModStart> = 0 ; uint32 bail <S2SV_ModEnd> ; td_imagelength =
<S2SV_ModStart> = 0 ; uint32 <S2SV_ModEnd> rowsperstrip ; td_imagelength
<S2SV_ModStart> = 1 ; uint32 <S2SV_ModEnd> td = 0
<S2SV_ModStart> = 0 ; uint32 <S2SV_ModEnd> td = 0
<S2SV_ModStart> = 0 ; uint32 <S2SV_ModEnd> td_imagelength ; rowsperstrip
<S2SV_ModStart> = 0 ; uint32 > UINT32_MAX - 1 ;
<S2SV_ModStart> = 0 ; uint32 "offset<S2SV_blank>must<S2SV_blank>be<S2SV_blank>1<S2SV_blank>or<S2SV_blank>greater" ;
<S2SV_ModStart> = 0 ; uint32 > UINT32_MAX / td - 1 ;
<S2SV_ModStart> = 0 ; if ( ( <S2SV_ModStart> td_imagelength ) ) { return 0 ; }
<S2SV_ModStart> = 0 ; uint32 <S2SV_ModEnd> td % stripinplane <S2SV_ModStart> / td -> size .
<S2SV_ModStart> = 1 ; uint32 <S2SV_ModEnd> td / stripinplane <S2SV_ModStart> -> td + size
<S2SV_ModStart> = 0 ; uint32 <S2SV_ModEnd> td / stripinplane <S2SV_ModStart> / td -> size .
<S2SV_ModStart> = 0 ; if ( ( <S2SV_ModStart> td_imagelength ) ) { uint32 ) { <S2SV_ModStart> / stripinplane ; }
<S2SV_ModStart> = 0 ; if ( ( <S2SV_ModStart> td -> td . rows ) { <S2SV_ModStart> stripinplane ) ; }
<S2SV_ModStart> = 0 ; uint32 <S2SV_ModEnd> strip / stripinplane <S2SV_ModStart> -> td + size
<S2SV_ModStart> = 0 ; if ( ( <S2SV_ModStart> td_imagelength ) ) { uint32 ) { <S2SV_ModStart> stripinplane ) ; }
<S2SV_ModStart> = td +
<S2SV_ModStart> = 1 ; uint32 <S2SV_ModEnd> td % stripinplane <S2SV_ModStart> / td -> size .
<S2SV_ModStart> = 0 ; uint32 <S2SV_ModEnd> td / stripinplane <S2SV_ModStart> -> td - 1 -> size
<S2SV_ModStart> = 0 ; if ( ( <S2SV_ModStart> td -> td . rows ) { <S2SV_ModStart> strip ) ; }
