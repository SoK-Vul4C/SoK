<S2SV_ModStart> , 1 ; uint32 <S2SV_ModEnd> PHOTOMETRIC_MINISBLACK ; PHOTOMETRIC_MINISBLACK
<S2SV_ModStart> , samplesperpixel ; uint32 <S2SV_ModEnd> PHOTOMETRIC_MINISBLACK ; PHOTOMETRIC_MINISBLACK
<S2SV_ModStart> , bitspersample ; uint32 <S2SV_ModEnd> PHOTOMETRIC_MINISBLACK ; PHOTOMETRIC_MINISBLACK
<S2SV_ModStart> , 1 ; uint32 <S2SV_ModEnd> PHOTOMETRIC_MINISBLACK = input_photometric
<S2SV_ModStart> , samplesperpixel ; uint32 <S2SV_ModEnd> PHOTOMETRIC_MINISBLACK = input_photometric
<S2SV_ModStart> , 1 ; uint32 <S2SV_ModEnd> input_photometric ; PHOTOMETRIC_MINISBLACK
<S2SV_ModStart> , 1 ; uint32 <S2SV_ModEnd> copyFunc ; PHOTOMETRIC_MINISBLACK
<S2SV_ModStart> , 1 ) ; uint32 <S2SV_ModEnd> PHOTOMETRIC_MINISBLACK ; PHOTOMETRIC_MINISBLACK
<S2SV_ModStart> , samplesperpixel ; uint32 replylen ;
<S2SV_ModStart> , 1 ) ; uint32 replylen ;
<S2SV_ModStart> , samplesperpixel ; uint32 <S2SV_ModEnd> samplesperpixel ; PHOTOMETRIC_MINISBLACK
<S2SV_ModStart> , samplesperpixel ; uint32 <S2SV_ModEnd> copyFunc ; PHOTOMETRIC_MINISBLACK
<S2SV_ModStart> , 1 ; uint32 <S2SV_ModEnd> PHOTOMETRIC_MINISBLACK ; input_photometric
<S2SV_ModStart> , samplesperpixel ; uint32 <S2SV_ModEnd> input_photometric ; PHOTOMETRIC_MINISBLACK
<S2SV_ModStart> , 1 ; uint32 <S2SV_ModEnd> samplesperpixel ; PHOTOMETRIC_MINISBLACK
<S2SV_ModStart> , bitspersample ; uint32 <S2SV_ModEnd> PHOTOMETRIC_MINISBLACK = input_photometric
<S2SV_ModStart> , samplesperpixel ; uint32 <S2SV_ModEnd> bitspersample ; PHOTOMETRIC_MINISBLACK
<S2SV_ModStart> , bitspersample ; uint32 replylen ;
<S2SV_ModStart> , samplesperpixel ; uint32 samplesperpixel ;
<S2SV_ModStart> , 1 ; uint32 <S2SV_ModEnd> bitspersample ; PHOTOMETRIC_MINISBLACK
<S2SV_ModStart> , samplesperpixel ; uint32 <S2SV_ModEnd> PHOTOMETRIC_MINISBLACK ; input_photometric
<S2SV_ModStart> , bitspersample ; uint32 <S2SV_ModEnd> samplesperpixel ; PHOTOMETRIC_MINISBLACK
<S2SV_ModStart> , bitspersample ; uint32 <S2SV_ModEnd> copyFunc ; PHOTOMETRIC_MINISBLACK
<S2SV_ModStart> , 1 ; uint32 <S2SV_ModEnd> PHOTOMETRIC_MINISBLACK input_photometric ;
<S2SV_ModStart> , bitspersample ; uint32 <S2SV_ModEnd> input_photometric ; PHOTOMETRIC_MINISBLACK
<S2SV_ModStart> , bitspersample ; uint32 <S2SV_ModEnd> bitspersample ; PHOTOMETRIC_MINISBLACK
<S2SV_ModStart> , 1 ; uint32 <S2SV_ModEnd> PHOTOMETRIC_MINISBLACK = PHOTOMETRIC_MINISBLACK
<S2SV_ModStart> , 1 = ; uint32 <S2SV_ModEnd> PHOTOMETRIC_MINISBLACK ; PHOTOMETRIC_MINISBLACK
<S2SV_ModStart> , 1 ; uint32 replylen ;
<S2SV_ModStart> , bitspersample ; uint32 samplesperpixel ;
<S2SV_ModStart> , 1 = 1 ; uint32 <S2SV_ModEnd> PHOTOMETRIC_MINISBLACK PHOTOMETRIC_MINISBLACK PHOTOMETRIC_MINISBLACK
<S2SV_ModStart> , bitspersample ; uint32 <S2SV_ModEnd> PHOTOMETRIC_MINISBLACK ; input_photometric
<S2SV_ModStart> , samplesperpixel ; uint32 bitspersample ;
<S2SV_ModStart> , samplesperpixel ; uint32 <S2SV_ModEnd> PHOTOMETRIC_MINISBLACK = PHOTOMETRIC_MINISBLACK
<S2SV_ModStart> , 1 ; uint32 <S2SV_ModEnd> input_compression ; PHOTOMETRIC_MINISBLACK
<S2SV_ModStart> , 1 ; uint32 <S2SV_ModEnd> PHOTOMETRIC_MINISBLACK PHOTOMETRIC_MINISBLACK ;
<S2SV_ModStart> , samplesperpixel ; uint32 <S2SV_ModEnd> input_compression ; PHOTOMETRIC_MINISBLACK
<S2SV_ModStart> , 1 ; uint32 <S2SV_ModEnd> PHOTOMETRIC_MINISBLACK , input_photometric
<S2SV_ModStart> , 1 = 1
<S2SV_ModStart> , 1 = 1 <S2SV_ModEnd> ; PHOTOMETRIC_MINISBLACK (
<S2SV_ModStart> , 1 ) ; uint32 token ;
<S2SV_ModStart> , 1 = 1 ; uint32 <S2SV_ModEnd> PHOTOMETRIC_MINISBLACK PHOTOMETRIC_MINISBLACK ,
<S2SV_ModStart> , samplesperpixel ; uint32 <S2SV_ModEnd> samplesperpixel = input_photometric
<S2SV_ModStart> , 1 = 1 <S2SV_ModEnd> ; PHOTOMETRIC_MINISBLACK =
<S2SV_ModStart> , 1 = 1 ; uint32 <S2SV_ModEnd> PHOTOMETRIC_MINISBLACK input_photometric PHOTOMETRIC_MINISBLACK
<S2SV_ModStart> , 1 = 1 ; uint32 <S2SV_ModEnd> PHOTOMETRIC_MINISBLACK PHOTOMETRIC_MINISBLACK input_photometric
<S2SV_ModStart> , samplesperpixel ; uint32 samplesperpixel ; uint32 PHOTOMETRIC_MINISBLACK ;
<S2SV_ModStart> , samplesperpixel ; uint32
<S2SV_ModStart> , 1 = 1 ; uint32 <S2SV_ModEnd> PHOTOMETRIC_MINISBLACK input_photometric ,
<S2SV_ModStart> , 1 = 1 ; uint32 <S2SV_ModEnd> PHOTOMETRIC_MINISBLACK input_photometric input_photometric
