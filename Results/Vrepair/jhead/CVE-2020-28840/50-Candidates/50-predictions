<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( a +
<S2SV_ModStart> = Data ; checkstackGCp <S2SV_ModEnd> ( a +
<S2SV_ModStart> = Data ; first_source = MAX_COMMENT_SIZE ;
<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( '\\n' ,
<S2SV_ModStart> = Data ; checkstackGCp <S2SV_ModEnd> ( ( a
<S2SV_ModStart> = a ; <S2SV_ModEnd> else if (
<S2SV_ModStart> = Data ; size_t sysid_len = '\\n' ;
<S2SV_ModStart> = Data ; size_t ss = MAX_COMMENT_SIZE ( ) ;
<S2SV_ModStart> ; if ( safe_calloc <S2SV_ModEnd> ( '\\n' )
<S2SV_ModStart> ; if ( osStrchr <S2SV_ModEnd> ( a [
<S2SV_ModStart> = Data ; checkstackGCp <S2SV_ModEnd> ( ( ch
<S2SV_ModStart> ; if ( _PyUnicode_EqualToASCIIString <S2SV_ModEnd> ( a )
<S2SV_ModStart> = Data ; size_t sysid_len <S2SV_ModEnd> ; } else
<S2SV_ModStart> = Data ; checkstackGCp <S2SV_ModEnd> ( ( uchar
<S2SV_ModStart> = Data ; first_source = '\\n' ;
<S2SV_ModStart> = a ; free ( ) ;
<S2SV_ModStart> = Data ; checkstackGCp <S2SV_ModEnd> ( ( Data
<S2SV_ModStart> = '\\n' ; size_t sysid_len ;
<S2SV_ModStart> = Data ; size_t sysid_len ;
<S2SV_ModStart> ; if ( osStrchr <S2SV_ModEnd> ( a +
<S2SV_ModStart> = Data ; first_source = Data ;
<S2SV_ModStart> = Data ; checkstackGCp <S2SV_ModEnd> ( ( a +
<S2SV_ModStart> = a ; luaL_checkstack ( uchar ) ;
<S2SV_ModStart> = Data ; checkstackGCp <S2SV_ModEnd> ( a )
<S2SV_ModStart> = Data ; size_t size = MAX_COMMENT_SIZE ( ) ;
<S2SV_ModStart> ; if ( osStrchr <S2SV_ModEnd> ( '\\n' ,
<S2SV_ModStart> = Data ; size_t pathlen = 1 ;
<S2SV_ModStart> ; if ( _PyUnicode_EqualToASCIIString <S2SV_ModEnd> ( a +
<S2SV_ModStart> = Data ; first_source = 1 ;
<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( a [
<S2SV_ModStart> = Data ; first_source = '\\r' ;
<S2SV_ModStart> ; if ( _PyUnicode_EqualToASCIIString <S2SV_ModEnd> ( a [
<S2SV_ModStart> = a ; size_t sysid_len = MAX_COMMENT_SIZE ( ) ;
<S2SV_ModStart> = Data ; free ( ) ;
<S2SV_ModStart> = Data ; checkstackGCp <S2SV_ModEnd> ( ( a )
<S2SV_ModStart> = a ; size_t size = MAX_COMMENT_SIZE ( ) ;
<S2SV_ModStart> ; if ( getenv ( "HASHSEED" ) )
<S2SV_ModStart> = a ; size_t sysid_len = '\\n' ;
<S2SV_ModStart> = Data ; size_t pathlen = '\\n' ;
<S2SV_ModStart> = a ; unsigned char ) <S2SV_ModStart> = '\\n' ;
<S2SV_ModStart> ; if ( _PyUnicode_EqualToASCIIString <S2SV_ModEnd> ( '\\n' )
<S2SV_ModStart> = Data ; size_t sysid_len = MAX_COMMENT_SIZE ( ) ;
<S2SV_ModStart> = a ; checkstackGCp <S2SV_ModEnd> ( a +
<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( a )
<S2SV_ModStart> = Data ; size_t sysid_len <S2SV_ModEnd> ; } if
<S2SV_ModStart> ; if ( is_nmi ( a ) <S2SV_ModEnd> ) continue ;
<S2SV_ModStart> = a ; size_t sysid_len = '\\n' ; if (
<S2SV_ModStart> = a ; checkstackGCp <S2SV_ModEnd> ( ( a )

<S2SV_ModStart>
