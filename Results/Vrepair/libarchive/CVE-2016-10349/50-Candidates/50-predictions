<S2SV_ModStart> ( * p && len == NULL
<S2SV_ModStart> ( * p || len > sizeof ( * )
<S2SV_ModStart> ( * p , if ( len > NULL ) { archive_set_error ( & len ) ; return NULL ; }
<S2SV_ModStart> ( * p || len == NULL
<S2SV_ModStart> ( * p && len < len
<S2SV_ModStart> ( * p || len > INT_MAX
<S2SV_ModStart> ( * p , if ( len > NULL ) return NULL
<S2SV_ModStart> ( * p , if ( len > NULL ) { archive_set_error ( & truncated_error , ARCHIVE_ERRNO_FILE_FORMAT ) ; goto invalid ; }
<S2SV_ModStart> ( * p + 'Z'
<S2SV_ModStart> ( * p + sizeof ( * p )
<S2SV_ModStart> ( * p , if ( len > NULL ) { archive_set_error ( & truncated_error , ARCHIVE_ERRNO_FILE_FORMAT ) ; return NULL ; }
<S2SV_ModStart> ( * p && len < sizeof ( * )
<S2SV_ModStart> ( * p + len <S2SV_ModEnd> ) ; if
<S2SV_ModStart> ( * p || len > OE_SSIZE_MAX
<S2SV_ModStart> ( * p , if ( ( len > NULL ) { archive_set_error ( & len ) ; return NULL ; }
<S2SV_ModStart> ( * p , if ( len > NULL ) return 0
<S2SV_ModStart> ( * p + 1
<S2SV_ModStart> ( * p sqlite3_int64 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> ( * p <S2SV_ModEnd> ) ; if
<S2SV_ModStart> ( * p ^ 'Z'
<S2SV_ModStart> ( * p , if ( len > NULL ) { archive_set_error ( & truncated_error , ARCHIVE_ERRNO_FILE_FORMAT ) ; goto err ; }
<S2SV_ModStart> ( * p || len > SIZE_MAX
<S2SV_ModStart> ( * p + sizeof ( * )
<S2SV_ModStart> ( * p , if ( len < sizeof ( * ) ) { return - 1 ; }
<S2SV_ModStart> ( * p , if ( len > NULL ) { archive_set_error ( & truncated_error ) ; return NULL ; }
<S2SV_ModStart> ( * p || len > 0
<S2SV_ModStart> ( * p , if ( ( ! truncated_error -> flags & IPSKB_DOREDIRECT ) { return ( - 1 ) ; }
<S2SV_ModStart> ( * p || len > sizeof ( * ) ) { archive_set_error ( & len ) ; goto invalid ; }
<S2SV_ModStart> ( * p +
<S2SV_ModStart> ( * p , if ( len > 1 << 'Z' ) { archive_set_error ( & len ) ; return NULL ; }
<S2SV_ModStart> ( * p & prev_folder -> <unk>
<S2SV_ModStart> ( ) ; if ( ! truncated_error -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> -> flags & truncated_error
<S2SV_ModStart> ( ) ; if ( ! truncated_error -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> -> p =
<S2SV_ModStart> ( * p , if ( len > sizeof ( a ) ) return NULL ; if (
<S2SV_ModStart> ( * p || len > sizeof ( * ) ) { return - 1 ; }
<S2SV_ModStart> ( * p , if ( ( ! truncated_error -> flags & IPSKB_DOREDIRECT ) return 0 ; if ( (
<S2SV_ModStart> ( ) ; if ( ! truncated_error -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> -> p = sizeof
<S2SV_ModStart> ( * p , if ( len > NULL ) { archive_set_error ( & truncated_error , file ) ; return NULL ; }
<S2SV_ModStart> ( * p , if ( len > NULL ) { archive_set_error ( & len ) ; return 0 ; }
<S2SV_ModStart> ( * p || len > sizeof ( * ) ) { return - 1 ; } if (
<S2SV_ModStart> ( * p , if ( len > NULL ) { archive_set_error ( & truncated_error , ARCHIVE_ERRNO_FILE_FORMAT ) ; return 0 ; }
<S2SV_ModStart> ( ) ; if ( <unk> -> CFHEADER_cFolders == NULL ) { archive_set_error ( & len ) ; return NULL ; }
<S2SV_ModStart> ( * p , if ( len > NULL || truncated_error == NULL ) { return ( ARCHIVE_FATAL ) ; }
<S2SV_ModStart> ( * p + len
<S2SV_ModStart> ( * p , if ( ( len > 1 ) { archive_set_error ( & len ) ; return NULL ; }
<S2SV_ModStart> ( * p , NULL
<S2SV_ModStart> ( * p ( sqlite3_int64 )
<S2SV_ModStart> ( * p , ARCHIVE_ERRNO_FILE_FORMAT
<S2SV_ModStart> ( * p , file
<S2SV_ModStart> ( * p , int

