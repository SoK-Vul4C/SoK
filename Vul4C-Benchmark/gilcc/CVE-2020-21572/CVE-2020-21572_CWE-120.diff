diff --git a/src/gilcc.c b/src/gilcc.c
index c35a877..9f7f9a7 100644
--- a/src/gilcc.c
+++ b/src/gilcc.c
@@ -228,7 +228,8 @@ int main(int argc, char** argv)
         }
 
         printf("Processing file [ %s ]:\n", srcs[srcs_num]);
-        src_parser_cpp(srcs[srcs_num], cfg);
+        if (src_parser_cpp(srcs[srcs_num], &cfg) < 0)
+            return 1;
     }
 
     return 0;
diff --git a/src/src_parser.c b/src/src_parser.c
index 321c336..fbf2b6c 100644
--- a/src/src_parser.c
+++ b/src/src_parser.c
@@ -29,65 +29,96 @@
 #define P_STATE_CODE        0
 #define P_STATE_COMMENT_C   1
 
-/* Parser buffer */
-
-#define SRC_PARSER_F_BUF_SIZE   200
-#define SRC_PARSER_TMP_BUF_SIZE 5
-
-struct parser_buf {
-    char f_buf[SRC_PARSER_F_BUF_SIZE];
-    char tmp_buf[SRC_PARSER_TMP_BUF_SIZE];
-
-    int f_indx;
-    int tmp_indx;
-    int f_read_size;
+/* Parser file-buffer/stack */
+#define PSTACK_BUF_SIZE     2
+#define PARSER_BUF_SIZE     200
+
+struct pbuf {
+    char pbuf_buf[PARSER_BUF_SIZE];
+    int pbuf_content_size;
+    int pbuf_indx;
 };
 
-#define PBUF_F_CHAR(BUF) (BUF.f_buf[BUF.f_indx])
-#define PBUF_F_REMD(BUF) (BUF.f_read_size - BUF.f_indx)
+#define PBUF_CUR_CHAR(B) (B->pbuf_buf[B->pbuf_indx])
+#define PBUF_DATA_SIZE(B) (B->pbuf_content_size - B->pbuf_indx)
+#define PBUF_ADVN(B) (B->pbuf_indx++)
+#define PBUF_CLEAR(B) (B->pbuf_indx = 0)
+#define PBUF_EMPTY(B) (!(PBUF_DATA_SIZE(B)))
+#define PBUF_NOT_EMPTY(B) (!(PBUF_EMPTY(B)))
 
-#define PBUF_TMP_PREV_CHAR(BUF) (BUF.tmp_buf[BUF.tmp_indx-1])
-
-static inline int p_buf_refill(struct parser_buf *buf, const int input_fd)
+static int pbuf_fill(struct pbuf *buf, const int ifd)
 {
     int read_size;
 
-    read_size = read(input_fd, buf->f_buf, SRC_PARSER_F_BUF_SIZE);
-    buf->f_indx = 0;
-    buf->f_read_size = read_size;
+    if (PBUF_NOT_EMPTY(buf))
+        return PBUF_DATA_SIZE(buf);
+
+    read_size = read(ifd, buf->pbuf_buf, PARSER_BUF_SIZE);
+    buf->pbuf_indx = 0;
+    buf->pbuf_content_size = read_size;
+
     return read_size;
 }
 
-static inline int p_buf_push_tmp_char(struct parser_buf *buf, const char c)
+static inline int pbuf_write_char(struct pbuf *buf, const int ofd)
 {
-    buf->tmp_buf[buf->tmp_indx++] = c;
-    buf->f_indx++;
-    return buf->tmp_indx;
+    return write(ofd, &buf->pbuf_buf[buf->pbuf_indx], 1);
 }
 
-static inline int p_buf_write_tmp(struct parser_buf *buf, const int output_fd)
+struct pstack {
+    char pstack_buf[PSTACK_BUF_SIZE];
+    int pstack_indx;
+};
+
+#define PSTACK_DATA_SIZE(S) (S.pstack_indx)
+#define PSTACK_EMPTY(S) (!(PSTACK_DATA_SIZE(S)))
+#define PSTACK_NOT_EMPTY(S) (!(PSTACK_EMPTY(S)))
+#define PSTACK_PUSH_CHAR(S, C) (S.pstack_buf[S.pstack_indx++] = C)
+#define PSTACK_POP_N(S, N) (S.pstack_indx -= N)
+#define PSTACK_CLEAR(S) (S.pstack_indx = 0)
+#define PSTACK_GET_ELEMENT(S, L) (S.pstack_buf[L - 1])
+#define PSTACK_GET_ELEMENT_REV(S, L) (S.pstack_buf[S.pstack_indx - L])
+
+static inline int pstack_write(struct pstack *stk, const int ofd)
 {
     int write_size;
 
-    if (!buf->tmp_indx)
+    if (!stk->pstack_indx)
         return 0;
 
-    write_size = write(output_fd, buf->tmp_buf, buf->tmp_indx);
-    buf->tmp_indx = 0;
+    if ((write_size = write(ofd, stk->pstack_buf, stk->pstack_indx)) < 0)
+        return write_size;
+
+    stk->pstack_indx = 0;
 
     return write_size;
 }
 
-static inline int p_buf_write_f_char(struct parser_buf *buf, const int output_fd)
+static inline int pstack_shift_write_n(struct pstack *stk, const int ofd, const int n)
 {
-    return write(output_fd, &buf->f_buf[buf->f_indx++], 1);
-}
+    int write_size;
+    int i;
+
+    if (!stk->pstack_indx)
+        return 0;
+
+    if (n > stk->pstack_indx)
+        return -1;
+
+    if ((write_size = write(ofd, stk->pstack_buf, n)) < 0)
+        return write_size;
+
+    for (i = 0; (i + n) < stk->pstack_indx; i++)
+        stk->pstack_buf[i] = stk->pstack_buf[(i + n)];
 
-/* Parser impl. */
+    stk->pstack_indx -= n;
+
+    return write_size;
+}
 
 static void print_file_full(int fd)
 {
-    char f_buf[SRC_PARSER_F_BUF_SIZE];
+    char f_buf[PARSER_BUF_SIZE];
     int read_size;
 
     if (lseek(fd, 0, SEEK_SET)) {
@@ -95,7 +126,7 @@ static void print_file_full(int fd)
         return;
     }
 
-    while ((read_size = read(fd, f_buf, SRC_PARSER_F_BUF_SIZE)) > 0) {
+    while ((read_size = read(fd, f_buf, PARSER_BUF_SIZE)) > 0) {
         int read_indx = 0;
 
         while (read_indx < read_size)
@@ -103,17 +134,144 @@ static void print_file_full(int fd)
     }
 }
 
-static int src_parser_trans_stage_1_2_3(const int tmp_fd, const char *src, const struct trans_config cfg)
+static int src_parser_tstage_1_2_3_c_cmnt(  const int tmp_fd,
+                                            const int src_fd,
+                                            struct pbuf *buf,
+                                            const struct trans_config *cfg)
+{
+    struct pstack stk = {
+        .pstack_indx = 0
+    };
+
+    while (PBUF_DATA_SIZE(buf) || (pbuf_fill(buf, src_fd) > 0)) {
+        switch (PBUF_CUR_CHAR(buf)) {
+        case '*':
+            PSTACK_PUSH_CHAR(stk, '*');
+            break;
+
+        case '/':
+            PSTACK_PUSH_CHAR(stk, '/');
+            break;
+
+        default:
+            PSTACK_CLEAR(stk);
+            break;
+        }
+
+        if (PSTACK_DATA_SIZE(stk) > 1) {
+            if (    (PSTACK_GET_ELEMENT_REV(stk, 2) == '*') &&
+                    (PSTACK_GET_ELEMENT_REV(stk, 1) == '/')) {
+                PBUF_ADVN(buf);
+                return 0;
+            } else {
+                if (pstack_shift_write_n(&stk, tmp_fd, 1) < 0)
+                    return -1;
+            }
+        }
+
+        PBUF_ADVN(buf);
+    }
+
+    /* If we get here, we have reached the end of the file without ending the
+     * comment.
+     */
+
+    return -1;
+}
+
+static int src_parser_tstage_1_2_3_default( const int tmp_fd,
+                                            const int src_fd,
+                                            struct pbuf *buf,
+                                            const struct trans_config *cfg)
 {
-    struct parser_buf pbuf = {
-        .f_indx = 0,
-        .tmp_indx = 0,
-        .f_read_size = 0
+    struct pstack stk = {
+        .pstack_indx = 0
+    };
+
+    pbuf_fill(buf, src_fd);
+
+    while (PBUF_DATA_SIZE(buf) || (pbuf_fill(buf, src_fd) > 0)) {
+
+        switch (PBUF_CUR_CHAR(buf)) {
+        case ' ':
+        case '\t':
+            PSTACK_PUSH_CHAR(stk, ' ');
+            break;
+
+        case '\r':
+        case '\n':
+            PSTACK_PUSH_CHAR(stk, '\n');
+            break;
+
+        case '\\':
+            PSTACK_PUSH_CHAR(stk, '\\');
+            break;
+
+        case '/':
+            PSTACK_PUSH_CHAR(stk, '/');
+            break;
+
+        case '*':
+            PSTACK_PUSH_CHAR(stk, '*');
+            break;
+
+        default:
+            pstack_write(&stk, tmp_fd);
+            pbuf_write_char(buf, tmp_fd);
+            PBUF_ADVN(buf);
+            continue;
+        }
+
+        if (PSTACK_DATA_SIZE(stk) > 1) {
+            if ((PSTACK_GET_ELEMENT_REV(stk, 2) == ' ') &&
+                (PSTACK_GET_ELEMENT_REV(stk, 1) == ' ')) {
+                PSTACK_POP_N(stk, 1);
+
+            } else if ( (PSTACK_GET_ELEMENT_REV(stk, 2) == '\n') &&
+                        (PSTACK_GET_ELEMENT_REV(stk, 1) == '\n')) {
+                PSTACK_POP_N(stk, 1);
+
+            } else if ( (PSTACK_GET_ELEMENT_REV(stk, 2) == '\n') &&
+                        (PSTACK_GET_ELEMENT_REV(stk, 1) == ' ')) {
+                PSTACK_POP_N(stk, 1);
+
+            } else if ( (PSTACK_GET_ELEMENT_REV(stk, 2) == ' ') &&
+                        (PSTACK_GET_ELEMENT_REV(stk, 1) == '\n')) {
+                PSTACK_POP_N(stk, 2);
+                PSTACK_PUSH_CHAR(stk, '\n');
+
+            } else if ( (PSTACK_GET_ELEMENT_REV(stk, 2) == '/') &&
+                        (PSTACK_GET_ELEMENT_REV(stk, 1) == '*')) {
+                PSTACK_POP_N(stk, 2);
+                if (src_parser_tstage_1_2_3_c_cmnt(tmp_fd, src_fd, buf, cfg) < 0)
+                    return -1;
+
+            } else if ( (PSTACK_GET_ELEMENT_REV(stk, 2) == '\\') &&
+                        (PSTACK_GET_ELEMENT_REV(stk, 1) == '\n')) {
+                PSTACK_POP_N(stk, 2);
+
+            } else {
+
+                if (pstack_shift_write_n(&stk, tmp_fd, 1) < 0)
+                    return -1;
+            }
+        }
+
+        PBUF_ADVN(buf);
+    }
+
+    return 0;
+}
+
+static int src_parser_tstage_1_2_3(const int tmp_fd, const char *src, const struct trans_config *cfg)
+{
+    struct pbuf buf = {
+        .pbuf_indx = 0,
+        .pbuf_content_size = 0
     };
 
-    int write_count = 0;
     int src_fd;
-    int p_state = P_STATE_CODE;
+    int ret_val;
 
     src_fd = open(src, O_RDONLY);
     if (src_fd == -1) {
@@ -121,102 +279,18 @@ static int src_parser_trans_stage_1_2_3(const int tmp_fd, const char *src, const
         return -1;
     }
 
-    while (p_buf_refill(&pbuf, src_fd) > 0) {
-
-        while (PBUF_F_REMD(pbuf)) {
-
-            switch (p_state) {
-            case P_STATE_COMMENT_C:
-
-                switch (PBUF_F_CHAR(pbuf)) {
-                case '*':
-                    p_buf_push_tmp_char(&pbuf, '*');
-                    continue;
-
-                case '/':
-                    if (pbuf.tmp_indx && (PBUF_TMP_PREV_CHAR(pbuf) == '*')) {
-                        pbuf.tmp_indx--;
-                        p_state = P_STATE_CODE;
-                    }
-                    break;
-
-                default:
-                    if (pbuf.tmp_indx && (PBUF_TMP_PREV_CHAR(pbuf) == '*'))
-                        pbuf.tmp_indx--;
-                    break;
-                }
-
-                pbuf.f_indx++;
-
-            case P_STATE_CODE:
-            default:
-
-                /* TODO: add trigraph support */
-
-                switch (PBUF_F_CHAR(pbuf)) {
-                case ' ':
-                case '\t':
-                    if (pbuf.tmp_indx &&
-                            (PBUF_TMP_PREV_CHAR(pbuf) == ' ' || PBUF_TMP_PREV_CHAR(pbuf) == '\t' ||
-                             PBUF_TMP_PREV_CHAR(pbuf) == '\n'))
-                        pbuf.f_indx++;
-                    else
-                        p_buf_push_tmp_char(&pbuf, ' ');
-
-                    continue;
-
-                case '\r':
-                case '\n':
-                    if (pbuf.tmp_indx &&
-                            (PBUF_TMP_PREV_CHAR(pbuf) == ' ' || PBUF_TMP_PREV_CHAR(pbuf) == '\t' ||
-                             PBUF_TMP_PREV_CHAR(pbuf) == '\n')) {
-                        pbuf.f_indx++;
-                    } else if (pbuf.tmp_indx && 
-                            (PBUF_TMP_PREV_CHAR(pbuf) == '\\')) {
-                        pbuf.tmp_indx--;
-                        pbuf.f_indx++;
-                    } else {
-                        p_buf_push_tmp_char(&pbuf, '\n');
-                    }
-
-                    continue;
-
-                case '\\':
-                    p_buf_push_tmp_char(&pbuf, '\\');
-                    continue;
-
-                case '/':
-                    p_buf_push_tmp_char(&pbuf, '/');
-                    continue;
-
-                case '*':
-                    if (pbuf.tmp_indx &&
-                            (PBUF_TMP_PREV_CHAR(pbuf) == '/')) {
-                        pbuf.tmp_indx--;
-                        pbuf.f_indx++;
-                        p_state = P_STATE_COMMENT_C;
-                        continue;
-                    }
-
-                default:
-                    break;
-                }
-
-                /* TODO: check return values */
-                p_buf_write_tmp(&pbuf, tmp_fd);
-                p_buf_write_f_char(&pbuf, tmp_fd);
-            }
-        }
-    }
+    ret_val = src_parser_tstage_1_2_3_default(tmp_fd, src_fd, &buf, cfg);
 
-    p_buf_write_tmp(&pbuf, tmp_fd);
-    return 0;
+    close(src_fd);
+
+    return ret_val;
 }
 
-int src_parser_cpp(const char *src, const struct trans_config cfg)
+int src_parser_cpp(const char *src, const struct trans_config *cfg)
 {
     int tmp_fd;
     char fname[TMP_FILE_NAME_SIZE];
+    int ret_val;
 
     strncpy(fname, TMP_FILE_NAME, TMP_FILE_NAME_SIZE);
     tmp_fd = mkstemp(fname);
@@ -225,10 +299,13 @@ int src_parser_cpp(const char *src, const struct trans_config cfg)
         return -1;
     }
 
-    src_parser_trans_stage_1_2_3(tmp_fd, src, cfg);
+    ret_val = src_parser_tstage_1_2_3(tmp_fd, src, cfg);
+    if (ret_val < 0)
+        return ret_val;
 
     print_file_full(tmp_fd);
-
     unlink(fname);
+
+    return 0;
 }
 
diff --git a/src/src_parser.h b/src/src_parser.h
index 1145d4a..c409252 100644
--- a/src/src_parser.h
+++ b/src/src_parser.h
@@ -19,7 +19,9 @@
 
 #include "std_comp.h"
 
+extern struct trans_config TRANS_CFG;
+
 /* Source Parser API */
-int src_parser_cpp(const char *src, const struct trans_config cfg);
+int src_parser_cpp(const char *src, const struct trans_config *cfg);
 
 #endif /* _SRC_PARSER_H__ */
